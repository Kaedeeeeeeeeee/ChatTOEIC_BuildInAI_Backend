// ChatTOEIC v2.0 优化数据库结构
// 支持三层题目系统：真实题目池 > AI题目池 > AI实时出题

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===============================
// 枚举类型定义
// ===============================

enum UserRole {
  USER
  ADMIN
  MODERATOR  // 可以审核AI题目进入题目池
}

enum QuestionType {
  LISTENING_PART1
  LISTENING_PART2
  LISTENING_PART3
  LISTENING_PART4
  READING_PART5
  READING_PART6
  READING_PART7
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum QuestionSource {
  REAL         // 真实题目池（人工添加）
  AI_POOL      // AI题目池（用户评分后进入）
  AI_REALTIME  // AI实时生成（一次性）
}

enum QuestionStatus {
  ACTIVE       // 活跃使用中
  REVIEW       // 待审核（AI题目等待进入题目池）
  INACTIVE     // 暂停使用
  REJECTED     // 审核不通过
}

// ===============================
// 用户系统
// ===============================

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String?
  name              String?
  avatar            String?
  role              UserRole @default(USER)
  googleId          String?  @unique
  emailVerified     Boolean  @default(false)
  preferredLanguage String   @default("zh")
  isActive          Boolean  @default(true)
  
  // 用户设置
  settings          Json?
  
  // 关联数据
  practiceRecords   PracticeRecord[]
  practiceSessions  PracticeSession[]    // 新增：支持时间数据的练习会话
  chatSessions      ChatSession[]
  vocabularyItems   VocabularyItem[]
  studyProgress     StudyProgress[]
  subscription      UserSubscription?
  usageQuotas       UsageQuota[]
  paymentTransactions PaymentTransaction[]
  
  // 题目系统相关
  questionRatings   QuestionRating[]     // 用户对题目的评分
  createdQuestions  Question[]           // 管理员创建的题目
  
  // 管理员操作日志
  adminSubscriptionLogs AdminSubscriptionLog[] // 作为管理员执行的操作
  targetAdminLogs       AdminSubscriptionLog[] @relation("AdminLogTargetUser") // 作为目标用户的操作记录
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastLoginAt       DateTime?
  
  @@map("users")
}

// ===============================
// 题目系统核心
// ===============================

// 题目主表
model Question {
  id              String          @id @default(cuid())
  
  // 题目基本信息
  type            QuestionType
  difficulty      DifficultyLevel
  source          QuestionSource   // 题目来源
  status          QuestionStatus   @default(ACTIVE)
  
  // 题目内容 (JSON结构，支持所有TOEIC题目类型)
  content         Json            // 统一的题目内容结构
  correctAnswer   String          // 正确答案
  explanation     String?         // 解析
  
  // 音频相关（听力题目）
  audioUrl        String?
  audioScript     String?         // 听力原文
  
  // 题目质量指标
  qualityScore    Float           @default(0.0)    // 题目整体质量分（0-5分）
  difficultyScore Float?          // 实际难度分析
  averageTime     Int?            // 平均完成时间（秒）
  successRate     Float?          // 正确率
  
  // 使用统计
  usageCount      Int             @default(0)      // 被使用次数
  ratingCount     Int             @default(0)      // 评分次数
  lastUsedAt      DateTime?
  
  // 创建信息
  createdBy       String?         // 创建者ID（管理员创建的题目）
  creator         User?           @relation(fields: [createdBy], references: [id])
  aiGeneratedData Json?           // AI生成题目的原始数据
  
  // 审核信息（AI题目进入题目池时）
  reviewedBy      String?         // 审核者ID
  reviewedAt      DateTime?
  reviewNotes     String?
  
  // 关联数据
  practiceAnswers PracticeAnswer[] // 用户答题记录
  ratings         QuestionRating[] // 用户评分
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([type, difficulty, source, status])
  @@index([qualityScore, usageCount])
  @@map("questions")
}

// 用户答题记录（详细）
model PracticeAnswer {
  id              String         @id @default(cuid())
  
  userId          String
  questionId      String
  question        Question       @relation(fields: [questionId], references: [id])
  
  // 答题信息
  userAnswer      String         // 用户答案
  isCorrect       Boolean
  timeSpent       Int            // 答题用时（秒）
  
  // 关联练习记录
  practiceRecordId String
  practiceRecord  PracticeRecord @relation(fields: [practiceRecordId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime       @default(now())
  
  @@unique([userId, questionId, practiceRecordId])
  @@map("practice_answers")
}

// 用户对题目的评分
model QuestionRating {
  id          String   @id @default(cuid())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  questionId  String
  question    Question @relation(fields: [questionId], references: [id])
  
  // 评分详情
  rating      Int      // 1-5分
  comment     String?  // 用户评论
  
  // 评分维度（可选）
  clarity     Int?     // 题目清晰度 1-5
  difficulty  Int?     // 难度适中度 1-5
  quality     Int?     // 整体质量 1-5
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, questionId])
  @@map("question_ratings")
}

// ===============================
// 练习记录系统
// ===============================

model PracticeRecord {
  id              String         @id @default(cuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  sessionId       String         @unique
  questionType    QuestionType
  difficulty      DifficultyLevel
  questionsCount  Int
  correctAnswers  Int
  totalTime       Int            // 总用时（秒）
  score           Int?           // TOEIC估分
  
  // 题目来源统计
  realQuestions   Int            @default(0)  // 使用的真实题目数
  aiPoolQuestions Int            @default(0)  // 使用的AI池题目数
  realtimeQuestions Int          @default(0)  // 使用的实时AI题目数
  
  // 详细答题记录
  practiceAnswers PracticeAnswer[]
  
  // 旧版兼容字段（逐步迁移）
  questions       Json?          // 旧版题目存储方式
  
  completedAt     DateTime       @default(now())
  
  @@map("practice_records")
}

// ===============================
// 其他系统（保持原有结构）
// ===============================

model ChatSession {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title        String?
  messages     ChatMessage[]
  
  questionId   String?       // 关联到题目讨论
  questionData String?       // 题目数据
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@map("chat_sessions")
}

model ChatMessage {
  id            String      @id @default(cuid())
  sessionId     String
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  role          String      // "user" | "assistant"
  content       String
  metadata      Json?
  
  createdAt     DateTime    @default(now())
  
  @@map("chat_messages")
}

model VocabularyItem {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  word            String
  definition      String?
  phonetic        String?
  audioUrl        String?
  meanings        Json?    // AI返回的完整词汇信息，包含examples
  
  language        String    @default("en")
  reading         String?
  jlpt            String[]
  commonality     Boolean?
  
  notes           String?
  mastered        Boolean   @default(false)
  tags            String[]
  
  definitionLoading Boolean @default(false)
  definitionError   Boolean @default(false)
  
  nextReviewDate  DateTime @default(now())
  reviewCount     Int      @default(0)
  correctCount    Int      @default(0)
  incorrectCount  Int      @default(0)
  easeFactor      Float    @default(2.5)
  interval        Int      @default(1)
  
  addedAt         DateTime @default(now())
  lastReviewedAt  DateTime?
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, word])
  @@map("vocabulary_items")
}

model StudyProgress {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  questionType    QuestionType
  difficulty      DifficultyLevel
  
  totalQuestions  Int           @default(0)
  correctAnswers  Int           @default(0)
  averageTime     Float         @default(0)
  bestScore       Int?
  lastPracticeAt  DateTime?
  
  updatedAt       DateTime      @updatedAt
  
  @@unique([userId, questionType, difficulty])
  @@map("study_progress")
}

// ===============================
// 订阅和支付系统
// ===============================

model SubscriptionPlan {
  id               String   @id @default(cuid())
  name             String
  nameJp           String?
  priceCents       Int
  currency         String   @default("jpy")
  interval         String
  intervalCount    Int      @default(1)
  stripePriceId    String?  @unique
  stripeProductId  String?  @unique
  
  features         Json
  
  // 使用限制
  dailyPracticeLimit    Int?
  dailyAiChatLimit      Int?
  maxVocabularyWords    Int?
  
  isActive         Boolean  @default(true)
  sortOrder        Int      @default(0)
  
  subscriptions    UserSubscription[]
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("subscription_plans")
}

model UserSubscription {
  id                    String           @id @default(cuid())
  userId                String           @unique
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId                String
  plan                  SubscriptionPlan @relation(fields: [planId], references: [id])
  
  stripeCustomerId      String?
  stripeSubscriptionId  String?          @unique
  stripeSessionId       String?
  
  status                String
  
  trialStart           DateTime?
  trialEnd             DateTime?
  
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean          @default(false)
  canceledAt           DateTime?
  
  lastPaymentAt        DateTime?
  nextPaymentAt        DateTime?
  
  // 测试账户标记 - 用于管理员测试功能
  isTestAccount        Boolean          @default(false)
  
  paymentTransactions  PaymentTransaction[]
  adminSubscriptionLogs AdminSubscriptionLog[]
  
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  
  @@map("user_subscriptions")
}

model UsageQuota {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  resourceType String   // "daily_practice", "daily_ai_chat", "vocabulary_words"
  usedCount    Int      @default(0)
  limitCount   Int?     // null表示无限制
  
  periodStart  DateTime @default(now())
  periodEnd    DateTime
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([userId, resourceType, periodStart])
  @@map("usage_quotas")
}

model PaymentTransaction {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  
  stripeSessionId   String?  @unique
  stripePaymentId   String?  @unique
  
  amount            Int
  currency          String   @default("jpy")
  status            String
  
  subscriptionId    String?
  subscription      UserSubscription? @relation(fields: [subscriptionId], references: [id])
  
  metadata          Json?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("payment_transactions")
}

// ===============================
// 系统管理
// ===============================

model APIUsage {
  id            String   @id @default(cuid())
  userId        String?
  endpoint      String
  method        String
  statusCode    Int
  responseTime  Int
  userAgent     String?
  ipAddress     String?
  
  createdAt     DateTime @default(now())
  
  @@map("api_usage")
}

model TokenBlacklist {
  id          String   @id @default(cuid())
  userId      String
  tokenId     String
  reason      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  @@unique([userId, tokenId])
  @@map("token_blacklist")
}

// 管理员订阅操作日志
model AdminSubscriptionLog {
  id              String           @id @default(cuid())
  adminUserId     String          // 执行操作的管理员ID
  adminUser       User            @relation(fields: [adminUserId], references: [id], onDelete: Cascade)
  targetUserId    String          // 被操作的用户ID
  targetUser      User            @relation("AdminLogTargetUser", fields: [targetUserId], references: [id], onDelete: Cascade)
  
  subscriptionId  String?         // 相关的订阅ID（可选）
  subscription    UserSubscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  
  operationType   String          // 操作类型: status_change, test_account_toggle, etc.
  oldStatus       String?         // 操作前状态
  newStatus       String?         // 操作后状态
  oldTestAccount  Boolean?        // 操作前是否为测试账户
  newTestAccount  Boolean?        // 操作后是否为测试账户
  
  metadata        Json?           // 其他操作相关数据
  reason          String?         // 操作原因说明
  
  createdAt       DateTime        @default(now())
  
  @@map("admin_subscription_logs")
}

// ===============================
// 邮件系统
// ===============================

// 邮件类型枚举
enum EmailType {
  REGISTRATION_VERIFICATION
  PASSWORD_RESET
  EMAIL_CHANGE_CONFIRMATION
  WELCOME
  SECURITY_ALERT
  SYSTEM_NOTIFICATION
  FEATURE_ANNOUNCEMENT
  WEEKLY_REPORT
  UNSUBSCRIBE_CONFIRMATION
}

// 邮件状态枚举
enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
  COMPLAINED
}

// 邮件发送记录
model EmailLog {
  id              String      @id @default(cuid())
  
  // 基本信息
  type            EmailType
  status          EmailStatus @default(PENDING)
  
  // 收件人信息
  recipientEmail  String
  recipientName   String?
  userId          String?     // 关联用户（如果有）
  
  // 邮件内容
  subject         String
  templateName    String      // 使用的模板名称
  templateData    Json?       // 模板参数数据
  htmlContent     String?     // 渲染后的HTML内容
  
  // 发送信息
  emailProvider   String      @default("resend") // 邮件服务商
  providerEmailId String?     // 服务商返回的邮件ID
  
  // 时间信息
  sentAt          DateTime?
  deliveredAt     DateTime?
  openedAt        DateTime?   // 首次打开时间
  clickedAt       DateTime?   // 首次点击时间
  
  // 错误信息
  errorMessage    String?
  errorCode       String?
  retryCount      Int         @default(0)
  maxRetries      Int         @default(3)
  
  // 元数据
  metadata        Json?       // 额外的元数据
  tags            String[]    // 邮件标签
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([recipientEmail, type])
  @@index([userId, type, createdAt])
  @@index([status, sentAt])
  @@map("email_logs")
}

// 邮件模板管理
model EmailTemplate {
  id              String      @id @default(cuid())
  
  // 模板基本信息
  name            String      @unique  // 模板名称标识符
  displayName     String               // 显示名称
  type            EmailType            // 邮件类型
  
  // 模板内容
  subject         String               // 邮件主题模板
  description     String?              // 模板描述
  
  // 模板变量定义
  variables       Json                 // 模板变量定义和说明
  
  // 版本控制
  version         Int         @default(1)
  isActive        Boolean     @default(true)
  
  // 使用统计
  usageCount      Int         @default(0)
  lastUsedAt      DateTime?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("email_templates")
}

// 用户邮件偏好设置
model UserEmailPreference {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  
  // 邮件接收偏好
  receiveSecurityAlerts   Boolean  @default(true)   // 安全警告
  receiveSystemNotify     Boolean  @default(true)   // 系统通知
  receiveWeeklyReport     Boolean  @default(true)   // 周报
  receiveFeatureNews      Boolean  @default(true)   // 功能推广
  receivePromotional      Boolean  @default(false)  // 促销邮件
  
  // 发送频率控制
  weeklyReportDay         Int      @default(1)      // 周报发送日期(1-7, 1=周一)
  promotionalFrequency    String   @default("weekly") // never, weekly, monthly
  
  // 退订信息
  globalUnsubscribe       Boolean  @default(false)  // 全局退订
  unsubscribeToken        String?  @unique          // 退订令牌
  unsubscribedAt          DateTime?
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  @@map("user_email_preferences")
}

// 邮件统计汇总
model EmailStats {
  id                String      @id @default(cuid())
  
  // 统计日期
  date              DateTime    @unique @db.Date
  
  // 发送统计
  totalSent         Int         @default(0)
  totalDelivered    Int         @default(0)
  totalFailed       Int         @default(0)
  totalBounced      Int         @default(0)
  
  // 用户交互统计
  totalOpened       Int         @default(0)
  totalClicked      Int         @default(0)
  totalUnsubscribed Int         @default(0)
  totalComplaints   Int         @default(0)
  
  // 按类型统计
  verificationEmails Int        @default(0)
  notificationEmails Int        @default(0)
  marketingEmails    Int        @default(0)
  
  // 计算字段 (可在应用层计算)
  openRate          Float?      // 打开率
  clickRate         Float?      // 点击率
  deliveryRate      Float?      // 投递率
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@map("email_stats")
}

// ===============================
// 时间数据和听力功能支持
// 用于前端计时功能和学习分析
// ===============================

// 练习会话表（扩展支持时间数据）
model PracticeSession {
  id                    String                 @id @default(cuid())
  userId                String
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  sessionType           String                 @default("quick_practice")
  questions             Json                   @default("[]")
  userAnswers           Json                   @default("[]")
  score                 Int?
  completed             Boolean                @default(false)

  // 时间统计字段
  questionTimes         Json?                  // 前端时间数据数组
  totalTimeSpent        Int?                   // 总用时（秒）
  averageTimePerQuestion Int?                  // 平均每题用时（秒）
  overtimeQuestions     Int?                   // 超时题目数

  // 关联的详细时间记录
  questionTimeRecords   QuestionTimeRecord[]
  audioPlaybackRecords  AudioPlaybackRecord[]

  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  @@map("practice_sessions")
}

// 题目时间记录表（详细记录每题时间数据）
model QuestionTimeRecord {
  id               String          @id @default(cuid())
  sessionId        String
  session          PracticeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  questionId       String
  questionIndex    Int
  questionType     String          // 'listening' | 'reading'
  questionCategory String          // 'Part 1', 'Part 2', etc.

  timeSpent        Int             // 实际用时（秒）
  timeLimit        Int?            // 建议用时（秒），听力题可为null
  isOvertime       Boolean         @default(false)

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@map("question_time_records")
  @@index([sessionId])
  @@index([questionCategory])
  @@index([questionType])
}

// 音频播放记录表（记录听力题目播放行为）
model AudioPlaybackRecord {
  id                 String          @id @default(cuid())
  sessionId          String
  session            PracticeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  questionId         String
  questionIndex      Int
  audioUrl           String
  audioDuration      Int?            // 音频时长（秒）

  playCount          Int             @default(0)     // 播放次数
  totalListenTime    Int             @default(0)     // 总听音时间（秒）
  completedListening Boolean         @default(false) // 是否完整听完

  firstPlayedAt      DateTime?
  lastPlayedAt       DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  @@map("audio_playback_records")
  @@index([sessionId])
  @@index([questionId])
}