
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  avatar: 'avatar',
  role: 'role',
  googleId: 'googleId',
  emailVerified: 'emailVerified',
  preferredLanguage: 'preferredLanguage',
  isActive: 'isActive',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  difficulty: 'difficulty',
  source: 'source',
  status: 'status',
  content: 'content',
  correctAnswer: 'correctAnswer',
  explanation: 'explanation',
  audioUrl: 'audioUrl',
  audioScript: 'audioScript',
  qualityScore: 'qualityScore',
  difficultyScore: 'difficultyScore',
  averageTime: 'averageTime',
  successRate: 'successRate',
  usageCount: 'usageCount',
  ratingCount: 'ratingCount',
  lastUsedAt: 'lastUsedAt',
  createdBy: 'createdBy',
  aiGeneratedData: 'aiGeneratedData',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  reviewNotes: 'reviewNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PracticeAnswerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionId: 'questionId',
  userAnswer: 'userAnswer',
  isCorrect: 'isCorrect',
  timeSpent: 'timeSpent',
  practiceRecordId: 'practiceRecordId',
  createdAt: 'createdAt'
};

exports.Prisma.QuestionRatingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionId: 'questionId',
  rating: 'rating',
  comment: 'comment',
  clarity: 'clarity',
  difficulty: 'difficulty',
  quality: 'quality',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PracticeRecordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  questionType: 'questionType',
  difficulty: 'difficulty',
  questionsCount: 'questionsCount',
  correctAnswers: 'correctAnswers',
  totalTime: 'totalTime',
  score: 'score',
  realQuestions: 'realQuestions',
  aiPoolQuestions: 'aiPoolQuestions',
  realtimeQuestions: 'realtimeQuestions',
  questions: 'questions',
  completedAt: 'completedAt'
};

exports.Prisma.ChatSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  questionId: 'questionId',
  questionData: 'questionData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  role: 'role',
  content: 'content',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.VocabularyItemScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  word: 'word',
  definition: 'definition',
  phonetic: 'phonetic',
  audioUrl: 'audioUrl',
  context: 'context',
  meanings: 'meanings',
  language: 'language',
  reading: 'reading',
  jlpt: 'jlpt',
  commonality: 'commonality',
  sourceType: 'sourceType',
  sourceId: 'sourceId',
  notes: 'notes',
  mastered: 'mastered',
  tags: 'tags',
  definitionLoading: 'definitionLoading',
  definitionError: 'definitionError',
  nextReviewDate: 'nextReviewDate',
  reviewCount: 'reviewCount',
  correctCount: 'correctCount',
  incorrectCount: 'incorrectCount',
  easeFactor: 'easeFactor',
  interval: 'interval',
  addedAt: 'addedAt',
  lastReviewedAt: 'lastReviewedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudyProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionType: 'questionType',
  difficulty: 'difficulty',
  totalQuestions: 'totalQuestions',
  correctAnswers: 'correctAnswers',
  averageTime: 'averageTime',
  bestScore: 'bestScore',
  lastPracticeAt: 'lastPracticeAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameJp: 'nameJp',
  priceCents: 'priceCents',
  currency: 'currency',
  interval: 'interval',
  intervalCount: 'intervalCount',
  stripePriceId: 'stripePriceId',
  stripeProductId: 'stripeProductId',
  features: 'features',
  dailyPracticeLimit: 'dailyPracticeLimit',
  dailyAiChatLimit: 'dailyAiChatLimit',
  maxVocabularyWords: 'maxVocabularyWords',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planId: 'planId',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripeSessionId: 'stripeSessionId',
  status: 'status',
  trialStart: 'trialStart',
  trialEnd: 'trialEnd',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  canceledAt: 'canceledAt',
  lastPaymentAt: 'lastPaymentAt',
  nextPaymentAt: 'nextPaymentAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsageQuotaScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  resourceType: 'resourceType',
  usedCount: 'usedCount',
  limitCount: 'limitCount',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripeSessionId: 'stripeSessionId',
  stripePaymentId: 'stripePaymentId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  subscriptionId: 'subscriptionId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.APIUsageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  endpoint: 'endpoint',
  method: 'method',
  statusCode: 'statusCode',
  responseTime: 'responseTime',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt'
};

exports.Prisma.TokenBlacklistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenId: 'tokenId',
  reason: 'reason',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR'
};

exports.QuestionType = exports.$Enums.QuestionType = {
  LISTENING_PART1: 'LISTENING_PART1',
  LISTENING_PART2: 'LISTENING_PART2',
  LISTENING_PART3: 'LISTENING_PART3',
  LISTENING_PART4: 'LISTENING_PART4',
  READING_PART5: 'READING_PART5',
  READING_PART6: 'READING_PART6',
  READING_PART7: 'READING_PART7'
};

exports.DifficultyLevel = exports.$Enums.DifficultyLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.QuestionSource = exports.$Enums.QuestionSource = {
  REAL: 'REAL',
  AI_POOL: 'AI_POOL',
  AI_REALTIME: 'AI_REALTIME'
};

exports.QuestionStatus = exports.$Enums.QuestionStatus = {
  ACTIVE: 'ACTIVE',
  REVIEW: 'REVIEW',
  INACTIVE: 'INACTIVE',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Question: 'Question',
  PracticeAnswer: 'PracticeAnswer',
  QuestionRating: 'QuestionRating',
  PracticeRecord: 'PracticeRecord',
  ChatSession: 'ChatSession',
  ChatMessage: 'ChatMessage',
  VocabularyItem: 'VocabularyItem',
  StudyProgress: 'StudyProgress',
  SubscriptionPlan: 'SubscriptionPlan',
  UserSubscription: 'UserSubscription',
  UsageQuota: 'UsageQuota',
  PaymentTransaction: 'PaymentTransaction',
  APIUsage: 'APIUsage',
  TokenBlacklist: 'TokenBlacklist'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
