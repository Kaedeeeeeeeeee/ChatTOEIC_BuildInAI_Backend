
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model PracticeAnswer
 * 
 */
export type PracticeAnswer = $Result.DefaultSelection<Prisma.$PracticeAnswerPayload>
/**
 * Model QuestionRating
 * 
 */
export type QuestionRating = $Result.DefaultSelection<Prisma.$QuestionRatingPayload>
/**
 * Model PracticeRecord
 * 
 */
export type PracticeRecord = $Result.DefaultSelection<Prisma.$PracticeRecordPayload>
/**
 * Model ChatSession
 * 
 */
export type ChatSession = $Result.DefaultSelection<Prisma.$ChatSessionPayload>
/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>
/**
 * Model VocabularyItem
 * 
 */
export type VocabularyItem = $Result.DefaultSelection<Prisma.$VocabularyItemPayload>
/**
 * Model StudyProgress
 * 
 */
export type StudyProgress = $Result.DefaultSelection<Prisma.$StudyProgressPayload>
/**
 * Model SubscriptionPlan
 * 
 */
export type SubscriptionPlan = $Result.DefaultSelection<Prisma.$SubscriptionPlanPayload>
/**
 * Model UserSubscription
 * 
 */
export type UserSubscription = $Result.DefaultSelection<Prisma.$UserSubscriptionPayload>
/**
 * Model UsageQuota
 * 
 */
export type UsageQuota = $Result.DefaultSelection<Prisma.$UsageQuotaPayload>
/**
 * Model PaymentTransaction
 * 
 */
export type PaymentTransaction = $Result.DefaultSelection<Prisma.$PaymentTransactionPayload>
/**
 * Model APIUsage
 * 
 */
export type APIUsage = $Result.DefaultSelection<Prisma.$APIUsagePayload>
/**
 * Model TokenBlacklist
 * 
 */
export type TokenBlacklist = $Result.DefaultSelection<Prisma.$TokenBlacklistPayload>
/**
 * Model AdminSubscriptionLog
 * 
 */
export type AdminSubscriptionLog = $Result.DefaultSelection<Prisma.$AdminSubscriptionLogPayload>
/**
 * Model EmailLog
 * 
 */
export type EmailLog = $Result.DefaultSelection<Prisma.$EmailLogPayload>
/**
 * Model EmailTemplate
 * 
 */
export type EmailTemplate = $Result.DefaultSelection<Prisma.$EmailTemplatePayload>
/**
 * Model UserEmailPreference
 * 
 */
export type UserEmailPreference = $Result.DefaultSelection<Prisma.$UserEmailPreferencePayload>
/**
 * Model EmailStats
 * 
 */
export type EmailStats = $Result.DefaultSelection<Prisma.$EmailStatsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  USER: 'USER',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const QuestionType: {
  LISTENING_PART1: 'LISTENING_PART1',
  LISTENING_PART2: 'LISTENING_PART2',
  LISTENING_PART3: 'LISTENING_PART3',
  LISTENING_PART4: 'LISTENING_PART4',
  READING_PART5: 'READING_PART5',
  READING_PART6: 'READING_PART6',
  READING_PART7: 'READING_PART7'
};

export type QuestionType = (typeof QuestionType)[keyof typeof QuestionType]


export const DifficultyLevel: {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

export type DifficultyLevel = (typeof DifficultyLevel)[keyof typeof DifficultyLevel]


export const QuestionSource: {
  REAL: 'REAL',
  AI_POOL: 'AI_POOL',
  AI_REALTIME: 'AI_REALTIME'
};

export type QuestionSource = (typeof QuestionSource)[keyof typeof QuestionSource]


export const QuestionStatus: {
  ACTIVE: 'ACTIVE',
  REVIEW: 'REVIEW',
  INACTIVE: 'INACTIVE',
  REJECTED: 'REJECTED'
};

export type QuestionStatus = (typeof QuestionStatus)[keyof typeof QuestionStatus]


export const EmailType: {
  REGISTRATION_VERIFICATION: 'REGISTRATION_VERIFICATION',
  PASSWORD_RESET: 'PASSWORD_RESET',
  EMAIL_CHANGE_CONFIRMATION: 'EMAIL_CHANGE_CONFIRMATION',
  WELCOME: 'WELCOME',
  SECURITY_ALERT: 'SECURITY_ALERT',
  SYSTEM_NOTIFICATION: 'SYSTEM_NOTIFICATION',
  FEATURE_ANNOUNCEMENT: 'FEATURE_ANNOUNCEMENT',
  WEEKLY_REPORT: 'WEEKLY_REPORT',
  UNSUBSCRIBE_CONFIRMATION: 'UNSUBSCRIBE_CONFIRMATION'
};

export type EmailType = (typeof EmailType)[keyof typeof EmailType]


export const EmailStatus: {
  PENDING: 'PENDING',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  FAILED: 'FAILED',
  BOUNCED: 'BOUNCED',
  COMPLAINED: 'COMPLAINED'
};

export type EmailStatus = (typeof EmailStatus)[keyof typeof EmailStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type QuestionType = $Enums.QuestionType

export const QuestionType: typeof $Enums.QuestionType

export type DifficultyLevel = $Enums.DifficultyLevel

export const DifficultyLevel: typeof $Enums.DifficultyLevel

export type QuestionSource = $Enums.QuestionSource

export const QuestionSource: typeof $Enums.QuestionSource

export type QuestionStatus = $Enums.QuestionStatus

export const QuestionStatus: typeof $Enums.QuestionStatus

export type EmailType = $Enums.EmailType

export const EmailType: typeof $Enums.EmailType

export type EmailStatus = $Enums.EmailStatus

export const EmailStatus: typeof $Enums.EmailStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.practiceAnswer`: Exposes CRUD operations for the **PracticeAnswer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PracticeAnswers
    * const practiceAnswers = await prisma.practiceAnswer.findMany()
    * ```
    */
  get practiceAnswer(): Prisma.PracticeAnswerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionRating`: Exposes CRUD operations for the **QuestionRating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionRatings
    * const questionRatings = await prisma.questionRating.findMany()
    * ```
    */
  get questionRating(): Prisma.QuestionRatingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.practiceRecord`: Exposes CRUD operations for the **PracticeRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PracticeRecords
    * const practiceRecords = await prisma.practiceRecord.findMany()
    * ```
    */
  get practiceRecord(): Prisma.PracticeRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatSession`: Exposes CRUD operations for the **ChatSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatSessions
    * const chatSessions = await prisma.chatSession.findMany()
    * ```
    */
  get chatSession(): Prisma.ChatSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vocabularyItem`: Exposes CRUD operations for the **VocabularyItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VocabularyItems
    * const vocabularyItems = await prisma.vocabularyItem.findMany()
    * ```
    */
  get vocabularyItem(): Prisma.VocabularyItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studyProgress`: Exposes CRUD operations for the **StudyProgress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudyProgresses
    * const studyProgresses = await prisma.studyProgress.findMany()
    * ```
    */
  get studyProgress(): Prisma.StudyProgressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscriptionPlan`: Exposes CRUD operations for the **SubscriptionPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubscriptionPlans
    * const subscriptionPlans = await prisma.subscriptionPlan.findMany()
    * ```
    */
  get subscriptionPlan(): Prisma.SubscriptionPlanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSubscription`: Exposes CRUD operations for the **UserSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSubscriptions
    * const userSubscriptions = await prisma.userSubscription.findMany()
    * ```
    */
  get userSubscription(): Prisma.UserSubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usageQuota`: Exposes CRUD operations for the **UsageQuota** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsageQuotas
    * const usageQuotas = await prisma.usageQuota.findMany()
    * ```
    */
  get usageQuota(): Prisma.UsageQuotaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paymentTransaction`: Exposes CRUD operations for the **PaymentTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentTransactions
    * const paymentTransactions = await prisma.paymentTransaction.findMany()
    * ```
    */
  get paymentTransaction(): Prisma.PaymentTransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aPIUsage`: Exposes CRUD operations for the **APIUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more APIUsages
    * const aPIUsages = await prisma.aPIUsage.findMany()
    * ```
    */
  get aPIUsage(): Prisma.APIUsageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tokenBlacklist`: Exposes CRUD operations for the **TokenBlacklist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TokenBlacklists
    * const tokenBlacklists = await prisma.tokenBlacklist.findMany()
    * ```
    */
  get tokenBlacklist(): Prisma.TokenBlacklistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminSubscriptionLog`: Exposes CRUD operations for the **AdminSubscriptionLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminSubscriptionLogs
    * const adminSubscriptionLogs = await prisma.adminSubscriptionLog.findMany()
    * ```
    */
  get adminSubscriptionLog(): Prisma.AdminSubscriptionLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailLog`: Exposes CRUD operations for the **EmailLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailLogs
    * const emailLogs = await prisma.emailLog.findMany()
    * ```
    */
  get emailLog(): Prisma.EmailLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailTemplate`: Exposes CRUD operations for the **EmailTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailTemplates
    * const emailTemplates = await prisma.emailTemplate.findMany()
    * ```
    */
  get emailTemplate(): Prisma.EmailTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userEmailPreference`: Exposes CRUD operations for the **UserEmailPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserEmailPreferences
    * const userEmailPreferences = await prisma.userEmailPreference.findMany()
    * ```
    */
  get userEmailPreference(): Prisma.UserEmailPreferenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailStats`: Exposes CRUD operations for the **EmailStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailStats
    * const emailStats = await prisma.emailStats.findMany()
    * ```
    */
  get emailStats(): Prisma.EmailStatsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.0
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Question: 'Question',
    PracticeAnswer: 'PracticeAnswer',
    QuestionRating: 'QuestionRating',
    PracticeRecord: 'PracticeRecord',
    ChatSession: 'ChatSession',
    ChatMessage: 'ChatMessage',
    VocabularyItem: 'VocabularyItem',
    StudyProgress: 'StudyProgress',
    SubscriptionPlan: 'SubscriptionPlan',
    UserSubscription: 'UserSubscription',
    UsageQuota: 'UsageQuota',
    PaymentTransaction: 'PaymentTransaction',
    APIUsage: 'APIUsage',
    TokenBlacklist: 'TokenBlacklist',
    AdminSubscriptionLog: 'AdminSubscriptionLog',
    EmailLog: 'EmailLog',
    EmailTemplate: 'EmailTemplate',
    UserEmailPreference: 'UserEmailPreference',
    EmailStats: 'EmailStats'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "question" | "practiceAnswer" | "questionRating" | "practiceRecord" | "chatSession" | "chatMessage" | "vocabularyItem" | "studyProgress" | "subscriptionPlan" | "userSubscription" | "usageQuota" | "paymentTransaction" | "aPIUsage" | "tokenBlacklist" | "adminSubscriptionLog" | "emailLog" | "emailTemplate" | "userEmailPreference" | "emailStats"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      PracticeAnswer: {
        payload: Prisma.$PracticeAnswerPayload<ExtArgs>
        fields: Prisma.PracticeAnswerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PracticeAnswerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeAnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PracticeAnswerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeAnswerPayload>
          }
          findFirst: {
            args: Prisma.PracticeAnswerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeAnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PracticeAnswerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeAnswerPayload>
          }
          findMany: {
            args: Prisma.PracticeAnswerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeAnswerPayload>[]
          }
          create: {
            args: Prisma.PracticeAnswerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeAnswerPayload>
          }
          createMany: {
            args: Prisma.PracticeAnswerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PracticeAnswerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeAnswerPayload>[]
          }
          delete: {
            args: Prisma.PracticeAnswerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeAnswerPayload>
          }
          update: {
            args: Prisma.PracticeAnswerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeAnswerPayload>
          }
          deleteMany: {
            args: Prisma.PracticeAnswerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PracticeAnswerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PracticeAnswerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeAnswerPayload>[]
          }
          upsert: {
            args: Prisma.PracticeAnswerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeAnswerPayload>
          }
          aggregate: {
            args: Prisma.PracticeAnswerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePracticeAnswer>
          }
          groupBy: {
            args: Prisma.PracticeAnswerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PracticeAnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PracticeAnswerCountArgs<ExtArgs>
            result: $Utils.Optional<PracticeAnswerCountAggregateOutputType> | number
          }
        }
      }
      QuestionRating: {
        payload: Prisma.$QuestionRatingPayload<ExtArgs>
        fields: Prisma.QuestionRatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionRatingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionRatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionRatingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionRatingPayload>
          }
          findFirst: {
            args: Prisma.QuestionRatingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionRatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionRatingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionRatingPayload>
          }
          findMany: {
            args: Prisma.QuestionRatingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionRatingPayload>[]
          }
          create: {
            args: Prisma.QuestionRatingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionRatingPayload>
          }
          createMany: {
            args: Prisma.QuestionRatingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionRatingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionRatingPayload>[]
          }
          delete: {
            args: Prisma.QuestionRatingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionRatingPayload>
          }
          update: {
            args: Prisma.QuestionRatingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionRatingPayload>
          }
          deleteMany: {
            args: Prisma.QuestionRatingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionRatingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionRatingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionRatingPayload>[]
          }
          upsert: {
            args: Prisma.QuestionRatingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionRatingPayload>
          }
          aggregate: {
            args: Prisma.QuestionRatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionRating>
          }
          groupBy: {
            args: Prisma.QuestionRatingGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionRatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionRatingCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionRatingCountAggregateOutputType> | number
          }
        }
      }
      PracticeRecord: {
        payload: Prisma.$PracticeRecordPayload<ExtArgs>
        fields: Prisma.PracticeRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PracticeRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PracticeRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeRecordPayload>
          }
          findFirst: {
            args: Prisma.PracticeRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PracticeRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeRecordPayload>
          }
          findMany: {
            args: Prisma.PracticeRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeRecordPayload>[]
          }
          create: {
            args: Prisma.PracticeRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeRecordPayload>
          }
          createMany: {
            args: Prisma.PracticeRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PracticeRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeRecordPayload>[]
          }
          delete: {
            args: Prisma.PracticeRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeRecordPayload>
          }
          update: {
            args: Prisma.PracticeRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeRecordPayload>
          }
          deleteMany: {
            args: Prisma.PracticeRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PracticeRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PracticeRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeRecordPayload>[]
          }
          upsert: {
            args: Prisma.PracticeRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeRecordPayload>
          }
          aggregate: {
            args: Prisma.PracticeRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePracticeRecord>
          }
          groupBy: {
            args: Prisma.PracticeRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<PracticeRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.PracticeRecordCountArgs<ExtArgs>
            result: $Utils.Optional<PracticeRecordCountAggregateOutputType> | number
          }
        }
      }
      ChatSession: {
        payload: Prisma.$ChatSessionPayload<ExtArgs>
        fields: Prisma.ChatSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          findFirst: {
            args: Prisma.ChatSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          findMany: {
            args: Prisma.ChatSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          create: {
            args: Prisma.ChatSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          createMany: {
            args: Prisma.ChatSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          delete: {
            args: Prisma.ChatSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          update: {
            args: Prisma.ChatSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          deleteMany: {
            args: Prisma.ChatSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          upsert: {
            args: Prisma.ChatSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          aggregate: {
            args: Prisma.ChatSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatSession>
          }
          groupBy: {
            args: Prisma.ChatSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatSessionCountArgs<ExtArgs>
            result: $Utils.Optional<ChatSessionCountAggregateOutputType> | number
          }
        }
      }
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>
        fields: Prisma.ChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatMessage>
          }
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageCountAggregateOutputType> | number
          }
        }
      }
      VocabularyItem: {
        payload: Prisma.$VocabularyItemPayload<ExtArgs>
        fields: Prisma.VocabularyItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VocabularyItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VocabularyItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VocabularyItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VocabularyItemPayload>
          }
          findFirst: {
            args: Prisma.VocabularyItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VocabularyItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VocabularyItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VocabularyItemPayload>
          }
          findMany: {
            args: Prisma.VocabularyItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VocabularyItemPayload>[]
          }
          create: {
            args: Prisma.VocabularyItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VocabularyItemPayload>
          }
          createMany: {
            args: Prisma.VocabularyItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VocabularyItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VocabularyItemPayload>[]
          }
          delete: {
            args: Prisma.VocabularyItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VocabularyItemPayload>
          }
          update: {
            args: Prisma.VocabularyItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VocabularyItemPayload>
          }
          deleteMany: {
            args: Prisma.VocabularyItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VocabularyItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VocabularyItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VocabularyItemPayload>[]
          }
          upsert: {
            args: Prisma.VocabularyItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VocabularyItemPayload>
          }
          aggregate: {
            args: Prisma.VocabularyItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVocabularyItem>
          }
          groupBy: {
            args: Prisma.VocabularyItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<VocabularyItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.VocabularyItemCountArgs<ExtArgs>
            result: $Utils.Optional<VocabularyItemCountAggregateOutputType> | number
          }
        }
      }
      StudyProgress: {
        payload: Prisma.$StudyProgressPayload<ExtArgs>
        fields: Prisma.StudyProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudyProgressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudyProgressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyProgressPayload>
          }
          findFirst: {
            args: Prisma.StudyProgressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudyProgressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyProgressPayload>
          }
          findMany: {
            args: Prisma.StudyProgressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyProgressPayload>[]
          }
          create: {
            args: Prisma.StudyProgressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyProgressPayload>
          }
          createMany: {
            args: Prisma.StudyProgressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudyProgressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyProgressPayload>[]
          }
          delete: {
            args: Prisma.StudyProgressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyProgressPayload>
          }
          update: {
            args: Prisma.StudyProgressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyProgressPayload>
          }
          deleteMany: {
            args: Prisma.StudyProgressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudyProgressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudyProgressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyProgressPayload>[]
          }
          upsert: {
            args: Prisma.StudyProgressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyProgressPayload>
          }
          aggregate: {
            args: Prisma.StudyProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudyProgress>
          }
          groupBy: {
            args: Prisma.StudyProgressGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudyProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudyProgressCountArgs<ExtArgs>
            result: $Utils.Optional<StudyProgressCountAggregateOutputType> | number
          }
        }
      }
      SubscriptionPlan: {
        payload: Prisma.$SubscriptionPlanPayload<ExtArgs>
        fields: Prisma.SubscriptionPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          findMany: {
            args: Prisma.SubscriptionPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>[]
          }
          create: {
            args: Prisma.SubscriptionPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          createMany: {
            args: Prisma.SubscriptionPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          update: {
            args: Prisma.SubscriptionPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubscriptionPlanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>[]
          }
          upsert: {
            args: Prisma.SubscriptionPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscriptionPlan>
          }
          groupBy: {
            args: Prisma.SubscriptionPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionPlanCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionPlanCountAggregateOutputType> | number
          }
        }
      }
      UserSubscription: {
        payload: Prisma.$UserSubscriptionPayload<ExtArgs>
        fields: Prisma.UserSubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.UserSubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>
          }
          findMany: {
            args: Prisma.UserSubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>[]
          }
          create: {
            args: Prisma.UserSubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>
          }
          createMany: {
            args: Prisma.UserSubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>[]
          }
          delete: {
            args: Prisma.UserSubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>
          }
          update: {
            args: Prisma.UserSubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.UserSubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.UserSubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.UserSubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSubscription>
          }
          groupBy: {
            args: Prisma.UserSubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSubscriptionCountAggregateOutputType> | number
          }
        }
      }
      UsageQuota: {
        payload: Prisma.$UsageQuotaPayload<ExtArgs>
        fields: Prisma.UsageQuotaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsageQuotaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageQuotaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsageQuotaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageQuotaPayload>
          }
          findFirst: {
            args: Prisma.UsageQuotaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageQuotaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsageQuotaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageQuotaPayload>
          }
          findMany: {
            args: Prisma.UsageQuotaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageQuotaPayload>[]
          }
          create: {
            args: Prisma.UsageQuotaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageQuotaPayload>
          }
          createMany: {
            args: Prisma.UsageQuotaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsageQuotaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageQuotaPayload>[]
          }
          delete: {
            args: Prisma.UsageQuotaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageQuotaPayload>
          }
          update: {
            args: Prisma.UsageQuotaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageQuotaPayload>
          }
          deleteMany: {
            args: Prisma.UsageQuotaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsageQuotaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsageQuotaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageQuotaPayload>[]
          }
          upsert: {
            args: Prisma.UsageQuotaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageQuotaPayload>
          }
          aggregate: {
            args: Prisma.UsageQuotaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsageQuota>
          }
          groupBy: {
            args: Prisma.UsageQuotaGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsageQuotaGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsageQuotaCountArgs<ExtArgs>
            result: $Utils.Optional<UsageQuotaCountAggregateOutputType> | number
          }
        }
      }
      PaymentTransaction: {
        payload: Prisma.$PaymentTransactionPayload<ExtArgs>
        fields: Prisma.PaymentTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          findFirst: {
            args: Prisma.PaymentTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          findMany: {
            args: Prisma.PaymentTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>[]
          }
          create: {
            args: Prisma.PaymentTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          createMany: {
            args: Prisma.PaymentTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>[]
          }
          delete: {
            args: Prisma.PaymentTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          update: {
            args: Prisma.PaymentTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          deleteMany: {
            args: Prisma.PaymentTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentTransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>[]
          }
          upsert: {
            args: Prisma.PaymentTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          aggregate: {
            args: Prisma.PaymentTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentTransaction>
          }
          groupBy: {
            args: Prisma.PaymentTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentTransactionCountAggregateOutputType> | number
          }
        }
      }
      APIUsage: {
        payload: Prisma.$APIUsagePayload<ExtArgs>
        fields: Prisma.APIUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.APIUsageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.APIUsageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUsagePayload>
          }
          findFirst: {
            args: Prisma.APIUsageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.APIUsageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUsagePayload>
          }
          findMany: {
            args: Prisma.APIUsageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUsagePayload>[]
          }
          create: {
            args: Prisma.APIUsageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUsagePayload>
          }
          createMany: {
            args: Prisma.APIUsageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.APIUsageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUsagePayload>[]
          }
          delete: {
            args: Prisma.APIUsageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUsagePayload>
          }
          update: {
            args: Prisma.APIUsageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUsagePayload>
          }
          deleteMany: {
            args: Prisma.APIUsageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.APIUsageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.APIUsageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUsagePayload>[]
          }
          upsert: {
            args: Prisma.APIUsageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIUsagePayload>
          }
          aggregate: {
            args: Prisma.APIUsageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAPIUsage>
          }
          groupBy: {
            args: Prisma.APIUsageGroupByArgs<ExtArgs>
            result: $Utils.Optional<APIUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.APIUsageCountArgs<ExtArgs>
            result: $Utils.Optional<APIUsageCountAggregateOutputType> | number
          }
        }
      }
      TokenBlacklist: {
        payload: Prisma.$TokenBlacklistPayload<ExtArgs>
        fields: Prisma.TokenBlacklistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokenBlacklistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenBlacklistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokenBlacklistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenBlacklistPayload>
          }
          findFirst: {
            args: Prisma.TokenBlacklistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenBlacklistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokenBlacklistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenBlacklistPayload>
          }
          findMany: {
            args: Prisma.TokenBlacklistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenBlacklistPayload>[]
          }
          create: {
            args: Prisma.TokenBlacklistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenBlacklistPayload>
          }
          createMany: {
            args: Prisma.TokenBlacklistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TokenBlacklistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenBlacklistPayload>[]
          }
          delete: {
            args: Prisma.TokenBlacklistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenBlacklistPayload>
          }
          update: {
            args: Prisma.TokenBlacklistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenBlacklistPayload>
          }
          deleteMany: {
            args: Prisma.TokenBlacklistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TokenBlacklistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TokenBlacklistUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenBlacklistPayload>[]
          }
          upsert: {
            args: Prisma.TokenBlacklistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenBlacklistPayload>
          }
          aggregate: {
            args: Prisma.TokenBlacklistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTokenBlacklist>
          }
          groupBy: {
            args: Prisma.TokenBlacklistGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokenBlacklistGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokenBlacklistCountArgs<ExtArgs>
            result: $Utils.Optional<TokenBlacklistCountAggregateOutputType> | number
          }
        }
      }
      AdminSubscriptionLog: {
        payload: Prisma.$AdminSubscriptionLogPayload<ExtArgs>
        fields: Prisma.AdminSubscriptionLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminSubscriptionLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminSubscriptionLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminSubscriptionLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminSubscriptionLogPayload>
          }
          findFirst: {
            args: Prisma.AdminSubscriptionLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminSubscriptionLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminSubscriptionLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminSubscriptionLogPayload>
          }
          findMany: {
            args: Prisma.AdminSubscriptionLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminSubscriptionLogPayload>[]
          }
          create: {
            args: Prisma.AdminSubscriptionLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminSubscriptionLogPayload>
          }
          createMany: {
            args: Prisma.AdminSubscriptionLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminSubscriptionLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminSubscriptionLogPayload>[]
          }
          delete: {
            args: Prisma.AdminSubscriptionLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminSubscriptionLogPayload>
          }
          update: {
            args: Prisma.AdminSubscriptionLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminSubscriptionLogPayload>
          }
          deleteMany: {
            args: Prisma.AdminSubscriptionLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminSubscriptionLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminSubscriptionLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminSubscriptionLogPayload>[]
          }
          upsert: {
            args: Prisma.AdminSubscriptionLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminSubscriptionLogPayload>
          }
          aggregate: {
            args: Prisma.AdminSubscriptionLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminSubscriptionLog>
          }
          groupBy: {
            args: Prisma.AdminSubscriptionLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminSubscriptionLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminSubscriptionLogCountArgs<ExtArgs>
            result: $Utils.Optional<AdminSubscriptionLogCountAggregateOutputType> | number
          }
        }
      }
      EmailLog: {
        payload: Prisma.$EmailLogPayload<ExtArgs>
        fields: Prisma.EmailLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          findFirst: {
            args: Prisma.EmailLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          findMany: {
            args: Prisma.EmailLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>[]
          }
          create: {
            args: Prisma.EmailLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          createMany: {
            args: Prisma.EmailLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>[]
          }
          delete: {
            args: Prisma.EmailLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          update: {
            args: Prisma.EmailLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          deleteMany: {
            args: Prisma.EmailLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>[]
          }
          upsert: {
            args: Prisma.EmailLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          aggregate: {
            args: Prisma.EmailLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailLog>
          }
          groupBy: {
            args: Prisma.EmailLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailLogCountArgs<ExtArgs>
            result: $Utils.Optional<EmailLogCountAggregateOutputType> | number
          }
        }
      }
      EmailTemplate: {
        payload: Prisma.$EmailTemplatePayload<ExtArgs>
        fields: Prisma.EmailTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          findFirst: {
            args: Prisma.EmailTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          findMany: {
            args: Prisma.EmailTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>[]
          }
          create: {
            args: Prisma.EmailTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          createMany: {
            args: Prisma.EmailTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>[]
          }
          delete: {
            args: Prisma.EmailTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          update: {
            args: Prisma.EmailTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          deleteMany: {
            args: Prisma.EmailTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>[]
          }
          upsert: {
            args: Prisma.EmailTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          aggregate: {
            args: Prisma.EmailTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailTemplate>
          }
          groupBy: {
            args: Prisma.EmailTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<EmailTemplateCountAggregateOutputType> | number
          }
        }
      }
      UserEmailPreference: {
        payload: Prisma.$UserEmailPreferencePayload<ExtArgs>
        fields: Prisma.UserEmailPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserEmailPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEmailPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserEmailPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEmailPreferencePayload>
          }
          findFirst: {
            args: Prisma.UserEmailPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEmailPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserEmailPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEmailPreferencePayload>
          }
          findMany: {
            args: Prisma.UserEmailPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEmailPreferencePayload>[]
          }
          create: {
            args: Prisma.UserEmailPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEmailPreferencePayload>
          }
          createMany: {
            args: Prisma.UserEmailPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserEmailPreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEmailPreferencePayload>[]
          }
          delete: {
            args: Prisma.UserEmailPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEmailPreferencePayload>
          }
          update: {
            args: Prisma.UserEmailPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEmailPreferencePayload>
          }
          deleteMany: {
            args: Prisma.UserEmailPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserEmailPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserEmailPreferenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEmailPreferencePayload>[]
          }
          upsert: {
            args: Prisma.UserEmailPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEmailPreferencePayload>
          }
          aggregate: {
            args: Prisma.UserEmailPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserEmailPreference>
          }
          groupBy: {
            args: Prisma.UserEmailPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserEmailPreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserEmailPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<UserEmailPreferenceCountAggregateOutputType> | number
          }
        }
      }
      EmailStats: {
        payload: Prisma.$EmailStatsPayload<ExtArgs>
        fields: Prisma.EmailStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStatsPayload>
          }
          findFirst: {
            args: Prisma.EmailStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStatsPayload>
          }
          findMany: {
            args: Prisma.EmailStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStatsPayload>[]
          }
          create: {
            args: Prisma.EmailStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStatsPayload>
          }
          createMany: {
            args: Prisma.EmailStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStatsPayload>[]
          }
          delete: {
            args: Prisma.EmailStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStatsPayload>
          }
          update: {
            args: Prisma.EmailStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStatsPayload>
          }
          deleteMany: {
            args: Prisma.EmailStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailStatsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStatsPayload>[]
          }
          upsert: {
            args: Prisma.EmailStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailStatsPayload>
          }
          aggregate: {
            args: Prisma.EmailStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailStats>
          }
          groupBy: {
            args: Prisma.EmailStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailStatsCountArgs<ExtArgs>
            result: $Utils.Optional<EmailStatsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    question?: QuestionOmit
    practiceAnswer?: PracticeAnswerOmit
    questionRating?: QuestionRatingOmit
    practiceRecord?: PracticeRecordOmit
    chatSession?: ChatSessionOmit
    chatMessage?: ChatMessageOmit
    vocabularyItem?: VocabularyItemOmit
    studyProgress?: StudyProgressOmit
    subscriptionPlan?: SubscriptionPlanOmit
    userSubscription?: UserSubscriptionOmit
    usageQuota?: UsageQuotaOmit
    paymentTransaction?: PaymentTransactionOmit
    aPIUsage?: APIUsageOmit
    tokenBlacklist?: TokenBlacklistOmit
    adminSubscriptionLog?: AdminSubscriptionLogOmit
    emailLog?: EmailLogOmit
    emailTemplate?: EmailTemplateOmit
    userEmailPreference?: UserEmailPreferenceOmit
    emailStats?: EmailStatsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    practiceRecords: number
    chatSessions: number
    vocabularyItems: number
    studyProgress: number
    usageQuotas: number
    paymentTransactions: number
    questionRatings: number
    createdQuestions: number
    adminSubscriptionLogs: number
    targetAdminLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practiceRecords?: boolean | UserCountOutputTypeCountPracticeRecordsArgs
    chatSessions?: boolean | UserCountOutputTypeCountChatSessionsArgs
    vocabularyItems?: boolean | UserCountOutputTypeCountVocabularyItemsArgs
    studyProgress?: boolean | UserCountOutputTypeCountStudyProgressArgs
    usageQuotas?: boolean | UserCountOutputTypeCountUsageQuotasArgs
    paymentTransactions?: boolean | UserCountOutputTypeCountPaymentTransactionsArgs
    questionRatings?: boolean | UserCountOutputTypeCountQuestionRatingsArgs
    createdQuestions?: boolean | UserCountOutputTypeCountCreatedQuestionsArgs
    adminSubscriptionLogs?: boolean | UserCountOutputTypeCountAdminSubscriptionLogsArgs
    targetAdminLogs?: boolean | UserCountOutputTypeCountTargetAdminLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPracticeRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVocabularyItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VocabularyItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudyProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyProgressWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUsageQuotasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageQuotaWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPaymentTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuestionRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionRatingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAdminSubscriptionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminSubscriptionLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTargetAdminLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminSubscriptionLogWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    practiceAnswers: number
    ratings: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practiceAnswers?: boolean | QuestionCountOutputTypeCountPracticeAnswersArgs
    ratings?: boolean | QuestionCountOutputTypeCountRatingsArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountPracticeAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeAnswerWhereInput
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionRatingWhereInput
  }


  /**
   * Count Type PracticeRecordCountOutputType
   */

  export type PracticeRecordCountOutputType = {
    practiceAnswers: number
  }

  export type PracticeRecordCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practiceAnswers?: boolean | PracticeRecordCountOutputTypeCountPracticeAnswersArgs
  }

  // Custom InputTypes
  /**
   * PracticeRecordCountOutputType without action
   */
  export type PracticeRecordCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeRecordCountOutputType
     */
    select?: PracticeRecordCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PracticeRecordCountOutputType without action
   */
  export type PracticeRecordCountOutputTypeCountPracticeAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeAnswerWhereInput
  }


  /**
   * Count Type ChatSessionCountOutputType
   */

  export type ChatSessionCountOutputType = {
    messages: number
  }

  export type ChatSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatSessionCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatSessionCountOutputType without action
   */
  export type ChatSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessionCountOutputType
     */
    select?: ChatSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatSessionCountOutputType without action
   */
  export type ChatSessionCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }


  /**
   * Count Type SubscriptionPlanCountOutputType
   */

  export type SubscriptionPlanCountOutputType = {
    subscriptions: number
  }

  export type SubscriptionPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | SubscriptionPlanCountOutputTypeCountSubscriptionsArgs
  }

  // Custom InputTypes
  /**
   * SubscriptionPlanCountOutputType without action
   */
  export type SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlanCountOutputType
     */
    select?: SubscriptionPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubscriptionPlanCountOutputType without action
   */
  export type SubscriptionPlanCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSubscriptionWhereInput
  }


  /**
   * Count Type UserSubscriptionCountOutputType
   */

  export type UserSubscriptionCountOutputType = {
    paymentTransactions: number
    adminSubscriptionLogs: number
  }

  export type UserSubscriptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paymentTransactions?: boolean | UserSubscriptionCountOutputTypeCountPaymentTransactionsArgs
    adminSubscriptionLogs?: boolean | UserSubscriptionCountOutputTypeCountAdminSubscriptionLogsArgs
  }

  // Custom InputTypes
  /**
   * UserSubscriptionCountOutputType without action
   */
  export type UserSubscriptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscriptionCountOutputType
     */
    select?: UserSubscriptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserSubscriptionCountOutputType without action
   */
  export type UserSubscriptionCountOutputTypeCountPaymentTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTransactionWhereInput
  }

  /**
   * UserSubscriptionCountOutputType without action
   */
  export type UserSubscriptionCountOutputTypeCountAdminSubscriptionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminSubscriptionLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    role: $Enums.UserRole | null
    googleId: string | null
    emailVerified: boolean | null
    preferredLanguage: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    role: $Enums.UserRole | null
    googleId: string | null
    emailVerified: boolean | null
    preferredLanguage: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    avatar: number
    role: number
    googleId: number
    emailVerified: number
    preferredLanguage: number
    isActive: number
    settings: number
    createdAt: number
    updatedAt: number
    lastLoginAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    role?: true
    googleId?: true
    emailVerified?: true
    preferredLanguage?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    role?: true
    googleId?: true
    emailVerified?: true
    preferredLanguage?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    role?: true
    googleId?: true
    emailVerified?: true
    preferredLanguage?: true
    isActive?: true
    settings?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string | null
    name: string | null
    avatar: string | null
    role: $Enums.UserRole
    googleId: string | null
    emailVerified: boolean
    preferredLanguage: string
    isActive: boolean
    settings: JsonValue | null
    createdAt: Date
    updatedAt: Date
    lastLoginAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    role?: boolean
    googleId?: boolean
    emailVerified?: boolean
    preferredLanguage?: boolean
    isActive?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    practiceRecords?: boolean | User$practiceRecordsArgs<ExtArgs>
    chatSessions?: boolean | User$chatSessionsArgs<ExtArgs>
    vocabularyItems?: boolean | User$vocabularyItemsArgs<ExtArgs>
    studyProgress?: boolean | User$studyProgressArgs<ExtArgs>
    subscription?: boolean | User$subscriptionArgs<ExtArgs>
    usageQuotas?: boolean | User$usageQuotasArgs<ExtArgs>
    paymentTransactions?: boolean | User$paymentTransactionsArgs<ExtArgs>
    questionRatings?: boolean | User$questionRatingsArgs<ExtArgs>
    createdQuestions?: boolean | User$createdQuestionsArgs<ExtArgs>
    adminSubscriptionLogs?: boolean | User$adminSubscriptionLogsArgs<ExtArgs>
    targetAdminLogs?: boolean | User$targetAdminLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    role?: boolean
    googleId?: boolean
    emailVerified?: boolean
    preferredLanguage?: boolean
    isActive?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    role?: boolean
    googleId?: boolean
    emailVerified?: boolean
    preferredLanguage?: boolean
    isActive?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    role?: boolean
    googleId?: boolean
    emailVerified?: boolean
    preferredLanguage?: boolean
    isActive?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "avatar" | "role" | "googleId" | "emailVerified" | "preferredLanguage" | "isActive" | "settings" | "createdAt" | "updatedAt" | "lastLoginAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practiceRecords?: boolean | User$practiceRecordsArgs<ExtArgs>
    chatSessions?: boolean | User$chatSessionsArgs<ExtArgs>
    vocabularyItems?: boolean | User$vocabularyItemsArgs<ExtArgs>
    studyProgress?: boolean | User$studyProgressArgs<ExtArgs>
    subscription?: boolean | User$subscriptionArgs<ExtArgs>
    usageQuotas?: boolean | User$usageQuotasArgs<ExtArgs>
    paymentTransactions?: boolean | User$paymentTransactionsArgs<ExtArgs>
    questionRatings?: boolean | User$questionRatingsArgs<ExtArgs>
    createdQuestions?: boolean | User$createdQuestionsArgs<ExtArgs>
    adminSubscriptionLogs?: boolean | User$adminSubscriptionLogsArgs<ExtArgs>
    targetAdminLogs?: boolean | User$targetAdminLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      practiceRecords: Prisma.$PracticeRecordPayload<ExtArgs>[]
      chatSessions: Prisma.$ChatSessionPayload<ExtArgs>[]
      vocabularyItems: Prisma.$VocabularyItemPayload<ExtArgs>[]
      studyProgress: Prisma.$StudyProgressPayload<ExtArgs>[]
      subscription: Prisma.$UserSubscriptionPayload<ExtArgs> | null
      usageQuotas: Prisma.$UsageQuotaPayload<ExtArgs>[]
      paymentTransactions: Prisma.$PaymentTransactionPayload<ExtArgs>[]
      questionRatings: Prisma.$QuestionRatingPayload<ExtArgs>[]
      createdQuestions: Prisma.$QuestionPayload<ExtArgs>[]
      adminSubscriptionLogs: Prisma.$AdminSubscriptionLogPayload<ExtArgs>[]
      targetAdminLogs: Prisma.$AdminSubscriptionLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string | null
      name: string | null
      avatar: string | null
      role: $Enums.UserRole
      googleId: string | null
      emailVerified: boolean
      preferredLanguage: string
      isActive: boolean
      settings: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      lastLoginAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    practiceRecords<T extends User$practiceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$practiceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chatSessions<T extends User$chatSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$chatSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vocabularyItems<T extends User$vocabularyItemsArgs<ExtArgs> = {}>(args?: Subset<T, User$vocabularyItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VocabularyItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studyProgress<T extends User$studyProgressArgs<ExtArgs> = {}>(args?: Subset<T, User$studyProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subscription<T extends User$subscriptionArgs<ExtArgs> = {}>(args?: Subset<T, User$subscriptionArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    usageQuotas<T extends User$usageQuotasArgs<ExtArgs> = {}>(args?: Subset<T, User$usageQuotasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageQuotaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    paymentTransactions<T extends User$paymentTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$paymentTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionRatings<T extends User$questionRatingsArgs<ExtArgs> = {}>(args?: Subset<T, User$questionRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionRatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdQuestions<T extends User$createdQuestionsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdQuestionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    adminSubscriptionLogs<T extends User$adminSubscriptionLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$adminSubscriptionLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminSubscriptionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    targetAdminLogs<T extends User$targetAdminLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$targetAdminLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminSubscriptionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly googleId: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly preferredLanguage: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly settings: FieldRef<"User", 'Json'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.practiceRecords
   */
  export type User$practiceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeRecord
     */
    select?: PracticeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeRecord
     */
    omit?: PracticeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeRecordInclude<ExtArgs> | null
    where?: PracticeRecordWhereInput
    orderBy?: PracticeRecordOrderByWithRelationInput | PracticeRecordOrderByWithRelationInput[]
    cursor?: PracticeRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PracticeRecordScalarFieldEnum | PracticeRecordScalarFieldEnum[]
  }

  /**
   * User.chatSessions
   */
  export type User$chatSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    where?: ChatSessionWhereInput
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    cursor?: ChatSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * User.vocabularyItems
   */
  export type User$vocabularyItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VocabularyItem
     */
    select?: VocabularyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VocabularyItem
     */
    omit?: VocabularyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VocabularyItemInclude<ExtArgs> | null
    where?: VocabularyItemWhereInput
    orderBy?: VocabularyItemOrderByWithRelationInput | VocabularyItemOrderByWithRelationInput[]
    cursor?: VocabularyItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VocabularyItemScalarFieldEnum | VocabularyItemScalarFieldEnum[]
  }

  /**
   * User.studyProgress
   */
  export type User$studyProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyProgress
     */
    select?: StudyProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyProgress
     */
    omit?: StudyProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyProgressInclude<ExtArgs> | null
    where?: StudyProgressWhereInput
    orderBy?: StudyProgressOrderByWithRelationInput | StudyProgressOrderByWithRelationInput[]
    cursor?: StudyProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyProgressScalarFieldEnum | StudyProgressScalarFieldEnum[]
  }

  /**
   * User.subscription
   */
  export type User$subscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    where?: UserSubscriptionWhereInput
  }

  /**
   * User.usageQuotas
   */
  export type User$usageQuotasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageQuota
     */
    select?: UsageQuotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageQuota
     */
    omit?: UsageQuotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageQuotaInclude<ExtArgs> | null
    where?: UsageQuotaWhereInput
    orderBy?: UsageQuotaOrderByWithRelationInput | UsageQuotaOrderByWithRelationInput[]
    cursor?: UsageQuotaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsageQuotaScalarFieldEnum | UsageQuotaScalarFieldEnum[]
  }

  /**
   * User.paymentTransactions
   */
  export type User$paymentTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    where?: PaymentTransactionWhereInput
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    cursor?: PaymentTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * User.questionRatings
   */
  export type User$questionRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionRating
     */
    select?: QuestionRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionRating
     */
    omit?: QuestionRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionRatingInclude<ExtArgs> | null
    where?: QuestionRatingWhereInput
    orderBy?: QuestionRatingOrderByWithRelationInput | QuestionRatingOrderByWithRelationInput[]
    cursor?: QuestionRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionRatingScalarFieldEnum | QuestionRatingScalarFieldEnum[]
  }

  /**
   * User.createdQuestions
   */
  export type User$createdQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * User.adminSubscriptionLogs
   */
  export type User$adminSubscriptionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogInclude<ExtArgs> | null
    where?: AdminSubscriptionLogWhereInput
    orderBy?: AdminSubscriptionLogOrderByWithRelationInput | AdminSubscriptionLogOrderByWithRelationInput[]
    cursor?: AdminSubscriptionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminSubscriptionLogScalarFieldEnum | AdminSubscriptionLogScalarFieldEnum[]
  }

  /**
   * User.targetAdminLogs
   */
  export type User$targetAdminLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogInclude<ExtArgs> | null
    where?: AdminSubscriptionLogWhereInput
    orderBy?: AdminSubscriptionLogOrderByWithRelationInput | AdminSubscriptionLogOrderByWithRelationInput[]
    cursor?: AdminSubscriptionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminSubscriptionLogScalarFieldEnum | AdminSubscriptionLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    qualityScore: number | null
    difficultyScore: number | null
    averageTime: number | null
    successRate: number | null
    usageCount: number | null
    ratingCount: number | null
  }

  export type QuestionSumAggregateOutputType = {
    qualityScore: number | null
    difficultyScore: number | null
    averageTime: number | null
    successRate: number | null
    usageCount: number | null
    ratingCount: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: string | null
    type: $Enums.QuestionType | null
    difficulty: $Enums.DifficultyLevel | null
    source: $Enums.QuestionSource | null
    status: $Enums.QuestionStatus | null
    correctAnswer: string | null
    explanation: string | null
    audioUrl: string | null
    audioScript: string | null
    qualityScore: number | null
    difficultyScore: number | null
    averageTime: number | null
    successRate: number | null
    usageCount: number | null
    ratingCount: number | null
    lastUsedAt: Date | null
    createdBy: string | null
    reviewedBy: string | null
    reviewedAt: Date | null
    reviewNotes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: string | null
    type: $Enums.QuestionType | null
    difficulty: $Enums.DifficultyLevel | null
    source: $Enums.QuestionSource | null
    status: $Enums.QuestionStatus | null
    correctAnswer: string | null
    explanation: string | null
    audioUrl: string | null
    audioScript: string | null
    qualityScore: number | null
    difficultyScore: number | null
    averageTime: number | null
    successRate: number | null
    usageCount: number | null
    ratingCount: number | null
    lastUsedAt: Date | null
    createdBy: string | null
    reviewedBy: string | null
    reviewedAt: Date | null
    reviewNotes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    type: number
    difficulty: number
    source: number
    status: number
    content: number
    correctAnswer: number
    explanation: number
    audioUrl: number
    audioScript: number
    qualityScore: number
    difficultyScore: number
    averageTime: number
    successRate: number
    usageCount: number
    ratingCount: number
    lastUsedAt: number
    createdBy: number
    aiGeneratedData: number
    reviewedBy: number
    reviewedAt: number
    reviewNotes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    qualityScore?: true
    difficultyScore?: true
    averageTime?: true
    successRate?: true
    usageCount?: true
    ratingCount?: true
  }

  export type QuestionSumAggregateInputType = {
    qualityScore?: true
    difficultyScore?: true
    averageTime?: true
    successRate?: true
    usageCount?: true
    ratingCount?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    type?: true
    difficulty?: true
    source?: true
    status?: true
    correctAnswer?: true
    explanation?: true
    audioUrl?: true
    audioScript?: true
    qualityScore?: true
    difficultyScore?: true
    averageTime?: true
    successRate?: true
    usageCount?: true
    ratingCount?: true
    lastUsedAt?: true
    createdBy?: true
    reviewedBy?: true
    reviewedAt?: true
    reviewNotes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    type?: true
    difficulty?: true
    source?: true
    status?: true
    correctAnswer?: true
    explanation?: true
    audioUrl?: true
    audioScript?: true
    qualityScore?: true
    difficultyScore?: true
    averageTime?: true
    successRate?: true
    usageCount?: true
    ratingCount?: true
    lastUsedAt?: true
    createdBy?: true
    reviewedBy?: true
    reviewedAt?: true
    reviewNotes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    type?: true
    difficulty?: true
    source?: true
    status?: true
    content?: true
    correctAnswer?: true
    explanation?: true
    audioUrl?: true
    audioScript?: true
    qualityScore?: true
    difficultyScore?: true
    averageTime?: true
    successRate?: true
    usageCount?: true
    ratingCount?: true
    lastUsedAt?: true
    createdBy?: true
    aiGeneratedData?: true
    reviewedBy?: true
    reviewedAt?: true
    reviewNotes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: string
    type: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    source: $Enums.QuestionSource
    status: $Enums.QuestionStatus
    content: JsonValue
    correctAnswer: string
    explanation: string | null
    audioUrl: string | null
    audioScript: string | null
    qualityScore: number
    difficultyScore: number | null
    averageTime: number | null
    successRate: number | null
    usageCount: number
    ratingCount: number
    lastUsedAt: Date | null
    createdBy: string | null
    aiGeneratedData: JsonValue | null
    reviewedBy: string | null
    reviewedAt: Date | null
    reviewNotes: string | null
    createdAt: Date
    updatedAt: Date
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    difficulty?: boolean
    source?: boolean
    status?: boolean
    content?: boolean
    correctAnswer?: boolean
    explanation?: boolean
    audioUrl?: boolean
    audioScript?: boolean
    qualityScore?: boolean
    difficultyScore?: boolean
    averageTime?: boolean
    successRate?: boolean
    usageCount?: boolean
    ratingCount?: boolean
    lastUsedAt?: boolean
    createdBy?: boolean
    aiGeneratedData?: boolean
    reviewedBy?: boolean
    reviewedAt?: boolean
    reviewNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | Question$creatorArgs<ExtArgs>
    practiceAnswers?: boolean | Question$practiceAnswersArgs<ExtArgs>
    ratings?: boolean | Question$ratingsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    difficulty?: boolean
    source?: boolean
    status?: boolean
    content?: boolean
    correctAnswer?: boolean
    explanation?: boolean
    audioUrl?: boolean
    audioScript?: boolean
    qualityScore?: boolean
    difficultyScore?: boolean
    averageTime?: boolean
    successRate?: boolean
    usageCount?: boolean
    ratingCount?: boolean
    lastUsedAt?: boolean
    createdBy?: boolean
    aiGeneratedData?: boolean
    reviewedBy?: boolean
    reviewedAt?: boolean
    reviewNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | Question$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    difficulty?: boolean
    source?: boolean
    status?: boolean
    content?: boolean
    correctAnswer?: boolean
    explanation?: boolean
    audioUrl?: boolean
    audioScript?: boolean
    qualityScore?: boolean
    difficultyScore?: boolean
    averageTime?: boolean
    successRate?: boolean
    usageCount?: boolean
    ratingCount?: boolean
    lastUsedAt?: boolean
    createdBy?: boolean
    aiGeneratedData?: boolean
    reviewedBy?: boolean
    reviewedAt?: boolean
    reviewNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | Question$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    type?: boolean
    difficulty?: boolean
    source?: boolean
    status?: boolean
    content?: boolean
    correctAnswer?: boolean
    explanation?: boolean
    audioUrl?: boolean
    audioScript?: boolean
    qualityScore?: boolean
    difficultyScore?: boolean
    averageTime?: boolean
    successRate?: boolean
    usageCount?: boolean
    ratingCount?: boolean
    lastUsedAt?: boolean
    createdBy?: boolean
    aiGeneratedData?: boolean
    reviewedBy?: boolean
    reviewedAt?: boolean
    reviewNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "difficulty" | "source" | "status" | "content" | "correctAnswer" | "explanation" | "audioUrl" | "audioScript" | "qualityScore" | "difficultyScore" | "averageTime" | "successRate" | "usageCount" | "ratingCount" | "lastUsedAt" | "createdBy" | "aiGeneratedData" | "reviewedBy" | "reviewedAt" | "reviewNotes" | "createdAt" | "updatedAt", ExtArgs["result"]["question"]>
  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | Question$creatorArgs<ExtArgs>
    practiceAnswers?: boolean | Question$practiceAnswersArgs<ExtArgs>
    ratings?: boolean | Question$ratingsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | Question$creatorArgs<ExtArgs>
  }
  export type QuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | Question$creatorArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs> | null
      practiceAnswers: Prisma.$PracticeAnswerPayload<ExtArgs>[]
      ratings: Prisma.$QuestionRatingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.QuestionType
      difficulty: $Enums.DifficultyLevel
      source: $Enums.QuestionSource
      status: $Enums.QuestionStatus
      content: Prisma.JsonValue
      correctAnswer: string
      explanation: string | null
      audioUrl: string | null
      audioScript: string | null
      qualityScore: number
      difficultyScore: number | null
      averageTime: number | null
      successRate: number | null
      usageCount: number
      ratingCount: number
      lastUsedAt: Date | null
      createdBy: string | null
      aiGeneratedData: Prisma.JsonValue | null
      reviewedBy: string | null
      reviewedAt: Date | null
      reviewNotes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions and returns the data updated in the database.
     * @param {QuestionUpdateManyAndReturnArgs} args - Arguments to update many Questions.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends Question$creatorArgs<ExtArgs> = {}>(args?: Subset<T, Question$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    practiceAnswers<T extends Question$practiceAnswersArgs<ExtArgs> = {}>(args?: Subset<T, Question$practiceAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ratings<T extends Question$ratingsArgs<ExtArgs> = {}>(args?: Subset<T, Question$ratingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionRatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'String'>
    readonly type: FieldRef<"Question", 'QuestionType'>
    readonly difficulty: FieldRef<"Question", 'DifficultyLevel'>
    readonly source: FieldRef<"Question", 'QuestionSource'>
    readonly status: FieldRef<"Question", 'QuestionStatus'>
    readonly content: FieldRef<"Question", 'Json'>
    readonly correctAnswer: FieldRef<"Question", 'String'>
    readonly explanation: FieldRef<"Question", 'String'>
    readonly audioUrl: FieldRef<"Question", 'String'>
    readonly audioScript: FieldRef<"Question", 'String'>
    readonly qualityScore: FieldRef<"Question", 'Float'>
    readonly difficultyScore: FieldRef<"Question", 'Float'>
    readonly averageTime: FieldRef<"Question", 'Int'>
    readonly successRate: FieldRef<"Question", 'Float'>
    readonly usageCount: FieldRef<"Question", 'Int'>
    readonly ratingCount: FieldRef<"Question", 'Int'>
    readonly lastUsedAt: FieldRef<"Question", 'DateTime'>
    readonly createdBy: FieldRef<"Question", 'String'>
    readonly aiGeneratedData: FieldRef<"Question", 'Json'>
    readonly reviewedBy: FieldRef<"Question", 'String'>
    readonly reviewedAt: FieldRef<"Question", 'DateTime'>
    readonly reviewNotes: FieldRef<"Question", 'String'>
    readonly createdAt: FieldRef<"Question", 'DateTime'>
    readonly updatedAt: FieldRef<"Question", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
  }

  /**
   * Question updateManyAndReturn
   */
  export type QuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to delete.
     */
    limit?: number
  }

  /**
   * Question.creator
   */
  export type Question$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Question.practiceAnswers
   */
  export type Question$practiceAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeAnswer
     */
    select?: PracticeAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeAnswer
     */
    omit?: PracticeAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeAnswerInclude<ExtArgs> | null
    where?: PracticeAnswerWhereInput
    orderBy?: PracticeAnswerOrderByWithRelationInput | PracticeAnswerOrderByWithRelationInput[]
    cursor?: PracticeAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PracticeAnswerScalarFieldEnum | PracticeAnswerScalarFieldEnum[]
  }

  /**
   * Question.ratings
   */
  export type Question$ratingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionRating
     */
    select?: QuestionRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionRating
     */
    omit?: QuestionRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionRatingInclude<ExtArgs> | null
    where?: QuestionRatingWhereInput
    orderBy?: QuestionRatingOrderByWithRelationInput | QuestionRatingOrderByWithRelationInput[]
    cursor?: QuestionRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionRatingScalarFieldEnum | QuestionRatingScalarFieldEnum[]
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model PracticeAnswer
   */

  export type AggregatePracticeAnswer = {
    _count: PracticeAnswerCountAggregateOutputType | null
    _avg: PracticeAnswerAvgAggregateOutputType | null
    _sum: PracticeAnswerSumAggregateOutputType | null
    _min: PracticeAnswerMinAggregateOutputType | null
    _max: PracticeAnswerMaxAggregateOutputType | null
  }

  export type PracticeAnswerAvgAggregateOutputType = {
    timeSpent: number | null
  }

  export type PracticeAnswerSumAggregateOutputType = {
    timeSpent: number | null
  }

  export type PracticeAnswerMinAggregateOutputType = {
    id: string | null
    userId: string | null
    questionId: string | null
    userAnswer: string | null
    isCorrect: boolean | null
    timeSpent: number | null
    practiceRecordId: string | null
    createdAt: Date | null
  }

  export type PracticeAnswerMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    questionId: string | null
    userAnswer: string | null
    isCorrect: boolean | null
    timeSpent: number | null
    practiceRecordId: string | null
    createdAt: Date | null
  }

  export type PracticeAnswerCountAggregateOutputType = {
    id: number
    userId: number
    questionId: number
    userAnswer: number
    isCorrect: number
    timeSpent: number
    practiceRecordId: number
    createdAt: number
    _all: number
  }


  export type PracticeAnswerAvgAggregateInputType = {
    timeSpent?: true
  }

  export type PracticeAnswerSumAggregateInputType = {
    timeSpent?: true
  }

  export type PracticeAnswerMinAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    userAnswer?: true
    isCorrect?: true
    timeSpent?: true
    practiceRecordId?: true
    createdAt?: true
  }

  export type PracticeAnswerMaxAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    userAnswer?: true
    isCorrect?: true
    timeSpent?: true
    practiceRecordId?: true
    createdAt?: true
  }

  export type PracticeAnswerCountAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    userAnswer?: true
    isCorrect?: true
    timeSpent?: true
    practiceRecordId?: true
    createdAt?: true
    _all?: true
  }

  export type PracticeAnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PracticeAnswer to aggregate.
     */
    where?: PracticeAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeAnswers to fetch.
     */
    orderBy?: PracticeAnswerOrderByWithRelationInput | PracticeAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PracticeAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PracticeAnswers
    **/
    _count?: true | PracticeAnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PracticeAnswerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PracticeAnswerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PracticeAnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PracticeAnswerMaxAggregateInputType
  }

  export type GetPracticeAnswerAggregateType<T extends PracticeAnswerAggregateArgs> = {
        [P in keyof T & keyof AggregatePracticeAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePracticeAnswer[P]>
      : GetScalarType<T[P], AggregatePracticeAnswer[P]>
  }




  export type PracticeAnswerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeAnswerWhereInput
    orderBy?: PracticeAnswerOrderByWithAggregationInput | PracticeAnswerOrderByWithAggregationInput[]
    by: PracticeAnswerScalarFieldEnum[] | PracticeAnswerScalarFieldEnum
    having?: PracticeAnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PracticeAnswerCountAggregateInputType | true
    _avg?: PracticeAnswerAvgAggregateInputType
    _sum?: PracticeAnswerSumAggregateInputType
    _min?: PracticeAnswerMinAggregateInputType
    _max?: PracticeAnswerMaxAggregateInputType
  }

  export type PracticeAnswerGroupByOutputType = {
    id: string
    userId: string
    questionId: string
    userAnswer: string
    isCorrect: boolean
    timeSpent: number
    practiceRecordId: string
    createdAt: Date
    _count: PracticeAnswerCountAggregateOutputType | null
    _avg: PracticeAnswerAvgAggregateOutputType | null
    _sum: PracticeAnswerSumAggregateOutputType | null
    _min: PracticeAnswerMinAggregateOutputType | null
    _max: PracticeAnswerMaxAggregateOutputType | null
  }

  type GetPracticeAnswerGroupByPayload<T extends PracticeAnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PracticeAnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PracticeAnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PracticeAnswerGroupByOutputType[P]>
            : GetScalarType<T[P], PracticeAnswerGroupByOutputType[P]>
        }
      >
    >


  export type PracticeAnswerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionId?: boolean
    userAnswer?: boolean
    isCorrect?: boolean
    timeSpent?: boolean
    practiceRecordId?: boolean
    createdAt?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    practiceRecord?: boolean | PracticeRecordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceAnswer"]>

  export type PracticeAnswerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionId?: boolean
    userAnswer?: boolean
    isCorrect?: boolean
    timeSpent?: boolean
    practiceRecordId?: boolean
    createdAt?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    practiceRecord?: boolean | PracticeRecordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceAnswer"]>

  export type PracticeAnswerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionId?: boolean
    userAnswer?: boolean
    isCorrect?: boolean
    timeSpent?: boolean
    practiceRecordId?: boolean
    createdAt?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    practiceRecord?: boolean | PracticeRecordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceAnswer"]>

  export type PracticeAnswerSelectScalar = {
    id?: boolean
    userId?: boolean
    questionId?: boolean
    userAnswer?: boolean
    isCorrect?: boolean
    timeSpent?: boolean
    practiceRecordId?: boolean
    createdAt?: boolean
  }

  export type PracticeAnswerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "questionId" | "userAnswer" | "isCorrect" | "timeSpent" | "practiceRecordId" | "createdAt", ExtArgs["result"]["practiceAnswer"]>
  export type PracticeAnswerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    practiceRecord?: boolean | PracticeRecordDefaultArgs<ExtArgs>
  }
  export type PracticeAnswerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    practiceRecord?: boolean | PracticeRecordDefaultArgs<ExtArgs>
  }
  export type PracticeAnswerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    practiceRecord?: boolean | PracticeRecordDefaultArgs<ExtArgs>
  }

  export type $PracticeAnswerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PracticeAnswer"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
      practiceRecord: Prisma.$PracticeRecordPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      questionId: string
      userAnswer: string
      isCorrect: boolean
      timeSpent: number
      practiceRecordId: string
      createdAt: Date
    }, ExtArgs["result"]["practiceAnswer"]>
    composites: {}
  }

  type PracticeAnswerGetPayload<S extends boolean | null | undefined | PracticeAnswerDefaultArgs> = $Result.GetResult<Prisma.$PracticeAnswerPayload, S>

  type PracticeAnswerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PracticeAnswerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PracticeAnswerCountAggregateInputType | true
    }

  export interface PracticeAnswerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PracticeAnswer'], meta: { name: 'PracticeAnswer' } }
    /**
     * Find zero or one PracticeAnswer that matches the filter.
     * @param {PracticeAnswerFindUniqueArgs} args - Arguments to find a PracticeAnswer
     * @example
     * // Get one PracticeAnswer
     * const practiceAnswer = await prisma.practiceAnswer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PracticeAnswerFindUniqueArgs>(args: SelectSubset<T, PracticeAnswerFindUniqueArgs<ExtArgs>>): Prisma__PracticeAnswerClient<$Result.GetResult<Prisma.$PracticeAnswerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PracticeAnswer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PracticeAnswerFindUniqueOrThrowArgs} args - Arguments to find a PracticeAnswer
     * @example
     * // Get one PracticeAnswer
     * const practiceAnswer = await prisma.practiceAnswer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PracticeAnswerFindUniqueOrThrowArgs>(args: SelectSubset<T, PracticeAnswerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PracticeAnswerClient<$Result.GetResult<Prisma.$PracticeAnswerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PracticeAnswer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeAnswerFindFirstArgs} args - Arguments to find a PracticeAnswer
     * @example
     * // Get one PracticeAnswer
     * const practiceAnswer = await prisma.practiceAnswer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PracticeAnswerFindFirstArgs>(args?: SelectSubset<T, PracticeAnswerFindFirstArgs<ExtArgs>>): Prisma__PracticeAnswerClient<$Result.GetResult<Prisma.$PracticeAnswerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PracticeAnswer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeAnswerFindFirstOrThrowArgs} args - Arguments to find a PracticeAnswer
     * @example
     * // Get one PracticeAnswer
     * const practiceAnswer = await prisma.practiceAnswer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PracticeAnswerFindFirstOrThrowArgs>(args?: SelectSubset<T, PracticeAnswerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PracticeAnswerClient<$Result.GetResult<Prisma.$PracticeAnswerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PracticeAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeAnswerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PracticeAnswers
     * const practiceAnswers = await prisma.practiceAnswer.findMany()
     * 
     * // Get first 10 PracticeAnswers
     * const practiceAnswers = await prisma.practiceAnswer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const practiceAnswerWithIdOnly = await prisma.practiceAnswer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PracticeAnswerFindManyArgs>(args?: SelectSubset<T, PracticeAnswerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PracticeAnswer.
     * @param {PracticeAnswerCreateArgs} args - Arguments to create a PracticeAnswer.
     * @example
     * // Create one PracticeAnswer
     * const PracticeAnswer = await prisma.practiceAnswer.create({
     *   data: {
     *     // ... data to create a PracticeAnswer
     *   }
     * })
     * 
     */
    create<T extends PracticeAnswerCreateArgs>(args: SelectSubset<T, PracticeAnswerCreateArgs<ExtArgs>>): Prisma__PracticeAnswerClient<$Result.GetResult<Prisma.$PracticeAnswerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PracticeAnswers.
     * @param {PracticeAnswerCreateManyArgs} args - Arguments to create many PracticeAnswers.
     * @example
     * // Create many PracticeAnswers
     * const practiceAnswer = await prisma.practiceAnswer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PracticeAnswerCreateManyArgs>(args?: SelectSubset<T, PracticeAnswerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PracticeAnswers and returns the data saved in the database.
     * @param {PracticeAnswerCreateManyAndReturnArgs} args - Arguments to create many PracticeAnswers.
     * @example
     * // Create many PracticeAnswers
     * const practiceAnswer = await prisma.practiceAnswer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PracticeAnswers and only return the `id`
     * const practiceAnswerWithIdOnly = await prisma.practiceAnswer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PracticeAnswerCreateManyAndReturnArgs>(args?: SelectSubset<T, PracticeAnswerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeAnswerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PracticeAnswer.
     * @param {PracticeAnswerDeleteArgs} args - Arguments to delete one PracticeAnswer.
     * @example
     * // Delete one PracticeAnswer
     * const PracticeAnswer = await prisma.practiceAnswer.delete({
     *   where: {
     *     // ... filter to delete one PracticeAnswer
     *   }
     * })
     * 
     */
    delete<T extends PracticeAnswerDeleteArgs>(args: SelectSubset<T, PracticeAnswerDeleteArgs<ExtArgs>>): Prisma__PracticeAnswerClient<$Result.GetResult<Prisma.$PracticeAnswerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PracticeAnswer.
     * @param {PracticeAnswerUpdateArgs} args - Arguments to update one PracticeAnswer.
     * @example
     * // Update one PracticeAnswer
     * const practiceAnswer = await prisma.practiceAnswer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PracticeAnswerUpdateArgs>(args: SelectSubset<T, PracticeAnswerUpdateArgs<ExtArgs>>): Prisma__PracticeAnswerClient<$Result.GetResult<Prisma.$PracticeAnswerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PracticeAnswers.
     * @param {PracticeAnswerDeleteManyArgs} args - Arguments to filter PracticeAnswers to delete.
     * @example
     * // Delete a few PracticeAnswers
     * const { count } = await prisma.practiceAnswer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PracticeAnswerDeleteManyArgs>(args?: SelectSubset<T, PracticeAnswerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PracticeAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeAnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PracticeAnswers
     * const practiceAnswer = await prisma.practiceAnswer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PracticeAnswerUpdateManyArgs>(args: SelectSubset<T, PracticeAnswerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PracticeAnswers and returns the data updated in the database.
     * @param {PracticeAnswerUpdateManyAndReturnArgs} args - Arguments to update many PracticeAnswers.
     * @example
     * // Update many PracticeAnswers
     * const practiceAnswer = await prisma.practiceAnswer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PracticeAnswers and only return the `id`
     * const practiceAnswerWithIdOnly = await prisma.practiceAnswer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PracticeAnswerUpdateManyAndReturnArgs>(args: SelectSubset<T, PracticeAnswerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeAnswerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PracticeAnswer.
     * @param {PracticeAnswerUpsertArgs} args - Arguments to update or create a PracticeAnswer.
     * @example
     * // Update or create a PracticeAnswer
     * const practiceAnswer = await prisma.practiceAnswer.upsert({
     *   create: {
     *     // ... data to create a PracticeAnswer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PracticeAnswer we want to update
     *   }
     * })
     */
    upsert<T extends PracticeAnswerUpsertArgs>(args: SelectSubset<T, PracticeAnswerUpsertArgs<ExtArgs>>): Prisma__PracticeAnswerClient<$Result.GetResult<Prisma.$PracticeAnswerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PracticeAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeAnswerCountArgs} args - Arguments to filter PracticeAnswers to count.
     * @example
     * // Count the number of PracticeAnswers
     * const count = await prisma.practiceAnswer.count({
     *   where: {
     *     // ... the filter for the PracticeAnswers we want to count
     *   }
     * })
    **/
    count<T extends PracticeAnswerCountArgs>(
      args?: Subset<T, PracticeAnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PracticeAnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PracticeAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeAnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PracticeAnswerAggregateArgs>(args: Subset<T, PracticeAnswerAggregateArgs>): Prisma.PrismaPromise<GetPracticeAnswerAggregateType<T>>

    /**
     * Group by PracticeAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeAnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PracticeAnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PracticeAnswerGroupByArgs['orderBy'] }
        : { orderBy?: PracticeAnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PracticeAnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPracticeAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PracticeAnswer model
   */
  readonly fields: PracticeAnswerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PracticeAnswer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PracticeAnswerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    practiceRecord<T extends PracticeRecordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PracticeRecordDefaultArgs<ExtArgs>>): Prisma__PracticeRecordClient<$Result.GetResult<Prisma.$PracticeRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PracticeAnswer model
   */
  interface PracticeAnswerFieldRefs {
    readonly id: FieldRef<"PracticeAnswer", 'String'>
    readonly userId: FieldRef<"PracticeAnswer", 'String'>
    readonly questionId: FieldRef<"PracticeAnswer", 'String'>
    readonly userAnswer: FieldRef<"PracticeAnswer", 'String'>
    readonly isCorrect: FieldRef<"PracticeAnswer", 'Boolean'>
    readonly timeSpent: FieldRef<"PracticeAnswer", 'Int'>
    readonly practiceRecordId: FieldRef<"PracticeAnswer", 'String'>
    readonly createdAt: FieldRef<"PracticeAnswer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PracticeAnswer findUnique
   */
  export type PracticeAnswerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeAnswer
     */
    select?: PracticeAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeAnswer
     */
    omit?: PracticeAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeAnswerInclude<ExtArgs> | null
    /**
     * Filter, which PracticeAnswer to fetch.
     */
    where: PracticeAnswerWhereUniqueInput
  }

  /**
   * PracticeAnswer findUniqueOrThrow
   */
  export type PracticeAnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeAnswer
     */
    select?: PracticeAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeAnswer
     */
    omit?: PracticeAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeAnswerInclude<ExtArgs> | null
    /**
     * Filter, which PracticeAnswer to fetch.
     */
    where: PracticeAnswerWhereUniqueInput
  }

  /**
   * PracticeAnswer findFirst
   */
  export type PracticeAnswerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeAnswer
     */
    select?: PracticeAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeAnswer
     */
    omit?: PracticeAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeAnswerInclude<ExtArgs> | null
    /**
     * Filter, which PracticeAnswer to fetch.
     */
    where?: PracticeAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeAnswers to fetch.
     */
    orderBy?: PracticeAnswerOrderByWithRelationInput | PracticeAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PracticeAnswers.
     */
    cursor?: PracticeAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PracticeAnswers.
     */
    distinct?: PracticeAnswerScalarFieldEnum | PracticeAnswerScalarFieldEnum[]
  }

  /**
   * PracticeAnswer findFirstOrThrow
   */
  export type PracticeAnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeAnswer
     */
    select?: PracticeAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeAnswer
     */
    omit?: PracticeAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeAnswerInclude<ExtArgs> | null
    /**
     * Filter, which PracticeAnswer to fetch.
     */
    where?: PracticeAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeAnswers to fetch.
     */
    orderBy?: PracticeAnswerOrderByWithRelationInput | PracticeAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PracticeAnswers.
     */
    cursor?: PracticeAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PracticeAnswers.
     */
    distinct?: PracticeAnswerScalarFieldEnum | PracticeAnswerScalarFieldEnum[]
  }

  /**
   * PracticeAnswer findMany
   */
  export type PracticeAnswerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeAnswer
     */
    select?: PracticeAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeAnswer
     */
    omit?: PracticeAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeAnswerInclude<ExtArgs> | null
    /**
     * Filter, which PracticeAnswers to fetch.
     */
    where?: PracticeAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeAnswers to fetch.
     */
    orderBy?: PracticeAnswerOrderByWithRelationInput | PracticeAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PracticeAnswers.
     */
    cursor?: PracticeAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeAnswers.
     */
    skip?: number
    distinct?: PracticeAnswerScalarFieldEnum | PracticeAnswerScalarFieldEnum[]
  }

  /**
   * PracticeAnswer create
   */
  export type PracticeAnswerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeAnswer
     */
    select?: PracticeAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeAnswer
     */
    omit?: PracticeAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeAnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a PracticeAnswer.
     */
    data: XOR<PracticeAnswerCreateInput, PracticeAnswerUncheckedCreateInput>
  }

  /**
   * PracticeAnswer createMany
   */
  export type PracticeAnswerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PracticeAnswers.
     */
    data: PracticeAnswerCreateManyInput | PracticeAnswerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PracticeAnswer createManyAndReturn
   */
  export type PracticeAnswerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeAnswer
     */
    select?: PracticeAnswerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeAnswer
     */
    omit?: PracticeAnswerOmit<ExtArgs> | null
    /**
     * The data used to create many PracticeAnswers.
     */
    data: PracticeAnswerCreateManyInput | PracticeAnswerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeAnswerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PracticeAnswer update
   */
  export type PracticeAnswerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeAnswer
     */
    select?: PracticeAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeAnswer
     */
    omit?: PracticeAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeAnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a PracticeAnswer.
     */
    data: XOR<PracticeAnswerUpdateInput, PracticeAnswerUncheckedUpdateInput>
    /**
     * Choose, which PracticeAnswer to update.
     */
    where: PracticeAnswerWhereUniqueInput
  }

  /**
   * PracticeAnswer updateMany
   */
  export type PracticeAnswerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PracticeAnswers.
     */
    data: XOR<PracticeAnswerUpdateManyMutationInput, PracticeAnswerUncheckedUpdateManyInput>
    /**
     * Filter which PracticeAnswers to update
     */
    where?: PracticeAnswerWhereInput
    /**
     * Limit how many PracticeAnswers to update.
     */
    limit?: number
  }

  /**
   * PracticeAnswer updateManyAndReturn
   */
  export type PracticeAnswerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeAnswer
     */
    select?: PracticeAnswerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeAnswer
     */
    omit?: PracticeAnswerOmit<ExtArgs> | null
    /**
     * The data used to update PracticeAnswers.
     */
    data: XOR<PracticeAnswerUpdateManyMutationInput, PracticeAnswerUncheckedUpdateManyInput>
    /**
     * Filter which PracticeAnswers to update
     */
    where?: PracticeAnswerWhereInput
    /**
     * Limit how many PracticeAnswers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeAnswerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PracticeAnswer upsert
   */
  export type PracticeAnswerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeAnswer
     */
    select?: PracticeAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeAnswer
     */
    omit?: PracticeAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeAnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the PracticeAnswer to update in case it exists.
     */
    where: PracticeAnswerWhereUniqueInput
    /**
     * In case the PracticeAnswer found by the `where` argument doesn't exist, create a new PracticeAnswer with this data.
     */
    create: XOR<PracticeAnswerCreateInput, PracticeAnswerUncheckedCreateInput>
    /**
     * In case the PracticeAnswer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PracticeAnswerUpdateInput, PracticeAnswerUncheckedUpdateInput>
  }

  /**
   * PracticeAnswer delete
   */
  export type PracticeAnswerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeAnswer
     */
    select?: PracticeAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeAnswer
     */
    omit?: PracticeAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeAnswerInclude<ExtArgs> | null
    /**
     * Filter which PracticeAnswer to delete.
     */
    where: PracticeAnswerWhereUniqueInput
  }

  /**
   * PracticeAnswer deleteMany
   */
  export type PracticeAnswerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PracticeAnswers to delete
     */
    where?: PracticeAnswerWhereInput
    /**
     * Limit how many PracticeAnswers to delete.
     */
    limit?: number
  }

  /**
   * PracticeAnswer without action
   */
  export type PracticeAnswerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeAnswer
     */
    select?: PracticeAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeAnswer
     */
    omit?: PracticeAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeAnswerInclude<ExtArgs> | null
  }


  /**
   * Model QuestionRating
   */

  export type AggregateQuestionRating = {
    _count: QuestionRatingCountAggregateOutputType | null
    _avg: QuestionRatingAvgAggregateOutputType | null
    _sum: QuestionRatingSumAggregateOutputType | null
    _min: QuestionRatingMinAggregateOutputType | null
    _max: QuestionRatingMaxAggregateOutputType | null
  }

  export type QuestionRatingAvgAggregateOutputType = {
    rating: number | null
    clarity: number | null
    difficulty: number | null
    quality: number | null
  }

  export type QuestionRatingSumAggregateOutputType = {
    rating: number | null
    clarity: number | null
    difficulty: number | null
    quality: number | null
  }

  export type QuestionRatingMinAggregateOutputType = {
    id: string | null
    userId: string | null
    questionId: string | null
    rating: number | null
    comment: string | null
    clarity: number | null
    difficulty: number | null
    quality: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionRatingMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    questionId: string | null
    rating: number | null
    comment: string | null
    clarity: number | null
    difficulty: number | null
    quality: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionRatingCountAggregateOutputType = {
    id: number
    userId: number
    questionId: number
    rating: number
    comment: number
    clarity: number
    difficulty: number
    quality: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionRatingAvgAggregateInputType = {
    rating?: true
    clarity?: true
    difficulty?: true
    quality?: true
  }

  export type QuestionRatingSumAggregateInputType = {
    rating?: true
    clarity?: true
    difficulty?: true
    quality?: true
  }

  export type QuestionRatingMinAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    rating?: true
    comment?: true
    clarity?: true
    difficulty?: true
    quality?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionRatingMaxAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    rating?: true
    comment?: true
    clarity?: true
    difficulty?: true
    quality?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionRatingCountAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    rating?: true
    comment?: true
    clarity?: true
    difficulty?: true
    quality?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionRatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionRating to aggregate.
     */
    where?: QuestionRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionRatings to fetch.
     */
    orderBy?: QuestionRatingOrderByWithRelationInput | QuestionRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionRatings
    **/
    _count?: true | QuestionRatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionRatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionRatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionRatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionRatingMaxAggregateInputType
  }

  export type GetQuestionRatingAggregateType<T extends QuestionRatingAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionRating[P]>
      : GetScalarType<T[P], AggregateQuestionRating[P]>
  }




  export type QuestionRatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionRatingWhereInput
    orderBy?: QuestionRatingOrderByWithAggregationInput | QuestionRatingOrderByWithAggregationInput[]
    by: QuestionRatingScalarFieldEnum[] | QuestionRatingScalarFieldEnum
    having?: QuestionRatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionRatingCountAggregateInputType | true
    _avg?: QuestionRatingAvgAggregateInputType
    _sum?: QuestionRatingSumAggregateInputType
    _min?: QuestionRatingMinAggregateInputType
    _max?: QuestionRatingMaxAggregateInputType
  }

  export type QuestionRatingGroupByOutputType = {
    id: string
    userId: string
    questionId: string
    rating: number
    comment: string | null
    clarity: number | null
    difficulty: number | null
    quality: number | null
    createdAt: Date
    updatedAt: Date
    _count: QuestionRatingCountAggregateOutputType | null
    _avg: QuestionRatingAvgAggregateOutputType | null
    _sum: QuestionRatingSumAggregateOutputType | null
    _min: QuestionRatingMinAggregateOutputType | null
    _max: QuestionRatingMaxAggregateOutputType | null
  }

  type GetQuestionRatingGroupByPayload<T extends QuestionRatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionRatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionRatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionRatingGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionRatingGroupByOutputType[P]>
        }
      >
    >


  export type QuestionRatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionId?: boolean
    rating?: boolean
    comment?: boolean
    clarity?: boolean
    difficulty?: boolean
    quality?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionRating"]>

  export type QuestionRatingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionId?: boolean
    rating?: boolean
    comment?: boolean
    clarity?: boolean
    difficulty?: boolean
    quality?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionRating"]>

  export type QuestionRatingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionId?: boolean
    rating?: boolean
    comment?: boolean
    clarity?: boolean
    difficulty?: boolean
    quality?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionRating"]>

  export type QuestionRatingSelectScalar = {
    id?: boolean
    userId?: boolean
    questionId?: boolean
    rating?: boolean
    comment?: boolean
    clarity?: boolean
    difficulty?: boolean
    quality?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuestionRatingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "questionId" | "rating" | "comment" | "clarity" | "difficulty" | "quality" | "createdAt" | "updatedAt", ExtArgs["result"]["questionRating"]>
  export type QuestionRatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type QuestionRatingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type QuestionRatingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }

  export type $QuestionRatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionRating"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      question: Prisma.$QuestionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      questionId: string
      rating: number
      comment: string | null
      clarity: number | null
      difficulty: number | null
      quality: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["questionRating"]>
    composites: {}
  }

  type QuestionRatingGetPayload<S extends boolean | null | undefined | QuestionRatingDefaultArgs> = $Result.GetResult<Prisma.$QuestionRatingPayload, S>

  type QuestionRatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionRatingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionRatingCountAggregateInputType | true
    }

  export interface QuestionRatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionRating'], meta: { name: 'QuestionRating' } }
    /**
     * Find zero or one QuestionRating that matches the filter.
     * @param {QuestionRatingFindUniqueArgs} args - Arguments to find a QuestionRating
     * @example
     * // Get one QuestionRating
     * const questionRating = await prisma.questionRating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionRatingFindUniqueArgs>(args: SelectSubset<T, QuestionRatingFindUniqueArgs<ExtArgs>>): Prisma__QuestionRatingClient<$Result.GetResult<Prisma.$QuestionRatingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionRating that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionRatingFindUniqueOrThrowArgs} args - Arguments to find a QuestionRating
     * @example
     * // Get one QuestionRating
     * const questionRating = await prisma.questionRating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionRatingFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionRatingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionRatingClient<$Result.GetResult<Prisma.$QuestionRatingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionRating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionRatingFindFirstArgs} args - Arguments to find a QuestionRating
     * @example
     * // Get one QuestionRating
     * const questionRating = await prisma.questionRating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionRatingFindFirstArgs>(args?: SelectSubset<T, QuestionRatingFindFirstArgs<ExtArgs>>): Prisma__QuestionRatingClient<$Result.GetResult<Prisma.$QuestionRatingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionRating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionRatingFindFirstOrThrowArgs} args - Arguments to find a QuestionRating
     * @example
     * // Get one QuestionRating
     * const questionRating = await prisma.questionRating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionRatingFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionRatingFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionRatingClient<$Result.GetResult<Prisma.$QuestionRatingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionRatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionRatings
     * const questionRatings = await prisma.questionRating.findMany()
     * 
     * // Get first 10 QuestionRatings
     * const questionRatings = await prisma.questionRating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionRatingWithIdOnly = await prisma.questionRating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionRatingFindManyArgs>(args?: SelectSubset<T, QuestionRatingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionRatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionRating.
     * @param {QuestionRatingCreateArgs} args - Arguments to create a QuestionRating.
     * @example
     * // Create one QuestionRating
     * const QuestionRating = await prisma.questionRating.create({
     *   data: {
     *     // ... data to create a QuestionRating
     *   }
     * })
     * 
     */
    create<T extends QuestionRatingCreateArgs>(args: SelectSubset<T, QuestionRatingCreateArgs<ExtArgs>>): Prisma__QuestionRatingClient<$Result.GetResult<Prisma.$QuestionRatingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionRatings.
     * @param {QuestionRatingCreateManyArgs} args - Arguments to create many QuestionRatings.
     * @example
     * // Create many QuestionRatings
     * const questionRating = await prisma.questionRating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionRatingCreateManyArgs>(args?: SelectSubset<T, QuestionRatingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionRatings and returns the data saved in the database.
     * @param {QuestionRatingCreateManyAndReturnArgs} args - Arguments to create many QuestionRatings.
     * @example
     * // Create many QuestionRatings
     * const questionRating = await prisma.questionRating.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionRatings and only return the `id`
     * const questionRatingWithIdOnly = await prisma.questionRating.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionRatingCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionRatingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionRatingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionRating.
     * @param {QuestionRatingDeleteArgs} args - Arguments to delete one QuestionRating.
     * @example
     * // Delete one QuestionRating
     * const QuestionRating = await prisma.questionRating.delete({
     *   where: {
     *     // ... filter to delete one QuestionRating
     *   }
     * })
     * 
     */
    delete<T extends QuestionRatingDeleteArgs>(args: SelectSubset<T, QuestionRatingDeleteArgs<ExtArgs>>): Prisma__QuestionRatingClient<$Result.GetResult<Prisma.$QuestionRatingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionRating.
     * @param {QuestionRatingUpdateArgs} args - Arguments to update one QuestionRating.
     * @example
     * // Update one QuestionRating
     * const questionRating = await prisma.questionRating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionRatingUpdateArgs>(args: SelectSubset<T, QuestionRatingUpdateArgs<ExtArgs>>): Prisma__QuestionRatingClient<$Result.GetResult<Prisma.$QuestionRatingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionRatings.
     * @param {QuestionRatingDeleteManyArgs} args - Arguments to filter QuestionRatings to delete.
     * @example
     * // Delete a few QuestionRatings
     * const { count } = await prisma.questionRating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionRatingDeleteManyArgs>(args?: SelectSubset<T, QuestionRatingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionRatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionRatings
     * const questionRating = await prisma.questionRating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionRatingUpdateManyArgs>(args: SelectSubset<T, QuestionRatingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionRatings and returns the data updated in the database.
     * @param {QuestionRatingUpdateManyAndReturnArgs} args - Arguments to update many QuestionRatings.
     * @example
     * // Update many QuestionRatings
     * const questionRating = await prisma.questionRating.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionRatings and only return the `id`
     * const questionRatingWithIdOnly = await prisma.questionRating.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionRatingUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionRatingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionRatingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionRating.
     * @param {QuestionRatingUpsertArgs} args - Arguments to update or create a QuestionRating.
     * @example
     * // Update or create a QuestionRating
     * const questionRating = await prisma.questionRating.upsert({
     *   create: {
     *     // ... data to create a QuestionRating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionRating we want to update
     *   }
     * })
     */
    upsert<T extends QuestionRatingUpsertArgs>(args: SelectSubset<T, QuestionRatingUpsertArgs<ExtArgs>>): Prisma__QuestionRatingClient<$Result.GetResult<Prisma.$QuestionRatingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionRatingCountArgs} args - Arguments to filter QuestionRatings to count.
     * @example
     * // Count the number of QuestionRatings
     * const count = await prisma.questionRating.count({
     *   where: {
     *     // ... the filter for the QuestionRatings we want to count
     *   }
     * })
    **/
    count<T extends QuestionRatingCountArgs>(
      args?: Subset<T, QuestionRatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionRatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionRatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionRatingAggregateArgs>(args: Subset<T, QuestionRatingAggregateArgs>): Prisma.PrismaPromise<GetQuestionRatingAggregateType<T>>

    /**
     * Group by QuestionRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionRatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionRatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionRatingGroupByArgs['orderBy'] }
        : { orderBy?: QuestionRatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionRatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionRating model
   */
  readonly fields: QuestionRatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionRating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionRatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionRating model
   */
  interface QuestionRatingFieldRefs {
    readonly id: FieldRef<"QuestionRating", 'String'>
    readonly userId: FieldRef<"QuestionRating", 'String'>
    readonly questionId: FieldRef<"QuestionRating", 'String'>
    readonly rating: FieldRef<"QuestionRating", 'Int'>
    readonly comment: FieldRef<"QuestionRating", 'String'>
    readonly clarity: FieldRef<"QuestionRating", 'Int'>
    readonly difficulty: FieldRef<"QuestionRating", 'Int'>
    readonly quality: FieldRef<"QuestionRating", 'Int'>
    readonly createdAt: FieldRef<"QuestionRating", 'DateTime'>
    readonly updatedAt: FieldRef<"QuestionRating", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuestionRating findUnique
   */
  export type QuestionRatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionRating
     */
    select?: QuestionRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionRating
     */
    omit?: QuestionRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionRatingInclude<ExtArgs> | null
    /**
     * Filter, which QuestionRating to fetch.
     */
    where: QuestionRatingWhereUniqueInput
  }

  /**
   * QuestionRating findUniqueOrThrow
   */
  export type QuestionRatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionRating
     */
    select?: QuestionRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionRating
     */
    omit?: QuestionRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionRatingInclude<ExtArgs> | null
    /**
     * Filter, which QuestionRating to fetch.
     */
    where: QuestionRatingWhereUniqueInput
  }

  /**
   * QuestionRating findFirst
   */
  export type QuestionRatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionRating
     */
    select?: QuestionRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionRating
     */
    omit?: QuestionRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionRatingInclude<ExtArgs> | null
    /**
     * Filter, which QuestionRating to fetch.
     */
    where?: QuestionRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionRatings to fetch.
     */
    orderBy?: QuestionRatingOrderByWithRelationInput | QuestionRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionRatings.
     */
    cursor?: QuestionRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionRatings.
     */
    distinct?: QuestionRatingScalarFieldEnum | QuestionRatingScalarFieldEnum[]
  }

  /**
   * QuestionRating findFirstOrThrow
   */
  export type QuestionRatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionRating
     */
    select?: QuestionRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionRating
     */
    omit?: QuestionRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionRatingInclude<ExtArgs> | null
    /**
     * Filter, which QuestionRating to fetch.
     */
    where?: QuestionRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionRatings to fetch.
     */
    orderBy?: QuestionRatingOrderByWithRelationInput | QuestionRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionRatings.
     */
    cursor?: QuestionRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionRatings.
     */
    distinct?: QuestionRatingScalarFieldEnum | QuestionRatingScalarFieldEnum[]
  }

  /**
   * QuestionRating findMany
   */
  export type QuestionRatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionRating
     */
    select?: QuestionRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionRating
     */
    omit?: QuestionRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionRatingInclude<ExtArgs> | null
    /**
     * Filter, which QuestionRatings to fetch.
     */
    where?: QuestionRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionRatings to fetch.
     */
    orderBy?: QuestionRatingOrderByWithRelationInput | QuestionRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionRatings.
     */
    cursor?: QuestionRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionRatings.
     */
    skip?: number
    distinct?: QuestionRatingScalarFieldEnum | QuestionRatingScalarFieldEnum[]
  }

  /**
   * QuestionRating create
   */
  export type QuestionRatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionRating
     */
    select?: QuestionRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionRating
     */
    omit?: QuestionRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionRatingInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionRating.
     */
    data: XOR<QuestionRatingCreateInput, QuestionRatingUncheckedCreateInput>
  }

  /**
   * QuestionRating createMany
   */
  export type QuestionRatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionRatings.
     */
    data: QuestionRatingCreateManyInput | QuestionRatingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionRating createManyAndReturn
   */
  export type QuestionRatingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionRating
     */
    select?: QuestionRatingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionRating
     */
    omit?: QuestionRatingOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionRatings.
     */
    data: QuestionRatingCreateManyInput | QuestionRatingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionRatingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionRating update
   */
  export type QuestionRatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionRating
     */
    select?: QuestionRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionRating
     */
    omit?: QuestionRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionRatingInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionRating.
     */
    data: XOR<QuestionRatingUpdateInput, QuestionRatingUncheckedUpdateInput>
    /**
     * Choose, which QuestionRating to update.
     */
    where: QuestionRatingWhereUniqueInput
  }

  /**
   * QuestionRating updateMany
   */
  export type QuestionRatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionRatings.
     */
    data: XOR<QuestionRatingUpdateManyMutationInput, QuestionRatingUncheckedUpdateManyInput>
    /**
     * Filter which QuestionRatings to update
     */
    where?: QuestionRatingWhereInput
    /**
     * Limit how many QuestionRatings to update.
     */
    limit?: number
  }

  /**
   * QuestionRating updateManyAndReturn
   */
  export type QuestionRatingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionRating
     */
    select?: QuestionRatingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionRating
     */
    omit?: QuestionRatingOmit<ExtArgs> | null
    /**
     * The data used to update QuestionRatings.
     */
    data: XOR<QuestionRatingUpdateManyMutationInput, QuestionRatingUncheckedUpdateManyInput>
    /**
     * Filter which QuestionRatings to update
     */
    where?: QuestionRatingWhereInput
    /**
     * Limit how many QuestionRatings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionRatingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionRating upsert
   */
  export type QuestionRatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionRating
     */
    select?: QuestionRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionRating
     */
    omit?: QuestionRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionRatingInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionRating to update in case it exists.
     */
    where: QuestionRatingWhereUniqueInput
    /**
     * In case the QuestionRating found by the `where` argument doesn't exist, create a new QuestionRating with this data.
     */
    create: XOR<QuestionRatingCreateInput, QuestionRatingUncheckedCreateInput>
    /**
     * In case the QuestionRating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionRatingUpdateInput, QuestionRatingUncheckedUpdateInput>
  }

  /**
   * QuestionRating delete
   */
  export type QuestionRatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionRating
     */
    select?: QuestionRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionRating
     */
    omit?: QuestionRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionRatingInclude<ExtArgs> | null
    /**
     * Filter which QuestionRating to delete.
     */
    where: QuestionRatingWhereUniqueInput
  }

  /**
   * QuestionRating deleteMany
   */
  export type QuestionRatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionRatings to delete
     */
    where?: QuestionRatingWhereInput
    /**
     * Limit how many QuestionRatings to delete.
     */
    limit?: number
  }

  /**
   * QuestionRating without action
   */
  export type QuestionRatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionRating
     */
    select?: QuestionRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionRating
     */
    omit?: QuestionRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionRatingInclude<ExtArgs> | null
  }


  /**
   * Model PracticeRecord
   */

  export type AggregatePracticeRecord = {
    _count: PracticeRecordCountAggregateOutputType | null
    _avg: PracticeRecordAvgAggregateOutputType | null
    _sum: PracticeRecordSumAggregateOutputType | null
    _min: PracticeRecordMinAggregateOutputType | null
    _max: PracticeRecordMaxAggregateOutputType | null
  }

  export type PracticeRecordAvgAggregateOutputType = {
    questionsCount: number | null
    correctAnswers: number | null
    totalTime: number | null
    score: number | null
    realQuestions: number | null
    aiPoolQuestions: number | null
    realtimeQuestions: number | null
  }

  export type PracticeRecordSumAggregateOutputType = {
    questionsCount: number | null
    correctAnswers: number | null
    totalTime: number | null
    score: number | null
    realQuestions: number | null
    aiPoolQuestions: number | null
    realtimeQuestions: number | null
  }

  export type PracticeRecordMinAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionId: string | null
    questionType: $Enums.QuestionType | null
    difficulty: $Enums.DifficultyLevel | null
    questionsCount: number | null
    correctAnswers: number | null
    totalTime: number | null
    score: number | null
    realQuestions: number | null
    aiPoolQuestions: number | null
    realtimeQuestions: number | null
    completedAt: Date | null
  }

  export type PracticeRecordMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionId: string | null
    questionType: $Enums.QuestionType | null
    difficulty: $Enums.DifficultyLevel | null
    questionsCount: number | null
    correctAnswers: number | null
    totalTime: number | null
    score: number | null
    realQuestions: number | null
    aiPoolQuestions: number | null
    realtimeQuestions: number | null
    completedAt: Date | null
  }

  export type PracticeRecordCountAggregateOutputType = {
    id: number
    userId: number
    sessionId: number
    questionType: number
    difficulty: number
    questionsCount: number
    correctAnswers: number
    totalTime: number
    score: number
    realQuestions: number
    aiPoolQuestions: number
    realtimeQuestions: number
    questions: number
    completedAt: number
    _all: number
  }


  export type PracticeRecordAvgAggregateInputType = {
    questionsCount?: true
    correctAnswers?: true
    totalTime?: true
    score?: true
    realQuestions?: true
    aiPoolQuestions?: true
    realtimeQuestions?: true
  }

  export type PracticeRecordSumAggregateInputType = {
    questionsCount?: true
    correctAnswers?: true
    totalTime?: true
    score?: true
    realQuestions?: true
    aiPoolQuestions?: true
    realtimeQuestions?: true
  }

  export type PracticeRecordMinAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    questionType?: true
    difficulty?: true
    questionsCount?: true
    correctAnswers?: true
    totalTime?: true
    score?: true
    realQuestions?: true
    aiPoolQuestions?: true
    realtimeQuestions?: true
    completedAt?: true
  }

  export type PracticeRecordMaxAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    questionType?: true
    difficulty?: true
    questionsCount?: true
    correctAnswers?: true
    totalTime?: true
    score?: true
    realQuestions?: true
    aiPoolQuestions?: true
    realtimeQuestions?: true
    completedAt?: true
  }

  export type PracticeRecordCountAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    questionType?: true
    difficulty?: true
    questionsCount?: true
    correctAnswers?: true
    totalTime?: true
    score?: true
    realQuestions?: true
    aiPoolQuestions?: true
    realtimeQuestions?: true
    questions?: true
    completedAt?: true
    _all?: true
  }

  export type PracticeRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PracticeRecord to aggregate.
     */
    where?: PracticeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeRecords to fetch.
     */
    orderBy?: PracticeRecordOrderByWithRelationInput | PracticeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PracticeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PracticeRecords
    **/
    _count?: true | PracticeRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PracticeRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PracticeRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PracticeRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PracticeRecordMaxAggregateInputType
  }

  export type GetPracticeRecordAggregateType<T extends PracticeRecordAggregateArgs> = {
        [P in keyof T & keyof AggregatePracticeRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePracticeRecord[P]>
      : GetScalarType<T[P], AggregatePracticeRecord[P]>
  }




  export type PracticeRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeRecordWhereInput
    orderBy?: PracticeRecordOrderByWithAggregationInput | PracticeRecordOrderByWithAggregationInput[]
    by: PracticeRecordScalarFieldEnum[] | PracticeRecordScalarFieldEnum
    having?: PracticeRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PracticeRecordCountAggregateInputType | true
    _avg?: PracticeRecordAvgAggregateInputType
    _sum?: PracticeRecordSumAggregateInputType
    _min?: PracticeRecordMinAggregateInputType
    _max?: PracticeRecordMaxAggregateInputType
  }

  export type PracticeRecordGroupByOutputType = {
    id: string
    userId: string
    sessionId: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    questionsCount: number
    correctAnswers: number
    totalTime: number
    score: number | null
    realQuestions: number
    aiPoolQuestions: number
    realtimeQuestions: number
    questions: JsonValue | null
    completedAt: Date
    _count: PracticeRecordCountAggregateOutputType | null
    _avg: PracticeRecordAvgAggregateOutputType | null
    _sum: PracticeRecordSumAggregateOutputType | null
    _min: PracticeRecordMinAggregateOutputType | null
    _max: PracticeRecordMaxAggregateOutputType | null
  }

  type GetPracticeRecordGroupByPayload<T extends PracticeRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PracticeRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PracticeRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PracticeRecordGroupByOutputType[P]>
            : GetScalarType<T[P], PracticeRecordGroupByOutputType[P]>
        }
      >
    >


  export type PracticeRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    questionType?: boolean
    difficulty?: boolean
    questionsCount?: boolean
    correctAnswers?: boolean
    totalTime?: boolean
    score?: boolean
    realQuestions?: boolean
    aiPoolQuestions?: boolean
    realtimeQuestions?: boolean
    questions?: boolean
    completedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    practiceAnswers?: boolean | PracticeRecord$practiceAnswersArgs<ExtArgs>
    _count?: boolean | PracticeRecordCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceRecord"]>

  export type PracticeRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    questionType?: boolean
    difficulty?: boolean
    questionsCount?: boolean
    correctAnswers?: boolean
    totalTime?: boolean
    score?: boolean
    realQuestions?: boolean
    aiPoolQuestions?: boolean
    realtimeQuestions?: boolean
    questions?: boolean
    completedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceRecord"]>

  export type PracticeRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    questionType?: boolean
    difficulty?: boolean
    questionsCount?: boolean
    correctAnswers?: boolean
    totalTime?: boolean
    score?: boolean
    realQuestions?: boolean
    aiPoolQuestions?: boolean
    realtimeQuestions?: boolean
    questions?: boolean
    completedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceRecord"]>

  export type PracticeRecordSelectScalar = {
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    questionType?: boolean
    difficulty?: boolean
    questionsCount?: boolean
    correctAnswers?: boolean
    totalTime?: boolean
    score?: boolean
    realQuestions?: boolean
    aiPoolQuestions?: boolean
    realtimeQuestions?: boolean
    questions?: boolean
    completedAt?: boolean
  }

  export type PracticeRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "sessionId" | "questionType" | "difficulty" | "questionsCount" | "correctAnswers" | "totalTime" | "score" | "realQuestions" | "aiPoolQuestions" | "realtimeQuestions" | "questions" | "completedAt", ExtArgs["result"]["practiceRecord"]>
  export type PracticeRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    practiceAnswers?: boolean | PracticeRecord$practiceAnswersArgs<ExtArgs>
    _count?: boolean | PracticeRecordCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PracticeRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PracticeRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PracticeRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PracticeRecord"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      practiceAnswers: Prisma.$PracticeAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      sessionId: string
      questionType: $Enums.QuestionType
      difficulty: $Enums.DifficultyLevel
      questionsCount: number
      correctAnswers: number
      totalTime: number
      score: number | null
      realQuestions: number
      aiPoolQuestions: number
      realtimeQuestions: number
      questions: Prisma.JsonValue | null
      completedAt: Date
    }, ExtArgs["result"]["practiceRecord"]>
    composites: {}
  }

  type PracticeRecordGetPayload<S extends boolean | null | undefined | PracticeRecordDefaultArgs> = $Result.GetResult<Prisma.$PracticeRecordPayload, S>

  type PracticeRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PracticeRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PracticeRecordCountAggregateInputType | true
    }

  export interface PracticeRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PracticeRecord'], meta: { name: 'PracticeRecord' } }
    /**
     * Find zero or one PracticeRecord that matches the filter.
     * @param {PracticeRecordFindUniqueArgs} args - Arguments to find a PracticeRecord
     * @example
     * // Get one PracticeRecord
     * const practiceRecord = await prisma.practiceRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PracticeRecordFindUniqueArgs>(args: SelectSubset<T, PracticeRecordFindUniqueArgs<ExtArgs>>): Prisma__PracticeRecordClient<$Result.GetResult<Prisma.$PracticeRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PracticeRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PracticeRecordFindUniqueOrThrowArgs} args - Arguments to find a PracticeRecord
     * @example
     * // Get one PracticeRecord
     * const practiceRecord = await prisma.practiceRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PracticeRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, PracticeRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PracticeRecordClient<$Result.GetResult<Prisma.$PracticeRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PracticeRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeRecordFindFirstArgs} args - Arguments to find a PracticeRecord
     * @example
     * // Get one PracticeRecord
     * const practiceRecord = await prisma.practiceRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PracticeRecordFindFirstArgs>(args?: SelectSubset<T, PracticeRecordFindFirstArgs<ExtArgs>>): Prisma__PracticeRecordClient<$Result.GetResult<Prisma.$PracticeRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PracticeRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeRecordFindFirstOrThrowArgs} args - Arguments to find a PracticeRecord
     * @example
     * // Get one PracticeRecord
     * const practiceRecord = await prisma.practiceRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PracticeRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, PracticeRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__PracticeRecordClient<$Result.GetResult<Prisma.$PracticeRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PracticeRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PracticeRecords
     * const practiceRecords = await prisma.practiceRecord.findMany()
     * 
     * // Get first 10 PracticeRecords
     * const practiceRecords = await prisma.practiceRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const practiceRecordWithIdOnly = await prisma.practiceRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PracticeRecordFindManyArgs>(args?: SelectSubset<T, PracticeRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PracticeRecord.
     * @param {PracticeRecordCreateArgs} args - Arguments to create a PracticeRecord.
     * @example
     * // Create one PracticeRecord
     * const PracticeRecord = await prisma.practiceRecord.create({
     *   data: {
     *     // ... data to create a PracticeRecord
     *   }
     * })
     * 
     */
    create<T extends PracticeRecordCreateArgs>(args: SelectSubset<T, PracticeRecordCreateArgs<ExtArgs>>): Prisma__PracticeRecordClient<$Result.GetResult<Prisma.$PracticeRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PracticeRecords.
     * @param {PracticeRecordCreateManyArgs} args - Arguments to create many PracticeRecords.
     * @example
     * // Create many PracticeRecords
     * const practiceRecord = await prisma.practiceRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PracticeRecordCreateManyArgs>(args?: SelectSubset<T, PracticeRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PracticeRecords and returns the data saved in the database.
     * @param {PracticeRecordCreateManyAndReturnArgs} args - Arguments to create many PracticeRecords.
     * @example
     * // Create many PracticeRecords
     * const practiceRecord = await prisma.practiceRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PracticeRecords and only return the `id`
     * const practiceRecordWithIdOnly = await prisma.practiceRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PracticeRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, PracticeRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PracticeRecord.
     * @param {PracticeRecordDeleteArgs} args - Arguments to delete one PracticeRecord.
     * @example
     * // Delete one PracticeRecord
     * const PracticeRecord = await prisma.practiceRecord.delete({
     *   where: {
     *     // ... filter to delete one PracticeRecord
     *   }
     * })
     * 
     */
    delete<T extends PracticeRecordDeleteArgs>(args: SelectSubset<T, PracticeRecordDeleteArgs<ExtArgs>>): Prisma__PracticeRecordClient<$Result.GetResult<Prisma.$PracticeRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PracticeRecord.
     * @param {PracticeRecordUpdateArgs} args - Arguments to update one PracticeRecord.
     * @example
     * // Update one PracticeRecord
     * const practiceRecord = await prisma.practiceRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PracticeRecordUpdateArgs>(args: SelectSubset<T, PracticeRecordUpdateArgs<ExtArgs>>): Prisma__PracticeRecordClient<$Result.GetResult<Prisma.$PracticeRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PracticeRecords.
     * @param {PracticeRecordDeleteManyArgs} args - Arguments to filter PracticeRecords to delete.
     * @example
     * // Delete a few PracticeRecords
     * const { count } = await prisma.practiceRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PracticeRecordDeleteManyArgs>(args?: SelectSubset<T, PracticeRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PracticeRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PracticeRecords
     * const practiceRecord = await prisma.practiceRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PracticeRecordUpdateManyArgs>(args: SelectSubset<T, PracticeRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PracticeRecords and returns the data updated in the database.
     * @param {PracticeRecordUpdateManyAndReturnArgs} args - Arguments to update many PracticeRecords.
     * @example
     * // Update many PracticeRecords
     * const practiceRecord = await prisma.practiceRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PracticeRecords and only return the `id`
     * const practiceRecordWithIdOnly = await prisma.practiceRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PracticeRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, PracticeRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PracticeRecord.
     * @param {PracticeRecordUpsertArgs} args - Arguments to update or create a PracticeRecord.
     * @example
     * // Update or create a PracticeRecord
     * const practiceRecord = await prisma.practiceRecord.upsert({
     *   create: {
     *     // ... data to create a PracticeRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PracticeRecord we want to update
     *   }
     * })
     */
    upsert<T extends PracticeRecordUpsertArgs>(args: SelectSubset<T, PracticeRecordUpsertArgs<ExtArgs>>): Prisma__PracticeRecordClient<$Result.GetResult<Prisma.$PracticeRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PracticeRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeRecordCountArgs} args - Arguments to filter PracticeRecords to count.
     * @example
     * // Count the number of PracticeRecords
     * const count = await prisma.practiceRecord.count({
     *   where: {
     *     // ... the filter for the PracticeRecords we want to count
     *   }
     * })
    **/
    count<T extends PracticeRecordCountArgs>(
      args?: Subset<T, PracticeRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PracticeRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PracticeRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PracticeRecordAggregateArgs>(args: Subset<T, PracticeRecordAggregateArgs>): Prisma.PrismaPromise<GetPracticeRecordAggregateType<T>>

    /**
     * Group by PracticeRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PracticeRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PracticeRecordGroupByArgs['orderBy'] }
        : { orderBy?: PracticeRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PracticeRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPracticeRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PracticeRecord model
   */
  readonly fields: PracticeRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PracticeRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PracticeRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    practiceAnswers<T extends PracticeRecord$practiceAnswersArgs<ExtArgs> = {}>(args?: Subset<T, PracticeRecord$practiceAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PracticeRecord model
   */
  interface PracticeRecordFieldRefs {
    readonly id: FieldRef<"PracticeRecord", 'String'>
    readonly userId: FieldRef<"PracticeRecord", 'String'>
    readonly sessionId: FieldRef<"PracticeRecord", 'String'>
    readonly questionType: FieldRef<"PracticeRecord", 'QuestionType'>
    readonly difficulty: FieldRef<"PracticeRecord", 'DifficultyLevel'>
    readonly questionsCount: FieldRef<"PracticeRecord", 'Int'>
    readonly correctAnswers: FieldRef<"PracticeRecord", 'Int'>
    readonly totalTime: FieldRef<"PracticeRecord", 'Int'>
    readonly score: FieldRef<"PracticeRecord", 'Int'>
    readonly realQuestions: FieldRef<"PracticeRecord", 'Int'>
    readonly aiPoolQuestions: FieldRef<"PracticeRecord", 'Int'>
    readonly realtimeQuestions: FieldRef<"PracticeRecord", 'Int'>
    readonly questions: FieldRef<"PracticeRecord", 'Json'>
    readonly completedAt: FieldRef<"PracticeRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PracticeRecord findUnique
   */
  export type PracticeRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeRecord
     */
    select?: PracticeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeRecord
     */
    omit?: PracticeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeRecordInclude<ExtArgs> | null
    /**
     * Filter, which PracticeRecord to fetch.
     */
    where: PracticeRecordWhereUniqueInput
  }

  /**
   * PracticeRecord findUniqueOrThrow
   */
  export type PracticeRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeRecord
     */
    select?: PracticeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeRecord
     */
    omit?: PracticeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeRecordInclude<ExtArgs> | null
    /**
     * Filter, which PracticeRecord to fetch.
     */
    where: PracticeRecordWhereUniqueInput
  }

  /**
   * PracticeRecord findFirst
   */
  export type PracticeRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeRecord
     */
    select?: PracticeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeRecord
     */
    omit?: PracticeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeRecordInclude<ExtArgs> | null
    /**
     * Filter, which PracticeRecord to fetch.
     */
    where?: PracticeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeRecords to fetch.
     */
    orderBy?: PracticeRecordOrderByWithRelationInput | PracticeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PracticeRecords.
     */
    cursor?: PracticeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PracticeRecords.
     */
    distinct?: PracticeRecordScalarFieldEnum | PracticeRecordScalarFieldEnum[]
  }

  /**
   * PracticeRecord findFirstOrThrow
   */
  export type PracticeRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeRecord
     */
    select?: PracticeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeRecord
     */
    omit?: PracticeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeRecordInclude<ExtArgs> | null
    /**
     * Filter, which PracticeRecord to fetch.
     */
    where?: PracticeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeRecords to fetch.
     */
    orderBy?: PracticeRecordOrderByWithRelationInput | PracticeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PracticeRecords.
     */
    cursor?: PracticeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PracticeRecords.
     */
    distinct?: PracticeRecordScalarFieldEnum | PracticeRecordScalarFieldEnum[]
  }

  /**
   * PracticeRecord findMany
   */
  export type PracticeRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeRecord
     */
    select?: PracticeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeRecord
     */
    omit?: PracticeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeRecordInclude<ExtArgs> | null
    /**
     * Filter, which PracticeRecords to fetch.
     */
    where?: PracticeRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeRecords to fetch.
     */
    orderBy?: PracticeRecordOrderByWithRelationInput | PracticeRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PracticeRecords.
     */
    cursor?: PracticeRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeRecords.
     */
    skip?: number
    distinct?: PracticeRecordScalarFieldEnum | PracticeRecordScalarFieldEnum[]
  }

  /**
   * PracticeRecord create
   */
  export type PracticeRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeRecord
     */
    select?: PracticeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeRecord
     */
    omit?: PracticeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a PracticeRecord.
     */
    data: XOR<PracticeRecordCreateInput, PracticeRecordUncheckedCreateInput>
  }

  /**
   * PracticeRecord createMany
   */
  export type PracticeRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PracticeRecords.
     */
    data: PracticeRecordCreateManyInput | PracticeRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PracticeRecord createManyAndReturn
   */
  export type PracticeRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeRecord
     */
    select?: PracticeRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeRecord
     */
    omit?: PracticeRecordOmit<ExtArgs> | null
    /**
     * The data used to create many PracticeRecords.
     */
    data: PracticeRecordCreateManyInput | PracticeRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PracticeRecord update
   */
  export type PracticeRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeRecord
     */
    select?: PracticeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeRecord
     */
    omit?: PracticeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a PracticeRecord.
     */
    data: XOR<PracticeRecordUpdateInput, PracticeRecordUncheckedUpdateInput>
    /**
     * Choose, which PracticeRecord to update.
     */
    where: PracticeRecordWhereUniqueInput
  }

  /**
   * PracticeRecord updateMany
   */
  export type PracticeRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PracticeRecords.
     */
    data: XOR<PracticeRecordUpdateManyMutationInput, PracticeRecordUncheckedUpdateManyInput>
    /**
     * Filter which PracticeRecords to update
     */
    where?: PracticeRecordWhereInput
    /**
     * Limit how many PracticeRecords to update.
     */
    limit?: number
  }

  /**
   * PracticeRecord updateManyAndReturn
   */
  export type PracticeRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeRecord
     */
    select?: PracticeRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeRecord
     */
    omit?: PracticeRecordOmit<ExtArgs> | null
    /**
     * The data used to update PracticeRecords.
     */
    data: XOR<PracticeRecordUpdateManyMutationInput, PracticeRecordUncheckedUpdateManyInput>
    /**
     * Filter which PracticeRecords to update
     */
    where?: PracticeRecordWhereInput
    /**
     * Limit how many PracticeRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PracticeRecord upsert
   */
  export type PracticeRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeRecord
     */
    select?: PracticeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeRecord
     */
    omit?: PracticeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the PracticeRecord to update in case it exists.
     */
    where: PracticeRecordWhereUniqueInput
    /**
     * In case the PracticeRecord found by the `where` argument doesn't exist, create a new PracticeRecord with this data.
     */
    create: XOR<PracticeRecordCreateInput, PracticeRecordUncheckedCreateInput>
    /**
     * In case the PracticeRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PracticeRecordUpdateInput, PracticeRecordUncheckedUpdateInput>
  }

  /**
   * PracticeRecord delete
   */
  export type PracticeRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeRecord
     */
    select?: PracticeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeRecord
     */
    omit?: PracticeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeRecordInclude<ExtArgs> | null
    /**
     * Filter which PracticeRecord to delete.
     */
    where: PracticeRecordWhereUniqueInput
  }

  /**
   * PracticeRecord deleteMany
   */
  export type PracticeRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PracticeRecords to delete
     */
    where?: PracticeRecordWhereInput
    /**
     * Limit how many PracticeRecords to delete.
     */
    limit?: number
  }

  /**
   * PracticeRecord.practiceAnswers
   */
  export type PracticeRecord$practiceAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeAnswer
     */
    select?: PracticeAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeAnswer
     */
    omit?: PracticeAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeAnswerInclude<ExtArgs> | null
    where?: PracticeAnswerWhereInput
    orderBy?: PracticeAnswerOrderByWithRelationInput | PracticeAnswerOrderByWithRelationInput[]
    cursor?: PracticeAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PracticeAnswerScalarFieldEnum | PracticeAnswerScalarFieldEnum[]
  }

  /**
   * PracticeRecord without action
   */
  export type PracticeRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeRecord
     */
    select?: PracticeRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeRecord
     */
    omit?: PracticeRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeRecordInclude<ExtArgs> | null
  }


  /**
   * Model ChatSession
   */

  export type AggregateChatSession = {
    _count: ChatSessionCountAggregateOutputType | null
    _min: ChatSessionMinAggregateOutputType | null
    _max: ChatSessionMaxAggregateOutputType | null
  }

  export type ChatSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    questionId: string | null
    questionData: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    questionId: string | null
    questionData: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatSessionCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    questionId: number
    questionData: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChatSessionMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    questionId?: true
    questionData?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    questionId?: true
    questionData?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatSessionCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    questionId?: true
    questionData?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChatSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatSession to aggregate.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatSessions
    **/
    _count?: true | ChatSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatSessionMaxAggregateInputType
  }

  export type GetChatSessionAggregateType<T extends ChatSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateChatSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatSession[P]>
      : GetScalarType<T[P], AggregateChatSession[P]>
  }




  export type ChatSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatSessionWhereInput
    orderBy?: ChatSessionOrderByWithAggregationInput | ChatSessionOrderByWithAggregationInput[]
    by: ChatSessionScalarFieldEnum[] | ChatSessionScalarFieldEnum
    having?: ChatSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatSessionCountAggregateInputType | true
    _min?: ChatSessionMinAggregateInputType
    _max?: ChatSessionMaxAggregateInputType
  }

  export type ChatSessionGroupByOutputType = {
    id: string
    userId: string
    title: string | null
    questionId: string | null
    questionData: string | null
    createdAt: Date
    updatedAt: Date
    _count: ChatSessionCountAggregateOutputType | null
    _min: ChatSessionMinAggregateOutputType | null
    _max: ChatSessionMaxAggregateOutputType | null
  }

  type GetChatSessionGroupByPayload<T extends ChatSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatSessionGroupByOutputType[P]>
            : GetScalarType<T[P], ChatSessionGroupByOutputType[P]>
        }
      >
    >


  export type ChatSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    questionId?: boolean
    questionData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    messages?: boolean | ChatSession$messagesArgs<ExtArgs>
    _count?: boolean | ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    questionId?: boolean
    questionData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    questionId?: boolean
    questionData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    questionId?: boolean
    questionData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChatSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "questionId" | "questionData" | "createdAt" | "updatedAt", ExtArgs["result"]["chatSession"]>
  export type ChatSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    messages?: boolean | ChatSession$messagesArgs<ExtArgs>
    _count?: boolean | ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChatSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ChatSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      messages: Prisma.$ChatMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string | null
      questionId: string | null
      questionData: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chatSession"]>
    composites: {}
  }

  type ChatSessionGetPayload<S extends boolean | null | undefined | ChatSessionDefaultArgs> = $Result.GetResult<Prisma.$ChatSessionPayload, S>

  type ChatSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatSessionCountAggregateInputType | true
    }

  export interface ChatSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatSession'], meta: { name: 'ChatSession' } }
    /**
     * Find zero or one ChatSession that matches the filter.
     * @param {ChatSessionFindUniqueArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatSessionFindUniqueArgs>(args: SelectSubset<T, ChatSessionFindUniqueArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatSessionFindUniqueOrThrowArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindFirstArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatSessionFindFirstArgs>(args?: SelectSubset<T, ChatSessionFindFirstArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindFirstOrThrowArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatSessions
     * const chatSessions = await prisma.chatSession.findMany()
     * 
     * // Get first 10 ChatSessions
     * const chatSessions = await prisma.chatSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatSessionFindManyArgs>(args?: SelectSubset<T, ChatSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatSession.
     * @param {ChatSessionCreateArgs} args - Arguments to create a ChatSession.
     * @example
     * // Create one ChatSession
     * const ChatSession = await prisma.chatSession.create({
     *   data: {
     *     // ... data to create a ChatSession
     *   }
     * })
     * 
     */
    create<T extends ChatSessionCreateArgs>(args: SelectSubset<T, ChatSessionCreateArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatSessions.
     * @param {ChatSessionCreateManyArgs} args - Arguments to create many ChatSessions.
     * @example
     * // Create many ChatSessions
     * const chatSession = await prisma.chatSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatSessionCreateManyArgs>(args?: SelectSubset<T, ChatSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatSessions and returns the data saved in the database.
     * @param {ChatSessionCreateManyAndReturnArgs} args - Arguments to create many ChatSessions.
     * @example
     * // Create many ChatSessions
     * const chatSession = await prisma.chatSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatSessions and only return the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatSession.
     * @param {ChatSessionDeleteArgs} args - Arguments to delete one ChatSession.
     * @example
     * // Delete one ChatSession
     * const ChatSession = await prisma.chatSession.delete({
     *   where: {
     *     // ... filter to delete one ChatSession
     *   }
     * })
     * 
     */
    delete<T extends ChatSessionDeleteArgs>(args: SelectSubset<T, ChatSessionDeleteArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatSession.
     * @param {ChatSessionUpdateArgs} args - Arguments to update one ChatSession.
     * @example
     * // Update one ChatSession
     * const chatSession = await prisma.chatSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatSessionUpdateArgs>(args: SelectSubset<T, ChatSessionUpdateArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatSessions.
     * @param {ChatSessionDeleteManyArgs} args - Arguments to filter ChatSessions to delete.
     * @example
     * // Delete a few ChatSessions
     * const { count } = await prisma.chatSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatSessionDeleteManyArgs>(args?: SelectSubset<T, ChatSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatSessions
     * const chatSession = await prisma.chatSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatSessionUpdateManyArgs>(args: SelectSubset<T, ChatSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatSessions and returns the data updated in the database.
     * @param {ChatSessionUpdateManyAndReturnArgs} args - Arguments to update many ChatSessions.
     * @example
     * // Update many ChatSessions
     * const chatSession = await prisma.chatSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatSessions and only return the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatSession.
     * @param {ChatSessionUpsertArgs} args - Arguments to update or create a ChatSession.
     * @example
     * // Update or create a ChatSession
     * const chatSession = await prisma.chatSession.upsert({
     *   create: {
     *     // ... data to create a ChatSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatSession we want to update
     *   }
     * })
     */
    upsert<T extends ChatSessionUpsertArgs>(args: SelectSubset<T, ChatSessionUpsertArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionCountArgs} args - Arguments to filter ChatSessions to count.
     * @example
     * // Count the number of ChatSessions
     * const count = await prisma.chatSession.count({
     *   where: {
     *     // ... the filter for the ChatSessions we want to count
     *   }
     * })
    **/
    count<T extends ChatSessionCountArgs>(
      args?: Subset<T, ChatSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatSessionAggregateArgs>(args: Subset<T, ChatSessionAggregateArgs>): Prisma.PrismaPromise<GetChatSessionAggregateType<T>>

    /**
     * Group by ChatSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatSessionGroupByArgs['orderBy'] }
        : { orderBy?: ChatSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatSession model
   */
  readonly fields: ChatSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    messages<T extends ChatSession$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatSession$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatSession model
   */
  interface ChatSessionFieldRefs {
    readonly id: FieldRef<"ChatSession", 'String'>
    readonly userId: FieldRef<"ChatSession", 'String'>
    readonly title: FieldRef<"ChatSession", 'String'>
    readonly questionId: FieldRef<"ChatSession", 'String'>
    readonly questionData: FieldRef<"ChatSession", 'String'>
    readonly createdAt: FieldRef<"ChatSession", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatSession findUnique
   */
  export type ChatSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession findUniqueOrThrow
   */
  export type ChatSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession findFirst
   */
  export type ChatSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSessions.
     */
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession findFirstOrThrow
   */
  export type ChatSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSessions.
     */
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession findMany
   */
  export type ChatSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSessions to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession create
   */
  export type ChatSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatSession.
     */
    data: XOR<ChatSessionCreateInput, ChatSessionUncheckedCreateInput>
  }

  /**
   * ChatSession createMany
   */
  export type ChatSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatSessions.
     */
    data: ChatSessionCreateManyInput | ChatSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatSession createManyAndReturn
   */
  export type ChatSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * The data used to create many ChatSessions.
     */
    data: ChatSessionCreateManyInput | ChatSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatSession update
   */
  export type ChatSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatSession.
     */
    data: XOR<ChatSessionUpdateInput, ChatSessionUncheckedUpdateInput>
    /**
     * Choose, which ChatSession to update.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession updateMany
   */
  export type ChatSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatSessions.
     */
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyInput>
    /**
     * Filter which ChatSessions to update
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to update.
     */
    limit?: number
  }

  /**
   * ChatSession updateManyAndReturn
   */
  export type ChatSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * The data used to update ChatSessions.
     */
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyInput>
    /**
     * Filter which ChatSessions to update
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatSession upsert
   */
  export type ChatSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatSession to update in case it exists.
     */
    where: ChatSessionWhereUniqueInput
    /**
     * In case the ChatSession found by the `where` argument doesn't exist, create a new ChatSession with this data.
     */
    create: XOR<ChatSessionCreateInput, ChatSessionUncheckedCreateInput>
    /**
     * In case the ChatSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatSessionUpdateInput, ChatSessionUncheckedUpdateInput>
  }

  /**
   * ChatSession delete
   */
  export type ChatSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter which ChatSession to delete.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession deleteMany
   */
  export type ChatSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatSessions to delete
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to delete.
     */
    limit?: number
  }

  /**
   * ChatSession.messages
   */
  export type ChatSession$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatSession without action
   */
  export type ChatSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
  }


  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    role: string | null
    content: string | null
    createdAt: Date | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    role: string | null
    content: string | null
    createdAt: Date | null
  }

  export type ChatMessageCountAggregateOutputType = {
    id: number
    sessionId: number
    role: number
    content: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type ChatMessageMinAggregateInputType = {
    id?: true
    sessionId?: true
    role?: true
    content?: true
    createdAt?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    id?: true
    sessionId?: true
    role?: true
    content?: true
    createdAt?: true
  }

  export type ChatMessageCountAggregateInputType = {
    id?: true
    sessionId?: true
    role?: true
    content?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithAggregationInput | ChatMessageOrderByWithAggregationInput[]
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }

  export type ChatMessageGroupByOutputType = {
    id: string
    sessionId: string
    role: string
    content: string
    metadata: JsonValue | null
    createdAt: Date
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    role?: boolean
    content?: boolean
    metadata?: boolean
    createdAt?: boolean
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    role?: boolean
    content?: boolean
    metadata?: boolean
    createdAt?: boolean
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    role?: boolean
    content?: boolean
    metadata?: boolean
    createdAt?: boolean
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectScalar = {
    id?: boolean
    sessionId?: boolean
    role?: boolean
    content?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type ChatMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "role" | "content" | "metadata" | "createdAt", ExtArgs["result"]["chatMessage"]>
  export type ChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }

  export type $ChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessage"
    objects: {
      session: Prisma.$ChatSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      role: string
      content: string
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["chatMessage"]>
    composites: {}
  }

  type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagePayload, S>

  type ChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatMessageCountAggregateInputType | true
    }

  export interface ChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatMessageFindManyArgs>(args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
     */
    create<T extends ChatMessageCreateArgs>(args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatMessageCreateManyArgs>(args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatMessages and returns the data saved in the database.
     * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ChatMessageDeleteArgs>(args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatMessageUpdateArgs>(args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages and returns the data updated in the database.
     * @param {ChatMessageUpdateManyAndReturnArgs} args - Arguments to update many ChatMessages.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessage model
   */
  readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends ChatSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatSessionDefaultArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatMessage model
   */
  interface ChatMessageFieldRefs {
    readonly id: FieldRef<"ChatMessage", 'String'>
    readonly sessionId: FieldRef<"ChatMessage", 'String'>
    readonly role: FieldRef<"ChatMessage", 'String'>
    readonly content: FieldRef<"ChatMessage", 'String'>
    readonly metadata: FieldRef<"ChatMessage", 'Json'>
    readonly createdAt: FieldRef<"ChatMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatMessage createManyAndReturn
   */
  export type ChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
  }

  /**
   * ChatMessage updateManyAndReturn
   */
  export type ChatMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to delete.
     */
    limit?: number
  }

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model VocabularyItem
   */

  export type AggregateVocabularyItem = {
    _count: VocabularyItemCountAggregateOutputType | null
    _avg: VocabularyItemAvgAggregateOutputType | null
    _sum: VocabularyItemSumAggregateOutputType | null
    _min: VocabularyItemMinAggregateOutputType | null
    _max: VocabularyItemMaxAggregateOutputType | null
  }

  export type VocabularyItemAvgAggregateOutputType = {
    reviewCount: number | null
    correctCount: number | null
    incorrectCount: number | null
    easeFactor: number | null
    interval: number | null
  }

  export type VocabularyItemSumAggregateOutputType = {
    reviewCount: number | null
    correctCount: number | null
    incorrectCount: number | null
    easeFactor: number | null
    interval: number | null
  }

  export type VocabularyItemMinAggregateOutputType = {
    id: string | null
    userId: string | null
    word: string | null
    definition: string | null
    phonetic: string | null
    audioUrl: string | null
    context: string | null
    language: string | null
    reading: string | null
    commonality: boolean | null
    sourceType: string | null
    sourceId: string | null
    notes: string | null
    mastered: boolean | null
    definitionLoading: boolean | null
    definitionError: boolean | null
    nextReviewDate: Date | null
    reviewCount: number | null
    correctCount: number | null
    incorrectCount: number | null
    easeFactor: number | null
    interval: number | null
    addedAt: Date | null
    lastReviewedAt: Date | null
    updatedAt: Date | null
  }

  export type VocabularyItemMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    word: string | null
    definition: string | null
    phonetic: string | null
    audioUrl: string | null
    context: string | null
    language: string | null
    reading: string | null
    commonality: boolean | null
    sourceType: string | null
    sourceId: string | null
    notes: string | null
    mastered: boolean | null
    definitionLoading: boolean | null
    definitionError: boolean | null
    nextReviewDate: Date | null
    reviewCount: number | null
    correctCount: number | null
    incorrectCount: number | null
    easeFactor: number | null
    interval: number | null
    addedAt: Date | null
    lastReviewedAt: Date | null
    updatedAt: Date | null
  }

  export type VocabularyItemCountAggregateOutputType = {
    id: number
    userId: number
    word: number
    definition: number
    phonetic: number
    audioUrl: number
    context: number
    meanings: number
    language: number
    reading: number
    jlpt: number
    commonality: number
    sourceType: number
    sourceId: number
    notes: number
    mastered: number
    tags: number
    definitionLoading: number
    definitionError: number
    nextReviewDate: number
    reviewCount: number
    correctCount: number
    incorrectCount: number
    easeFactor: number
    interval: number
    addedAt: number
    lastReviewedAt: number
    updatedAt: number
    _all: number
  }


  export type VocabularyItemAvgAggregateInputType = {
    reviewCount?: true
    correctCount?: true
    incorrectCount?: true
    easeFactor?: true
    interval?: true
  }

  export type VocabularyItemSumAggregateInputType = {
    reviewCount?: true
    correctCount?: true
    incorrectCount?: true
    easeFactor?: true
    interval?: true
  }

  export type VocabularyItemMinAggregateInputType = {
    id?: true
    userId?: true
    word?: true
    definition?: true
    phonetic?: true
    audioUrl?: true
    context?: true
    language?: true
    reading?: true
    commonality?: true
    sourceType?: true
    sourceId?: true
    notes?: true
    mastered?: true
    definitionLoading?: true
    definitionError?: true
    nextReviewDate?: true
    reviewCount?: true
    correctCount?: true
    incorrectCount?: true
    easeFactor?: true
    interval?: true
    addedAt?: true
    lastReviewedAt?: true
    updatedAt?: true
  }

  export type VocabularyItemMaxAggregateInputType = {
    id?: true
    userId?: true
    word?: true
    definition?: true
    phonetic?: true
    audioUrl?: true
    context?: true
    language?: true
    reading?: true
    commonality?: true
    sourceType?: true
    sourceId?: true
    notes?: true
    mastered?: true
    definitionLoading?: true
    definitionError?: true
    nextReviewDate?: true
    reviewCount?: true
    correctCount?: true
    incorrectCount?: true
    easeFactor?: true
    interval?: true
    addedAt?: true
    lastReviewedAt?: true
    updatedAt?: true
  }

  export type VocabularyItemCountAggregateInputType = {
    id?: true
    userId?: true
    word?: true
    definition?: true
    phonetic?: true
    audioUrl?: true
    context?: true
    meanings?: true
    language?: true
    reading?: true
    jlpt?: true
    commonality?: true
    sourceType?: true
    sourceId?: true
    notes?: true
    mastered?: true
    tags?: true
    definitionLoading?: true
    definitionError?: true
    nextReviewDate?: true
    reviewCount?: true
    correctCount?: true
    incorrectCount?: true
    easeFactor?: true
    interval?: true
    addedAt?: true
    lastReviewedAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VocabularyItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VocabularyItem to aggregate.
     */
    where?: VocabularyItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VocabularyItems to fetch.
     */
    orderBy?: VocabularyItemOrderByWithRelationInput | VocabularyItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VocabularyItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VocabularyItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VocabularyItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VocabularyItems
    **/
    _count?: true | VocabularyItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VocabularyItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VocabularyItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VocabularyItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VocabularyItemMaxAggregateInputType
  }

  export type GetVocabularyItemAggregateType<T extends VocabularyItemAggregateArgs> = {
        [P in keyof T & keyof AggregateVocabularyItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVocabularyItem[P]>
      : GetScalarType<T[P], AggregateVocabularyItem[P]>
  }




  export type VocabularyItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VocabularyItemWhereInput
    orderBy?: VocabularyItemOrderByWithAggregationInput | VocabularyItemOrderByWithAggregationInput[]
    by: VocabularyItemScalarFieldEnum[] | VocabularyItemScalarFieldEnum
    having?: VocabularyItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VocabularyItemCountAggregateInputType | true
    _avg?: VocabularyItemAvgAggregateInputType
    _sum?: VocabularyItemSumAggregateInputType
    _min?: VocabularyItemMinAggregateInputType
    _max?: VocabularyItemMaxAggregateInputType
  }

  export type VocabularyItemGroupByOutputType = {
    id: string
    userId: string
    word: string
    definition: string | null
    phonetic: string | null
    audioUrl: string | null
    context: string | null
    meanings: JsonValue | null
    language: string
    reading: string | null
    jlpt: string[]
    commonality: boolean | null
    sourceType: string | null
    sourceId: string | null
    notes: string | null
    mastered: boolean
    tags: string[]
    definitionLoading: boolean
    definitionError: boolean
    nextReviewDate: Date
    reviewCount: number
    correctCount: number
    incorrectCount: number
    easeFactor: number
    interval: number
    addedAt: Date
    lastReviewedAt: Date | null
    updatedAt: Date
    _count: VocabularyItemCountAggregateOutputType | null
    _avg: VocabularyItemAvgAggregateOutputType | null
    _sum: VocabularyItemSumAggregateOutputType | null
    _min: VocabularyItemMinAggregateOutputType | null
    _max: VocabularyItemMaxAggregateOutputType | null
  }

  type GetVocabularyItemGroupByPayload<T extends VocabularyItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VocabularyItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VocabularyItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VocabularyItemGroupByOutputType[P]>
            : GetScalarType<T[P], VocabularyItemGroupByOutputType[P]>
        }
      >
    >


  export type VocabularyItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    word?: boolean
    definition?: boolean
    phonetic?: boolean
    audioUrl?: boolean
    context?: boolean
    meanings?: boolean
    language?: boolean
    reading?: boolean
    jlpt?: boolean
    commonality?: boolean
    sourceType?: boolean
    sourceId?: boolean
    notes?: boolean
    mastered?: boolean
    tags?: boolean
    definitionLoading?: boolean
    definitionError?: boolean
    nextReviewDate?: boolean
    reviewCount?: boolean
    correctCount?: boolean
    incorrectCount?: boolean
    easeFactor?: boolean
    interval?: boolean
    addedAt?: boolean
    lastReviewedAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vocabularyItem"]>

  export type VocabularyItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    word?: boolean
    definition?: boolean
    phonetic?: boolean
    audioUrl?: boolean
    context?: boolean
    meanings?: boolean
    language?: boolean
    reading?: boolean
    jlpt?: boolean
    commonality?: boolean
    sourceType?: boolean
    sourceId?: boolean
    notes?: boolean
    mastered?: boolean
    tags?: boolean
    definitionLoading?: boolean
    definitionError?: boolean
    nextReviewDate?: boolean
    reviewCount?: boolean
    correctCount?: boolean
    incorrectCount?: boolean
    easeFactor?: boolean
    interval?: boolean
    addedAt?: boolean
    lastReviewedAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vocabularyItem"]>

  export type VocabularyItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    word?: boolean
    definition?: boolean
    phonetic?: boolean
    audioUrl?: boolean
    context?: boolean
    meanings?: boolean
    language?: boolean
    reading?: boolean
    jlpt?: boolean
    commonality?: boolean
    sourceType?: boolean
    sourceId?: boolean
    notes?: boolean
    mastered?: boolean
    tags?: boolean
    definitionLoading?: boolean
    definitionError?: boolean
    nextReviewDate?: boolean
    reviewCount?: boolean
    correctCount?: boolean
    incorrectCount?: boolean
    easeFactor?: boolean
    interval?: boolean
    addedAt?: boolean
    lastReviewedAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vocabularyItem"]>

  export type VocabularyItemSelectScalar = {
    id?: boolean
    userId?: boolean
    word?: boolean
    definition?: boolean
    phonetic?: boolean
    audioUrl?: boolean
    context?: boolean
    meanings?: boolean
    language?: boolean
    reading?: boolean
    jlpt?: boolean
    commonality?: boolean
    sourceType?: boolean
    sourceId?: boolean
    notes?: boolean
    mastered?: boolean
    tags?: boolean
    definitionLoading?: boolean
    definitionError?: boolean
    nextReviewDate?: boolean
    reviewCount?: boolean
    correctCount?: boolean
    incorrectCount?: boolean
    easeFactor?: boolean
    interval?: boolean
    addedAt?: boolean
    lastReviewedAt?: boolean
    updatedAt?: boolean
  }

  export type VocabularyItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "word" | "definition" | "phonetic" | "audioUrl" | "context" | "meanings" | "language" | "reading" | "jlpt" | "commonality" | "sourceType" | "sourceId" | "notes" | "mastered" | "tags" | "definitionLoading" | "definitionError" | "nextReviewDate" | "reviewCount" | "correctCount" | "incorrectCount" | "easeFactor" | "interval" | "addedAt" | "lastReviewedAt" | "updatedAt", ExtArgs["result"]["vocabularyItem"]>
  export type VocabularyItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VocabularyItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VocabularyItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $VocabularyItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VocabularyItem"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      word: string
      definition: string | null
      phonetic: string | null
      audioUrl: string | null
      context: string | null
      meanings: Prisma.JsonValue | null
      language: string
      reading: string | null
      jlpt: string[]
      commonality: boolean | null
      sourceType: string | null
      sourceId: string | null
      notes: string | null
      mastered: boolean
      tags: string[]
      definitionLoading: boolean
      definitionError: boolean
      nextReviewDate: Date
      reviewCount: number
      correctCount: number
      incorrectCount: number
      easeFactor: number
      interval: number
      addedAt: Date
      lastReviewedAt: Date | null
      updatedAt: Date
    }, ExtArgs["result"]["vocabularyItem"]>
    composites: {}
  }

  type VocabularyItemGetPayload<S extends boolean | null | undefined | VocabularyItemDefaultArgs> = $Result.GetResult<Prisma.$VocabularyItemPayload, S>

  type VocabularyItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VocabularyItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VocabularyItemCountAggregateInputType | true
    }

  export interface VocabularyItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VocabularyItem'], meta: { name: 'VocabularyItem' } }
    /**
     * Find zero or one VocabularyItem that matches the filter.
     * @param {VocabularyItemFindUniqueArgs} args - Arguments to find a VocabularyItem
     * @example
     * // Get one VocabularyItem
     * const vocabularyItem = await prisma.vocabularyItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VocabularyItemFindUniqueArgs>(args: SelectSubset<T, VocabularyItemFindUniqueArgs<ExtArgs>>): Prisma__VocabularyItemClient<$Result.GetResult<Prisma.$VocabularyItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VocabularyItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VocabularyItemFindUniqueOrThrowArgs} args - Arguments to find a VocabularyItem
     * @example
     * // Get one VocabularyItem
     * const vocabularyItem = await prisma.vocabularyItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VocabularyItemFindUniqueOrThrowArgs>(args: SelectSubset<T, VocabularyItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VocabularyItemClient<$Result.GetResult<Prisma.$VocabularyItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VocabularyItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VocabularyItemFindFirstArgs} args - Arguments to find a VocabularyItem
     * @example
     * // Get one VocabularyItem
     * const vocabularyItem = await prisma.vocabularyItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VocabularyItemFindFirstArgs>(args?: SelectSubset<T, VocabularyItemFindFirstArgs<ExtArgs>>): Prisma__VocabularyItemClient<$Result.GetResult<Prisma.$VocabularyItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VocabularyItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VocabularyItemFindFirstOrThrowArgs} args - Arguments to find a VocabularyItem
     * @example
     * // Get one VocabularyItem
     * const vocabularyItem = await prisma.vocabularyItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VocabularyItemFindFirstOrThrowArgs>(args?: SelectSubset<T, VocabularyItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__VocabularyItemClient<$Result.GetResult<Prisma.$VocabularyItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VocabularyItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VocabularyItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VocabularyItems
     * const vocabularyItems = await prisma.vocabularyItem.findMany()
     * 
     * // Get first 10 VocabularyItems
     * const vocabularyItems = await prisma.vocabularyItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vocabularyItemWithIdOnly = await prisma.vocabularyItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VocabularyItemFindManyArgs>(args?: SelectSubset<T, VocabularyItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VocabularyItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VocabularyItem.
     * @param {VocabularyItemCreateArgs} args - Arguments to create a VocabularyItem.
     * @example
     * // Create one VocabularyItem
     * const VocabularyItem = await prisma.vocabularyItem.create({
     *   data: {
     *     // ... data to create a VocabularyItem
     *   }
     * })
     * 
     */
    create<T extends VocabularyItemCreateArgs>(args: SelectSubset<T, VocabularyItemCreateArgs<ExtArgs>>): Prisma__VocabularyItemClient<$Result.GetResult<Prisma.$VocabularyItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VocabularyItems.
     * @param {VocabularyItemCreateManyArgs} args - Arguments to create many VocabularyItems.
     * @example
     * // Create many VocabularyItems
     * const vocabularyItem = await prisma.vocabularyItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VocabularyItemCreateManyArgs>(args?: SelectSubset<T, VocabularyItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VocabularyItems and returns the data saved in the database.
     * @param {VocabularyItemCreateManyAndReturnArgs} args - Arguments to create many VocabularyItems.
     * @example
     * // Create many VocabularyItems
     * const vocabularyItem = await prisma.vocabularyItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VocabularyItems and only return the `id`
     * const vocabularyItemWithIdOnly = await prisma.vocabularyItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VocabularyItemCreateManyAndReturnArgs>(args?: SelectSubset<T, VocabularyItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VocabularyItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VocabularyItem.
     * @param {VocabularyItemDeleteArgs} args - Arguments to delete one VocabularyItem.
     * @example
     * // Delete one VocabularyItem
     * const VocabularyItem = await prisma.vocabularyItem.delete({
     *   where: {
     *     // ... filter to delete one VocabularyItem
     *   }
     * })
     * 
     */
    delete<T extends VocabularyItemDeleteArgs>(args: SelectSubset<T, VocabularyItemDeleteArgs<ExtArgs>>): Prisma__VocabularyItemClient<$Result.GetResult<Prisma.$VocabularyItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VocabularyItem.
     * @param {VocabularyItemUpdateArgs} args - Arguments to update one VocabularyItem.
     * @example
     * // Update one VocabularyItem
     * const vocabularyItem = await prisma.vocabularyItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VocabularyItemUpdateArgs>(args: SelectSubset<T, VocabularyItemUpdateArgs<ExtArgs>>): Prisma__VocabularyItemClient<$Result.GetResult<Prisma.$VocabularyItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VocabularyItems.
     * @param {VocabularyItemDeleteManyArgs} args - Arguments to filter VocabularyItems to delete.
     * @example
     * // Delete a few VocabularyItems
     * const { count } = await prisma.vocabularyItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VocabularyItemDeleteManyArgs>(args?: SelectSubset<T, VocabularyItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VocabularyItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VocabularyItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VocabularyItems
     * const vocabularyItem = await prisma.vocabularyItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VocabularyItemUpdateManyArgs>(args: SelectSubset<T, VocabularyItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VocabularyItems and returns the data updated in the database.
     * @param {VocabularyItemUpdateManyAndReturnArgs} args - Arguments to update many VocabularyItems.
     * @example
     * // Update many VocabularyItems
     * const vocabularyItem = await prisma.vocabularyItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VocabularyItems and only return the `id`
     * const vocabularyItemWithIdOnly = await prisma.vocabularyItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VocabularyItemUpdateManyAndReturnArgs>(args: SelectSubset<T, VocabularyItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VocabularyItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VocabularyItem.
     * @param {VocabularyItemUpsertArgs} args - Arguments to update or create a VocabularyItem.
     * @example
     * // Update or create a VocabularyItem
     * const vocabularyItem = await prisma.vocabularyItem.upsert({
     *   create: {
     *     // ... data to create a VocabularyItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VocabularyItem we want to update
     *   }
     * })
     */
    upsert<T extends VocabularyItemUpsertArgs>(args: SelectSubset<T, VocabularyItemUpsertArgs<ExtArgs>>): Prisma__VocabularyItemClient<$Result.GetResult<Prisma.$VocabularyItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VocabularyItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VocabularyItemCountArgs} args - Arguments to filter VocabularyItems to count.
     * @example
     * // Count the number of VocabularyItems
     * const count = await prisma.vocabularyItem.count({
     *   where: {
     *     // ... the filter for the VocabularyItems we want to count
     *   }
     * })
    **/
    count<T extends VocabularyItemCountArgs>(
      args?: Subset<T, VocabularyItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VocabularyItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VocabularyItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VocabularyItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VocabularyItemAggregateArgs>(args: Subset<T, VocabularyItemAggregateArgs>): Prisma.PrismaPromise<GetVocabularyItemAggregateType<T>>

    /**
     * Group by VocabularyItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VocabularyItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VocabularyItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VocabularyItemGroupByArgs['orderBy'] }
        : { orderBy?: VocabularyItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VocabularyItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVocabularyItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VocabularyItem model
   */
  readonly fields: VocabularyItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VocabularyItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VocabularyItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VocabularyItem model
   */
  interface VocabularyItemFieldRefs {
    readonly id: FieldRef<"VocabularyItem", 'String'>
    readonly userId: FieldRef<"VocabularyItem", 'String'>
    readonly word: FieldRef<"VocabularyItem", 'String'>
    readonly definition: FieldRef<"VocabularyItem", 'String'>
    readonly phonetic: FieldRef<"VocabularyItem", 'String'>
    readonly audioUrl: FieldRef<"VocabularyItem", 'String'>
    readonly context: FieldRef<"VocabularyItem", 'String'>
    readonly meanings: FieldRef<"VocabularyItem", 'Json'>
    readonly language: FieldRef<"VocabularyItem", 'String'>
    readonly reading: FieldRef<"VocabularyItem", 'String'>
    readonly jlpt: FieldRef<"VocabularyItem", 'String[]'>
    readonly commonality: FieldRef<"VocabularyItem", 'Boolean'>
    readonly sourceType: FieldRef<"VocabularyItem", 'String'>
    readonly sourceId: FieldRef<"VocabularyItem", 'String'>
    readonly notes: FieldRef<"VocabularyItem", 'String'>
    readonly mastered: FieldRef<"VocabularyItem", 'Boolean'>
    readonly tags: FieldRef<"VocabularyItem", 'String[]'>
    readonly definitionLoading: FieldRef<"VocabularyItem", 'Boolean'>
    readonly definitionError: FieldRef<"VocabularyItem", 'Boolean'>
    readonly nextReviewDate: FieldRef<"VocabularyItem", 'DateTime'>
    readonly reviewCount: FieldRef<"VocabularyItem", 'Int'>
    readonly correctCount: FieldRef<"VocabularyItem", 'Int'>
    readonly incorrectCount: FieldRef<"VocabularyItem", 'Int'>
    readonly easeFactor: FieldRef<"VocabularyItem", 'Float'>
    readonly interval: FieldRef<"VocabularyItem", 'Int'>
    readonly addedAt: FieldRef<"VocabularyItem", 'DateTime'>
    readonly lastReviewedAt: FieldRef<"VocabularyItem", 'DateTime'>
    readonly updatedAt: FieldRef<"VocabularyItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VocabularyItem findUnique
   */
  export type VocabularyItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VocabularyItem
     */
    select?: VocabularyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VocabularyItem
     */
    omit?: VocabularyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VocabularyItemInclude<ExtArgs> | null
    /**
     * Filter, which VocabularyItem to fetch.
     */
    where: VocabularyItemWhereUniqueInput
  }

  /**
   * VocabularyItem findUniqueOrThrow
   */
  export type VocabularyItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VocabularyItem
     */
    select?: VocabularyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VocabularyItem
     */
    omit?: VocabularyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VocabularyItemInclude<ExtArgs> | null
    /**
     * Filter, which VocabularyItem to fetch.
     */
    where: VocabularyItemWhereUniqueInput
  }

  /**
   * VocabularyItem findFirst
   */
  export type VocabularyItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VocabularyItem
     */
    select?: VocabularyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VocabularyItem
     */
    omit?: VocabularyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VocabularyItemInclude<ExtArgs> | null
    /**
     * Filter, which VocabularyItem to fetch.
     */
    where?: VocabularyItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VocabularyItems to fetch.
     */
    orderBy?: VocabularyItemOrderByWithRelationInput | VocabularyItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VocabularyItems.
     */
    cursor?: VocabularyItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VocabularyItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VocabularyItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VocabularyItems.
     */
    distinct?: VocabularyItemScalarFieldEnum | VocabularyItemScalarFieldEnum[]
  }

  /**
   * VocabularyItem findFirstOrThrow
   */
  export type VocabularyItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VocabularyItem
     */
    select?: VocabularyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VocabularyItem
     */
    omit?: VocabularyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VocabularyItemInclude<ExtArgs> | null
    /**
     * Filter, which VocabularyItem to fetch.
     */
    where?: VocabularyItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VocabularyItems to fetch.
     */
    orderBy?: VocabularyItemOrderByWithRelationInput | VocabularyItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VocabularyItems.
     */
    cursor?: VocabularyItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VocabularyItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VocabularyItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VocabularyItems.
     */
    distinct?: VocabularyItemScalarFieldEnum | VocabularyItemScalarFieldEnum[]
  }

  /**
   * VocabularyItem findMany
   */
  export type VocabularyItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VocabularyItem
     */
    select?: VocabularyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VocabularyItem
     */
    omit?: VocabularyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VocabularyItemInclude<ExtArgs> | null
    /**
     * Filter, which VocabularyItems to fetch.
     */
    where?: VocabularyItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VocabularyItems to fetch.
     */
    orderBy?: VocabularyItemOrderByWithRelationInput | VocabularyItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VocabularyItems.
     */
    cursor?: VocabularyItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VocabularyItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VocabularyItems.
     */
    skip?: number
    distinct?: VocabularyItemScalarFieldEnum | VocabularyItemScalarFieldEnum[]
  }

  /**
   * VocabularyItem create
   */
  export type VocabularyItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VocabularyItem
     */
    select?: VocabularyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VocabularyItem
     */
    omit?: VocabularyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VocabularyItemInclude<ExtArgs> | null
    /**
     * The data needed to create a VocabularyItem.
     */
    data: XOR<VocabularyItemCreateInput, VocabularyItemUncheckedCreateInput>
  }

  /**
   * VocabularyItem createMany
   */
  export type VocabularyItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VocabularyItems.
     */
    data: VocabularyItemCreateManyInput | VocabularyItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VocabularyItem createManyAndReturn
   */
  export type VocabularyItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VocabularyItem
     */
    select?: VocabularyItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VocabularyItem
     */
    omit?: VocabularyItemOmit<ExtArgs> | null
    /**
     * The data used to create many VocabularyItems.
     */
    data: VocabularyItemCreateManyInput | VocabularyItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VocabularyItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VocabularyItem update
   */
  export type VocabularyItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VocabularyItem
     */
    select?: VocabularyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VocabularyItem
     */
    omit?: VocabularyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VocabularyItemInclude<ExtArgs> | null
    /**
     * The data needed to update a VocabularyItem.
     */
    data: XOR<VocabularyItemUpdateInput, VocabularyItemUncheckedUpdateInput>
    /**
     * Choose, which VocabularyItem to update.
     */
    where: VocabularyItemWhereUniqueInput
  }

  /**
   * VocabularyItem updateMany
   */
  export type VocabularyItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VocabularyItems.
     */
    data: XOR<VocabularyItemUpdateManyMutationInput, VocabularyItemUncheckedUpdateManyInput>
    /**
     * Filter which VocabularyItems to update
     */
    where?: VocabularyItemWhereInput
    /**
     * Limit how many VocabularyItems to update.
     */
    limit?: number
  }

  /**
   * VocabularyItem updateManyAndReturn
   */
  export type VocabularyItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VocabularyItem
     */
    select?: VocabularyItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VocabularyItem
     */
    omit?: VocabularyItemOmit<ExtArgs> | null
    /**
     * The data used to update VocabularyItems.
     */
    data: XOR<VocabularyItemUpdateManyMutationInput, VocabularyItemUncheckedUpdateManyInput>
    /**
     * Filter which VocabularyItems to update
     */
    where?: VocabularyItemWhereInput
    /**
     * Limit how many VocabularyItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VocabularyItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VocabularyItem upsert
   */
  export type VocabularyItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VocabularyItem
     */
    select?: VocabularyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VocabularyItem
     */
    omit?: VocabularyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VocabularyItemInclude<ExtArgs> | null
    /**
     * The filter to search for the VocabularyItem to update in case it exists.
     */
    where: VocabularyItemWhereUniqueInput
    /**
     * In case the VocabularyItem found by the `where` argument doesn't exist, create a new VocabularyItem with this data.
     */
    create: XOR<VocabularyItemCreateInput, VocabularyItemUncheckedCreateInput>
    /**
     * In case the VocabularyItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VocabularyItemUpdateInput, VocabularyItemUncheckedUpdateInput>
  }

  /**
   * VocabularyItem delete
   */
  export type VocabularyItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VocabularyItem
     */
    select?: VocabularyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VocabularyItem
     */
    omit?: VocabularyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VocabularyItemInclude<ExtArgs> | null
    /**
     * Filter which VocabularyItem to delete.
     */
    where: VocabularyItemWhereUniqueInput
  }

  /**
   * VocabularyItem deleteMany
   */
  export type VocabularyItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VocabularyItems to delete
     */
    where?: VocabularyItemWhereInput
    /**
     * Limit how many VocabularyItems to delete.
     */
    limit?: number
  }

  /**
   * VocabularyItem without action
   */
  export type VocabularyItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VocabularyItem
     */
    select?: VocabularyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VocabularyItem
     */
    omit?: VocabularyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VocabularyItemInclude<ExtArgs> | null
  }


  /**
   * Model StudyProgress
   */

  export type AggregateStudyProgress = {
    _count: StudyProgressCountAggregateOutputType | null
    _avg: StudyProgressAvgAggregateOutputType | null
    _sum: StudyProgressSumAggregateOutputType | null
    _min: StudyProgressMinAggregateOutputType | null
    _max: StudyProgressMaxAggregateOutputType | null
  }

  export type StudyProgressAvgAggregateOutputType = {
    totalQuestions: number | null
    correctAnswers: number | null
    averageTime: number | null
    bestScore: number | null
  }

  export type StudyProgressSumAggregateOutputType = {
    totalQuestions: number | null
    correctAnswers: number | null
    averageTime: number | null
    bestScore: number | null
  }

  export type StudyProgressMinAggregateOutputType = {
    id: string | null
    userId: string | null
    questionType: $Enums.QuestionType | null
    difficulty: $Enums.DifficultyLevel | null
    totalQuestions: number | null
    correctAnswers: number | null
    averageTime: number | null
    bestScore: number | null
    lastPracticeAt: Date | null
    updatedAt: Date | null
  }

  export type StudyProgressMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    questionType: $Enums.QuestionType | null
    difficulty: $Enums.DifficultyLevel | null
    totalQuestions: number | null
    correctAnswers: number | null
    averageTime: number | null
    bestScore: number | null
    lastPracticeAt: Date | null
    updatedAt: Date | null
  }

  export type StudyProgressCountAggregateOutputType = {
    id: number
    userId: number
    questionType: number
    difficulty: number
    totalQuestions: number
    correctAnswers: number
    averageTime: number
    bestScore: number
    lastPracticeAt: number
    updatedAt: number
    _all: number
  }


  export type StudyProgressAvgAggregateInputType = {
    totalQuestions?: true
    correctAnswers?: true
    averageTime?: true
    bestScore?: true
  }

  export type StudyProgressSumAggregateInputType = {
    totalQuestions?: true
    correctAnswers?: true
    averageTime?: true
    bestScore?: true
  }

  export type StudyProgressMinAggregateInputType = {
    id?: true
    userId?: true
    questionType?: true
    difficulty?: true
    totalQuestions?: true
    correctAnswers?: true
    averageTime?: true
    bestScore?: true
    lastPracticeAt?: true
    updatedAt?: true
  }

  export type StudyProgressMaxAggregateInputType = {
    id?: true
    userId?: true
    questionType?: true
    difficulty?: true
    totalQuestions?: true
    correctAnswers?: true
    averageTime?: true
    bestScore?: true
    lastPracticeAt?: true
    updatedAt?: true
  }

  export type StudyProgressCountAggregateInputType = {
    id?: true
    userId?: true
    questionType?: true
    difficulty?: true
    totalQuestions?: true
    correctAnswers?: true
    averageTime?: true
    bestScore?: true
    lastPracticeAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StudyProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudyProgress to aggregate.
     */
    where?: StudyProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyProgresses to fetch.
     */
    orderBy?: StudyProgressOrderByWithRelationInput | StudyProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudyProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudyProgresses
    **/
    _count?: true | StudyProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudyProgressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudyProgressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudyProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudyProgressMaxAggregateInputType
  }

  export type GetStudyProgressAggregateType<T extends StudyProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateStudyProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudyProgress[P]>
      : GetScalarType<T[P], AggregateStudyProgress[P]>
  }




  export type StudyProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyProgressWhereInput
    orderBy?: StudyProgressOrderByWithAggregationInput | StudyProgressOrderByWithAggregationInput[]
    by: StudyProgressScalarFieldEnum[] | StudyProgressScalarFieldEnum
    having?: StudyProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudyProgressCountAggregateInputType | true
    _avg?: StudyProgressAvgAggregateInputType
    _sum?: StudyProgressSumAggregateInputType
    _min?: StudyProgressMinAggregateInputType
    _max?: StudyProgressMaxAggregateInputType
  }

  export type StudyProgressGroupByOutputType = {
    id: string
    userId: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    totalQuestions: number
    correctAnswers: number
    averageTime: number
    bestScore: number | null
    lastPracticeAt: Date | null
    updatedAt: Date
    _count: StudyProgressCountAggregateOutputType | null
    _avg: StudyProgressAvgAggregateOutputType | null
    _sum: StudyProgressSumAggregateOutputType | null
    _min: StudyProgressMinAggregateOutputType | null
    _max: StudyProgressMaxAggregateOutputType | null
  }

  type GetStudyProgressGroupByPayload<T extends StudyProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudyProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudyProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudyProgressGroupByOutputType[P]>
            : GetScalarType<T[P], StudyProgressGroupByOutputType[P]>
        }
      >
    >


  export type StudyProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionType?: boolean
    difficulty?: boolean
    totalQuestions?: boolean
    correctAnswers?: boolean
    averageTime?: boolean
    bestScore?: boolean
    lastPracticeAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyProgress"]>

  export type StudyProgressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionType?: boolean
    difficulty?: boolean
    totalQuestions?: boolean
    correctAnswers?: boolean
    averageTime?: boolean
    bestScore?: boolean
    lastPracticeAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyProgress"]>

  export type StudyProgressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionType?: boolean
    difficulty?: boolean
    totalQuestions?: boolean
    correctAnswers?: boolean
    averageTime?: boolean
    bestScore?: boolean
    lastPracticeAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyProgress"]>

  export type StudyProgressSelectScalar = {
    id?: boolean
    userId?: boolean
    questionType?: boolean
    difficulty?: boolean
    totalQuestions?: boolean
    correctAnswers?: boolean
    averageTime?: boolean
    bestScore?: boolean
    lastPracticeAt?: boolean
    updatedAt?: boolean
  }

  export type StudyProgressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "questionType" | "difficulty" | "totalQuestions" | "correctAnswers" | "averageTime" | "bestScore" | "lastPracticeAt" | "updatedAt", ExtArgs["result"]["studyProgress"]>
  export type StudyProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StudyProgressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StudyProgressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StudyProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudyProgress"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      questionType: $Enums.QuestionType
      difficulty: $Enums.DifficultyLevel
      totalQuestions: number
      correctAnswers: number
      averageTime: number
      bestScore: number | null
      lastPracticeAt: Date | null
      updatedAt: Date
    }, ExtArgs["result"]["studyProgress"]>
    composites: {}
  }

  type StudyProgressGetPayload<S extends boolean | null | undefined | StudyProgressDefaultArgs> = $Result.GetResult<Prisma.$StudyProgressPayload, S>

  type StudyProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudyProgressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudyProgressCountAggregateInputType | true
    }

  export interface StudyProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudyProgress'], meta: { name: 'StudyProgress' } }
    /**
     * Find zero or one StudyProgress that matches the filter.
     * @param {StudyProgressFindUniqueArgs} args - Arguments to find a StudyProgress
     * @example
     * // Get one StudyProgress
     * const studyProgress = await prisma.studyProgress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudyProgressFindUniqueArgs>(args: SelectSubset<T, StudyProgressFindUniqueArgs<ExtArgs>>): Prisma__StudyProgressClient<$Result.GetResult<Prisma.$StudyProgressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudyProgress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudyProgressFindUniqueOrThrowArgs} args - Arguments to find a StudyProgress
     * @example
     * // Get one StudyProgress
     * const studyProgress = await prisma.studyProgress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudyProgressFindUniqueOrThrowArgs>(args: SelectSubset<T, StudyProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudyProgressClient<$Result.GetResult<Prisma.$StudyProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudyProgress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyProgressFindFirstArgs} args - Arguments to find a StudyProgress
     * @example
     * // Get one StudyProgress
     * const studyProgress = await prisma.studyProgress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudyProgressFindFirstArgs>(args?: SelectSubset<T, StudyProgressFindFirstArgs<ExtArgs>>): Prisma__StudyProgressClient<$Result.GetResult<Prisma.$StudyProgressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudyProgress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyProgressFindFirstOrThrowArgs} args - Arguments to find a StudyProgress
     * @example
     * // Get one StudyProgress
     * const studyProgress = await prisma.studyProgress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudyProgressFindFirstOrThrowArgs>(args?: SelectSubset<T, StudyProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudyProgressClient<$Result.GetResult<Prisma.$StudyProgressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudyProgresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyProgressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudyProgresses
     * const studyProgresses = await prisma.studyProgress.findMany()
     * 
     * // Get first 10 StudyProgresses
     * const studyProgresses = await prisma.studyProgress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studyProgressWithIdOnly = await prisma.studyProgress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudyProgressFindManyArgs>(args?: SelectSubset<T, StudyProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudyProgress.
     * @param {StudyProgressCreateArgs} args - Arguments to create a StudyProgress.
     * @example
     * // Create one StudyProgress
     * const StudyProgress = await prisma.studyProgress.create({
     *   data: {
     *     // ... data to create a StudyProgress
     *   }
     * })
     * 
     */
    create<T extends StudyProgressCreateArgs>(args: SelectSubset<T, StudyProgressCreateArgs<ExtArgs>>): Prisma__StudyProgressClient<$Result.GetResult<Prisma.$StudyProgressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudyProgresses.
     * @param {StudyProgressCreateManyArgs} args - Arguments to create many StudyProgresses.
     * @example
     * // Create many StudyProgresses
     * const studyProgress = await prisma.studyProgress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudyProgressCreateManyArgs>(args?: SelectSubset<T, StudyProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudyProgresses and returns the data saved in the database.
     * @param {StudyProgressCreateManyAndReturnArgs} args - Arguments to create many StudyProgresses.
     * @example
     * // Create many StudyProgresses
     * const studyProgress = await prisma.studyProgress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudyProgresses and only return the `id`
     * const studyProgressWithIdOnly = await prisma.studyProgress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudyProgressCreateManyAndReturnArgs>(args?: SelectSubset<T, StudyProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyProgressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudyProgress.
     * @param {StudyProgressDeleteArgs} args - Arguments to delete one StudyProgress.
     * @example
     * // Delete one StudyProgress
     * const StudyProgress = await prisma.studyProgress.delete({
     *   where: {
     *     // ... filter to delete one StudyProgress
     *   }
     * })
     * 
     */
    delete<T extends StudyProgressDeleteArgs>(args: SelectSubset<T, StudyProgressDeleteArgs<ExtArgs>>): Prisma__StudyProgressClient<$Result.GetResult<Prisma.$StudyProgressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudyProgress.
     * @param {StudyProgressUpdateArgs} args - Arguments to update one StudyProgress.
     * @example
     * // Update one StudyProgress
     * const studyProgress = await prisma.studyProgress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudyProgressUpdateArgs>(args: SelectSubset<T, StudyProgressUpdateArgs<ExtArgs>>): Prisma__StudyProgressClient<$Result.GetResult<Prisma.$StudyProgressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudyProgresses.
     * @param {StudyProgressDeleteManyArgs} args - Arguments to filter StudyProgresses to delete.
     * @example
     * // Delete a few StudyProgresses
     * const { count } = await prisma.studyProgress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudyProgressDeleteManyArgs>(args?: SelectSubset<T, StudyProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudyProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudyProgresses
     * const studyProgress = await prisma.studyProgress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudyProgressUpdateManyArgs>(args: SelectSubset<T, StudyProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudyProgresses and returns the data updated in the database.
     * @param {StudyProgressUpdateManyAndReturnArgs} args - Arguments to update many StudyProgresses.
     * @example
     * // Update many StudyProgresses
     * const studyProgress = await prisma.studyProgress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudyProgresses and only return the `id`
     * const studyProgressWithIdOnly = await prisma.studyProgress.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudyProgressUpdateManyAndReturnArgs>(args: SelectSubset<T, StudyProgressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyProgressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudyProgress.
     * @param {StudyProgressUpsertArgs} args - Arguments to update or create a StudyProgress.
     * @example
     * // Update or create a StudyProgress
     * const studyProgress = await prisma.studyProgress.upsert({
     *   create: {
     *     // ... data to create a StudyProgress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudyProgress we want to update
     *   }
     * })
     */
    upsert<T extends StudyProgressUpsertArgs>(args: SelectSubset<T, StudyProgressUpsertArgs<ExtArgs>>): Prisma__StudyProgressClient<$Result.GetResult<Prisma.$StudyProgressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudyProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyProgressCountArgs} args - Arguments to filter StudyProgresses to count.
     * @example
     * // Count the number of StudyProgresses
     * const count = await prisma.studyProgress.count({
     *   where: {
     *     // ... the filter for the StudyProgresses we want to count
     *   }
     * })
    **/
    count<T extends StudyProgressCountArgs>(
      args?: Subset<T, StudyProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudyProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudyProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudyProgressAggregateArgs>(args: Subset<T, StudyProgressAggregateArgs>): Prisma.PrismaPromise<GetStudyProgressAggregateType<T>>

    /**
     * Group by StudyProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudyProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudyProgressGroupByArgs['orderBy'] }
        : { orderBy?: StudyProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudyProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudyProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudyProgress model
   */
  readonly fields: StudyProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudyProgress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudyProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudyProgress model
   */
  interface StudyProgressFieldRefs {
    readonly id: FieldRef<"StudyProgress", 'String'>
    readonly userId: FieldRef<"StudyProgress", 'String'>
    readonly questionType: FieldRef<"StudyProgress", 'QuestionType'>
    readonly difficulty: FieldRef<"StudyProgress", 'DifficultyLevel'>
    readonly totalQuestions: FieldRef<"StudyProgress", 'Int'>
    readonly correctAnswers: FieldRef<"StudyProgress", 'Int'>
    readonly averageTime: FieldRef<"StudyProgress", 'Float'>
    readonly bestScore: FieldRef<"StudyProgress", 'Int'>
    readonly lastPracticeAt: FieldRef<"StudyProgress", 'DateTime'>
    readonly updatedAt: FieldRef<"StudyProgress", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StudyProgress findUnique
   */
  export type StudyProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyProgress
     */
    select?: StudyProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyProgress
     */
    omit?: StudyProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyProgressInclude<ExtArgs> | null
    /**
     * Filter, which StudyProgress to fetch.
     */
    where: StudyProgressWhereUniqueInput
  }

  /**
   * StudyProgress findUniqueOrThrow
   */
  export type StudyProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyProgress
     */
    select?: StudyProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyProgress
     */
    omit?: StudyProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyProgressInclude<ExtArgs> | null
    /**
     * Filter, which StudyProgress to fetch.
     */
    where: StudyProgressWhereUniqueInput
  }

  /**
   * StudyProgress findFirst
   */
  export type StudyProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyProgress
     */
    select?: StudyProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyProgress
     */
    omit?: StudyProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyProgressInclude<ExtArgs> | null
    /**
     * Filter, which StudyProgress to fetch.
     */
    where?: StudyProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyProgresses to fetch.
     */
    orderBy?: StudyProgressOrderByWithRelationInput | StudyProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudyProgresses.
     */
    cursor?: StudyProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudyProgresses.
     */
    distinct?: StudyProgressScalarFieldEnum | StudyProgressScalarFieldEnum[]
  }

  /**
   * StudyProgress findFirstOrThrow
   */
  export type StudyProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyProgress
     */
    select?: StudyProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyProgress
     */
    omit?: StudyProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyProgressInclude<ExtArgs> | null
    /**
     * Filter, which StudyProgress to fetch.
     */
    where?: StudyProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyProgresses to fetch.
     */
    orderBy?: StudyProgressOrderByWithRelationInput | StudyProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudyProgresses.
     */
    cursor?: StudyProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudyProgresses.
     */
    distinct?: StudyProgressScalarFieldEnum | StudyProgressScalarFieldEnum[]
  }

  /**
   * StudyProgress findMany
   */
  export type StudyProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyProgress
     */
    select?: StudyProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyProgress
     */
    omit?: StudyProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyProgressInclude<ExtArgs> | null
    /**
     * Filter, which StudyProgresses to fetch.
     */
    where?: StudyProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyProgresses to fetch.
     */
    orderBy?: StudyProgressOrderByWithRelationInput | StudyProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudyProgresses.
     */
    cursor?: StudyProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyProgresses.
     */
    skip?: number
    distinct?: StudyProgressScalarFieldEnum | StudyProgressScalarFieldEnum[]
  }

  /**
   * StudyProgress create
   */
  export type StudyProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyProgress
     */
    select?: StudyProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyProgress
     */
    omit?: StudyProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a StudyProgress.
     */
    data: XOR<StudyProgressCreateInput, StudyProgressUncheckedCreateInput>
  }

  /**
   * StudyProgress createMany
   */
  export type StudyProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudyProgresses.
     */
    data: StudyProgressCreateManyInput | StudyProgressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudyProgress createManyAndReturn
   */
  export type StudyProgressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyProgress
     */
    select?: StudyProgressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudyProgress
     */
    omit?: StudyProgressOmit<ExtArgs> | null
    /**
     * The data used to create many StudyProgresses.
     */
    data: StudyProgressCreateManyInput | StudyProgressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyProgressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudyProgress update
   */
  export type StudyProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyProgress
     */
    select?: StudyProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyProgress
     */
    omit?: StudyProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a StudyProgress.
     */
    data: XOR<StudyProgressUpdateInput, StudyProgressUncheckedUpdateInput>
    /**
     * Choose, which StudyProgress to update.
     */
    where: StudyProgressWhereUniqueInput
  }

  /**
   * StudyProgress updateMany
   */
  export type StudyProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudyProgresses.
     */
    data: XOR<StudyProgressUpdateManyMutationInput, StudyProgressUncheckedUpdateManyInput>
    /**
     * Filter which StudyProgresses to update
     */
    where?: StudyProgressWhereInput
    /**
     * Limit how many StudyProgresses to update.
     */
    limit?: number
  }

  /**
   * StudyProgress updateManyAndReturn
   */
  export type StudyProgressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyProgress
     */
    select?: StudyProgressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudyProgress
     */
    omit?: StudyProgressOmit<ExtArgs> | null
    /**
     * The data used to update StudyProgresses.
     */
    data: XOR<StudyProgressUpdateManyMutationInput, StudyProgressUncheckedUpdateManyInput>
    /**
     * Filter which StudyProgresses to update
     */
    where?: StudyProgressWhereInput
    /**
     * Limit how many StudyProgresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyProgressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudyProgress upsert
   */
  export type StudyProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyProgress
     */
    select?: StudyProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyProgress
     */
    omit?: StudyProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the StudyProgress to update in case it exists.
     */
    where: StudyProgressWhereUniqueInput
    /**
     * In case the StudyProgress found by the `where` argument doesn't exist, create a new StudyProgress with this data.
     */
    create: XOR<StudyProgressCreateInput, StudyProgressUncheckedCreateInput>
    /**
     * In case the StudyProgress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudyProgressUpdateInput, StudyProgressUncheckedUpdateInput>
  }

  /**
   * StudyProgress delete
   */
  export type StudyProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyProgress
     */
    select?: StudyProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyProgress
     */
    omit?: StudyProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyProgressInclude<ExtArgs> | null
    /**
     * Filter which StudyProgress to delete.
     */
    where: StudyProgressWhereUniqueInput
  }

  /**
   * StudyProgress deleteMany
   */
  export type StudyProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudyProgresses to delete
     */
    where?: StudyProgressWhereInput
    /**
     * Limit how many StudyProgresses to delete.
     */
    limit?: number
  }

  /**
   * StudyProgress without action
   */
  export type StudyProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyProgress
     */
    select?: StudyProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyProgress
     */
    omit?: StudyProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyProgressInclude<ExtArgs> | null
  }


  /**
   * Model SubscriptionPlan
   */

  export type AggregateSubscriptionPlan = {
    _count: SubscriptionPlanCountAggregateOutputType | null
    _avg: SubscriptionPlanAvgAggregateOutputType | null
    _sum: SubscriptionPlanSumAggregateOutputType | null
    _min: SubscriptionPlanMinAggregateOutputType | null
    _max: SubscriptionPlanMaxAggregateOutputType | null
  }

  export type SubscriptionPlanAvgAggregateOutputType = {
    priceCents: number | null
    intervalCount: number | null
    dailyPracticeLimit: number | null
    dailyAiChatLimit: number | null
    maxVocabularyWords: number | null
    sortOrder: number | null
  }

  export type SubscriptionPlanSumAggregateOutputType = {
    priceCents: number | null
    intervalCount: number | null
    dailyPracticeLimit: number | null
    dailyAiChatLimit: number | null
    maxVocabularyWords: number | null
    sortOrder: number | null
  }

  export type SubscriptionPlanMinAggregateOutputType = {
    id: string | null
    name: string | null
    nameJp: string | null
    priceCents: number | null
    currency: string | null
    interval: string | null
    intervalCount: number | null
    stripePriceId: string | null
    stripeProductId: string | null
    dailyPracticeLimit: number | null
    dailyAiChatLimit: number | null
    maxVocabularyWords: number | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionPlanMaxAggregateOutputType = {
    id: string | null
    name: string | null
    nameJp: string | null
    priceCents: number | null
    currency: string | null
    interval: string | null
    intervalCount: number | null
    stripePriceId: string | null
    stripeProductId: string | null
    dailyPracticeLimit: number | null
    dailyAiChatLimit: number | null
    maxVocabularyWords: number | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionPlanCountAggregateOutputType = {
    id: number
    name: number
    nameJp: number
    priceCents: number
    currency: number
    interval: number
    intervalCount: number
    stripePriceId: number
    stripeProductId: number
    features: number
    dailyPracticeLimit: number
    dailyAiChatLimit: number
    maxVocabularyWords: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubscriptionPlanAvgAggregateInputType = {
    priceCents?: true
    intervalCount?: true
    dailyPracticeLimit?: true
    dailyAiChatLimit?: true
    maxVocabularyWords?: true
    sortOrder?: true
  }

  export type SubscriptionPlanSumAggregateInputType = {
    priceCents?: true
    intervalCount?: true
    dailyPracticeLimit?: true
    dailyAiChatLimit?: true
    maxVocabularyWords?: true
    sortOrder?: true
  }

  export type SubscriptionPlanMinAggregateInputType = {
    id?: true
    name?: true
    nameJp?: true
    priceCents?: true
    currency?: true
    interval?: true
    intervalCount?: true
    stripePriceId?: true
    stripeProductId?: true
    dailyPracticeLimit?: true
    dailyAiChatLimit?: true
    maxVocabularyWords?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionPlanMaxAggregateInputType = {
    id?: true
    name?: true
    nameJp?: true
    priceCents?: true
    currency?: true
    interval?: true
    intervalCount?: true
    stripePriceId?: true
    stripeProductId?: true
    dailyPracticeLimit?: true
    dailyAiChatLimit?: true
    maxVocabularyWords?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionPlanCountAggregateInputType = {
    id?: true
    name?: true
    nameJp?: true
    priceCents?: true
    currency?: true
    interval?: true
    intervalCount?: true
    stripePriceId?: true
    stripeProductId?: true
    features?: true
    dailyPracticeLimit?: true
    dailyAiChatLimit?: true
    maxVocabularyWords?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubscriptionPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionPlan to aggregate.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubscriptionPlans
    **/
    _count?: true | SubscriptionPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubscriptionPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubscriptionPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionPlanMaxAggregateInputType
  }

  export type GetSubscriptionPlanAggregateType<T extends SubscriptionPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscriptionPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscriptionPlan[P]>
      : GetScalarType<T[P], AggregateSubscriptionPlan[P]>
  }




  export type SubscriptionPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionPlanWhereInput
    orderBy?: SubscriptionPlanOrderByWithAggregationInput | SubscriptionPlanOrderByWithAggregationInput[]
    by: SubscriptionPlanScalarFieldEnum[] | SubscriptionPlanScalarFieldEnum
    having?: SubscriptionPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionPlanCountAggregateInputType | true
    _avg?: SubscriptionPlanAvgAggregateInputType
    _sum?: SubscriptionPlanSumAggregateInputType
    _min?: SubscriptionPlanMinAggregateInputType
    _max?: SubscriptionPlanMaxAggregateInputType
  }

  export type SubscriptionPlanGroupByOutputType = {
    id: string
    name: string
    nameJp: string | null
    priceCents: number
    currency: string
    interval: string
    intervalCount: number
    stripePriceId: string | null
    stripeProductId: string | null
    features: JsonValue
    dailyPracticeLimit: number | null
    dailyAiChatLimit: number | null
    maxVocabularyWords: number | null
    isActive: boolean
    sortOrder: number
    createdAt: Date
    updatedAt: Date
    _count: SubscriptionPlanCountAggregateOutputType | null
    _avg: SubscriptionPlanAvgAggregateOutputType | null
    _sum: SubscriptionPlanSumAggregateOutputType | null
    _min: SubscriptionPlanMinAggregateOutputType | null
    _max: SubscriptionPlanMaxAggregateOutputType | null
  }

  type GetSubscriptionPlanGroupByPayload<T extends SubscriptionPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionPlanGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionPlanGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nameJp?: boolean
    priceCents?: boolean
    currency?: boolean
    interval?: boolean
    intervalCount?: boolean
    stripePriceId?: boolean
    stripeProductId?: boolean
    features?: boolean
    dailyPracticeLimit?: boolean
    dailyAiChatLimit?: boolean
    maxVocabularyWords?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subscriptions?: boolean | SubscriptionPlan$subscriptionsArgs<ExtArgs>
    _count?: boolean | SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscriptionPlan"]>

  export type SubscriptionPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nameJp?: boolean
    priceCents?: boolean
    currency?: boolean
    interval?: boolean
    intervalCount?: boolean
    stripePriceId?: boolean
    stripeProductId?: boolean
    features?: boolean
    dailyPracticeLimit?: boolean
    dailyAiChatLimit?: boolean
    maxVocabularyWords?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["subscriptionPlan"]>

  export type SubscriptionPlanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nameJp?: boolean
    priceCents?: boolean
    currency?: boolean
    interval?: boolean
    intervalCount?: boolean
    stripePriceId?: boolean
    stripeProductId?: boolean
    features?: boolean
    dailyPracticeLimit?: boolean
    dailyAiChatLimit?: boolean
    maxVocabularyWords?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["subscriptionPlan"]>

  export type SubscriptionPlanSelectScalar = {
    id?: boolean
    name?: boolean
    nameJp?: boolean
    priceCents?: boolean
    currency?: boolean
    interval?: boolean
    intervalCount?: boolean
    stripePriceId?: boolean
    stripeProductId?: boolean
    features?: boolean
    dailyPracticeLimit?: boolean
    dailyAiChatLimit?: boolean
    maxVocabularyWords?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubscriptionPlanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "nameJp" | "priceCents" | "currency" | "interval" | "intervalCount" | "stripePriceId" | "stripeProductId" | "features" | "dailyPracticeLimit" | "dailyAiChatLimit" | "maxVocabularyWords" | "isActive" | "sortOrder" | "createdAt" | "updatedAt", ExtArgs["result"]["subscriptionPlan"]>
  export type SubscriptionPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | SubscriptionPlan$subscriptionsArgs<ExtArgs>
    _count?: boolean | SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubscriptionPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SubscriptionPlanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SubscriptionPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubscriptionPlan"
    objects: {
      subscriptions: Prisma.$UserSubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      nameJp: string | null
      priceCents: number
      currency: string
      interval: string
      intervalCount: number
      stripePriceId: string | null
      stripeProductId: string | null
      features: Prisma.JsonValue
      dailyPracticeLimit: number | null
      dailyAiChatLimit: number | null
      maxVocabularyWords: number | null
      isActive: boolean
      sortOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subscriptionPlan"]>
    composites: {}
  }

  type SubscriptionPlanGetPayload<S extends boolean | null | undefined | SubscriptionPlanDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPlanPayload, S>

  type SubscriptionPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionPlanCountAggregateInputType | true
    }

  export interface SubscriptionPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubscriptionPlan'], meta: { name: 'SubscriptionPlan' } }
    /**
     * Find zero or one SubscriptionPlan that matches the filter.
     * @param {SubscriptionPlanFindUniqueArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionPlanFindUniqueArgs>(args: SelectSubset<T, SubscriptionPlanFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SubscriptionPlan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionPlanFindUniqueOrThrowArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubscriptionPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindFirstArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionPlanFindFirstArgs>(args?: SelectSubset<T, SubscriptionPlanFindFirstArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubscriptionPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindFirstOrThrowArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SubscriptionPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubscriptionPlans
     * const subscriptionPlans = await prisma.subscriptionPlan.findMany()
     * 
     * // Get first 10 SubscriptionPlans
     * const subscriptionPlans = await prisma.subscriptionPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionPlanWithIdOnly = await prisma.subscriptionPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionPlanFindManyArgs>(args?: SelectSubset<T, SubscriptionPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SubscriptionPlan.
     * @param {SubscriptionPlanCreateArgs} args - Arguments to create a SubscriptionPlan.
     * @example
     * // Create one SubscriptionPlan
     * const SubscriptionPlan = await prisma.subscriptionPlan.create({
     *   data: {
     *     // ... data to create a SubscriptionPlan
     *   }
     * })
     * 
     */
    create<T extends SubscriptionPlanCreateArgs>(args: SelectSubset<T, SubscriptionPlanCreateArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SubscriptionPlans.
     * @param {SubscriptionPlanCreateManyArgs} args - Arguments to create many SubscriptionPlans.
     * @example
     * // Create many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionPlanCreateManyArgs>(args?: SelectSubset<T, SubscriptionPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SubscriptionPlans and returns the data saved in the database.
     * @param {SubscriptionPlanCreateManyAndReturnArgs} args - Arguments to create many SubscriptionPlans.
     * @example
     * // Create many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SubscriptionPlans and only return the `id`
     * const subscriptionPlanWithIdOnly = await prisma.subscriptionPlan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SubscriptionPlan.
     * @param {SubscriptionPlanDeleteArgs} args - Arguments to delete one SubscriptionPlan.
     * @example
     * // Delete one SubscriptionPlan
     * const SubscriptionPlan = await prisma.subscriptionPlan.delete({
     *   where: {
     *     // ... filter to delete one SubscriptionPlan
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionPlanDeleteArgs>(args: SelectSubset<T, SubscriptionPlanDeleteArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SubscriptionPlan.
     * @param {SubscriptionPlanUpdateArgs} args - Arguments to update one SubscriptionPlan.
     * @example
     * // Update one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionPlanUpdateArgs>(args: SelectSubset<T, SubscriptionPlanUpdateArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SubscriptionPlans.
     * @param {SubscriptionPlanDeleteManyArgs} args - Arguments to filter SubscriptionPlans to delete.
     * @example
     * // Delete a few SubscriptionPlans
     * const { count } = await prisma.subscriptionPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionPlanDeleteManyArgs>(args?: SelectSubset<T, SubscriptionPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubscriptionPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionPlanUpdateManyArgs>(args: SelectSubset<T, SubscriptionPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubscriptionPlans and returns the data updated in the database.
     * @param {SubscriptionPlanUpdateManyAndReturnArgs} args - Arguments to update many SubscriptionPlans.
     * @example
     * // Update many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SubscriptionPlans and only return the `id`
     * const subscriptionPlanWithIdOnly = await prisma.subscriptionPlan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubscriptionPlanUpdateManyAndReturnArgs>(args: SelectSubset<T, SubscriptionPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SubscriptionPlan.
     * @param {SubscriptionPlanUpsertArgs} args - Arguments to update or create a SubscriptionPlan.
     * @example
     * // Update or create a SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.upsert({
     *   create: {
     *     // ... data to create a SubscriptionPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubscriptionPlan we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionPlanUpsertArgs>(args: SelectSubset<T, SubscriptionPlanUpsertArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SubscriptionPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanCountArgs} args - Arguments to filter SubscriptionPlans to count.
     * @example
     * // Count the number of SubscriptionPlans
     * const count = await prisma.subscriptionPlan.count({
     *   where: {
     *     // ... the filter for the SubscriptionPlans we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionPlanCountArgs>(
      args?: Subset<T, SubscriptionPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubscriptionPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionPlanAggregateArgs>(args: Subset<T, SubscriptionPlanAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionPlanAggregateType<T>>

    /**
     * Group by SubscriptionPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionPlanGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubscriptionPlan model
   */
  readonly fields: SubscriptionPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubscriptionPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subscriptions<T extends SubscriptionPlan$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionPlan$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubscriptionPlan model
   */
  interface SubscriptionPlanFieldRefs {
    readonly id: FieldRef<"SubscriptionPlan", 'String'>
    readonly name: FieldRef<"SubscriptionPlan", 'String'>
    readonly nameJp: FieldRef<"SubscriptionPlan", 'String'>
    readonly priceCents: FieldRef<"SubscriptionPlan", 'Int'>
    readonly currency: FieldRef<"SubscriptionPlan", 'String'>
    readonly interval: FieldRef<"SubscriptionPlan", 'String'>
    readonly intervalCount: FieldRef<"SubscriptionPlan", 'Int'>
    readonly stripePriceId: FieldRef<"SubscriptionPlan", 'String'>
    readonly stripeProductId: FieldRef<"SubscriptionPlan", 'String'>
    readonly features: FieldRef<"SubscriptionPlan", 'Json'>
    readonly dailyPracticeLimit: FieldRef<"SubscriptionPlan", 'Int'>
    readonly dailyAiChatLimit: FieldRef<"SubscriptionPlan", 'Int'>
    readonly maxVocabularyWords: FieldRef<"SubscriptionPlan", 'Int'>
    readonly isActive: FieldRef<"SubscriptionPlan", 'Boolean'>
    readonly sortOrder: FieldRef<"SubscriptionPlan", 'Int'>
    readonly createdAt: FieldRef<"SubscriptionPlan", 'DateTime'>
    readonly updatedAt: FieldRef<"SubscriptionPlan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SubscriptionPlan findUnique
   */
  export type SubscriptionPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan findUniqueOrThrow
   */
  export type SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan findFirst
   */
  export type SubscriptionPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionPlans.
     */
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan findFirstOrThrow
   */
  export type SubscriptionPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionPlans.
     */
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan findMany
   */
  export type SubscriptionPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlans to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan create
   */
  export type SubscriptionPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a SubscriptionPlan.
     */
    data: XOR<SubscriptionPlanCreateInput, SubscriptionPlanUncheckedCreateInput>
  }

  /**
   * SubscriptionPlan createMany
   */
  export type SubscriptionPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubscriptionPlans.
     */
    data: SubscriptionPlanCreateManyInput | SubscriptionPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubscriptionPlan createManyAndReturn
   */
  export type SubscriptionPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * The data used to create many SubscriptionPlans.
     */
    data: SubscriptionPlanCreateManyInput | SubscriptionPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubscriptionPlan update
   */
  export type SubscriptionPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a SubscriptionPlan.
     */
    data: XOR<SubscriptionPlanUpdateInput, SubscriptionPlanUncheckedUpdateInput>
    /**
     * Choose, which SubscriptionPlan to update.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan updateMany
   */
  export type SubscriptionPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubscriptionPlans.
     */
    data: XOR<SubscriptionPlanUpdateManyMutationInput, SubscriptionPlanUncheckedUpdateManyInput>
    /**
     * Filter which SubscriptionPlans to update
     */
    where?: SubscriptionPlanWhereInput
    /**
     * Limit how many SubscriptionPlans to update.
     */
    limit?: number
  }

  /**
   * SubscriptionPlan updateManyAndReturn
   */
  export type SubscriptionPlanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * The data used to update SubscriptionPlans.
     */
    data: XOR<SubscriptionPlanUpdateManyMutationInput, SubscriptionPlanUncheckedUpdateManyInput>
    /**
     * Filter which SubscriptionPlans to update
     */
    where?: SubscriptionPlanWhereInput
    /**
     * Limit how many SubscriptionPlans to update.
     */
    limit?: number
  }

  /**
   * SubscriptionPlan upsert
   */
  export type SubscriptionPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the SubscriptionPlan to update in case it exists.
     */
    where: SubscriptionPlanWhereUniqueInput
    /**
     * In case the SubscriptionPlan found by the `where` argument doesn't exist, create a new SubscriptionPlan with this data.
     */
    create: XOR<SubscriptionPlanCreateInput, SubscriptionPlanUncheckedCreateInput>
    /**
     * In case the SubscriptionPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionPlanUpdateInput, SubscriptionPlanUncheckedUpdateInput>
  }

  /**
   * SubscriptionPlan delete
   */
  export type SubscriptionPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter which SubscriptionPlan to delete.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan deleteMany
   */
  export type SubscriptionPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionPlans to delete
     */
    where?: SubscriptionPlanWhereInput
    /**
     * Limit how many SubscriptionPlans to delete.
     */
    limit?: number
  }

  /**
   * SubscriptionPlan.subscriptions
   */
  export type SubscriptionPlan$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    where?: UserSubscriptionWhereInput
    orderBy?: UserSubscriptionOrderByWithRelationInput | UserSubscriptionOrderByWithRelationInput[]
    cursor?: UserSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSubscriptionScalarFieldEnum | UserSubscriptionScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan without action
   */
  export type SubscriptionPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
  }


  /**
   * Model UserSubscription
   */

  export type AggregateUserSubscription = {
    _count: UserSubscriptionCountAggregateOutputType | null
    _min: UserSubscriptionMinAggregateOutputType | null
    _max: UserSubscriptionMaxAggregateOutputType | null
  }

  export type UserSubscriptionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    planId: string | null
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    stripeSessionId: string | null
    status: string | null
    trialStart: Date | null
    trialEnd: Date | null
    currentPeriodStart: Date | null
    currentPeriodEnd: Date | null
    cancelAtPeriodEnd: boolean | null
    canceledAt: Date | null
    lastPaymentAt: Date | null
    nextPaymentAt: Date | null
    isTestAccount: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSubscriptionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    planId: string | null
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    stripeSessionId: string | null
    status: string | null
    trialStart: Date | null
    trialEnd: Date | null
    currentPeriodStart: Date | null
    currentPeriodEnd: Date | null
    cancelAtPeriodEnd: boolean | null
    canceledAt: Date | null
    lastPaymentAt: Date | null
    nextPaymentAt: Date | null
    isTestAccount: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSubscriptionCountAggregateOutputType = {
    id: number
    userId: number
    planId: number
    stripeCustomerId: number
    stripeSubscriptionId: number
    stripeSessionId: number
    status: number
    trialStart: number
    trialEnd: number
    currentPeriodStart: number
    currentPeriodEnd: number
    cancelAtPeriodEnd: number
    canceledAt: number
    lastPaymentAt: number
    nextPaymentAt: number
    isTestAccount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserSubscriptionMinAggregateInputType = {
    id?: true
    userId?: true
    planId?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    stripeSessionId?: true
    status?: true
    trialStart?: true
    trialEnd?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    cancelAtPeriodEnd?: true
    canceledAt?: true
    lastPaymentAt?: true
    nextPaymentAt?: true
    isTestAccount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSubscriptionMaxAggregateInputType = {
    id?: true
    userId?: true
    planId?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    stripeSessionId?: true
    status?: true
    trialStart?: true
    trialEnd?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    cancelAtPeriodEnd?: true
    canceledAt?: true
    lastPaymentAt?: true
    nextPaymentAt?: true
    isTestAccount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSubscriptionCountAggregateInputType = {
    id?: true
    userId?: true
    planId?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    stripeSessionId?: true
    status?: true
    trialStart?: true
    trialEnd?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    cancelAtPeriodEnd?: true
    canceledAt?: true
    lastPaymentAt?: true
    nextPaymentAt?: true
    isTestAccount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserSubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSubscription to aggregate.
     */
    where?: UserSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSubscriptions to fetch.
     */
    orderBy?: UserSubscriptionOrderByWithRelationInput | UserSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSubscriptions
    **/
    _count?: true | UserSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSubscriptionMaxAggregateInputType
  }

  export type GetUserSubscriptionAggregateType<T extends UserSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSubscription[P]>
      : GetScalarType<T[P], AggregateUserSubscription[P]>
  }




  export type UserSubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSubscriptionWhereInput
    orderBy?: UserSubscriptionOrderByWithAggregationInput | UserSubscriptionOrderByWithAggregationInput[]
    by: UserSubscriptionScalarFieldEnum[] | UserSubscriptionScalarFieldEnum
    having?: UserSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSubscriptionCountAggregateInputType | true
    _min?: UserSubscriptionMinAggregateInputType
    _max?: UserSubscriptionMaxAggregateInputType
  }

  export type UserSubscriptionGroupByOutputType = {
    id: string
    userId: string
    planId: string
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    stripeSessionId: string | null
    status: string
    trialStart: Date | null
    trialEnd: Date | null
    currentPeriodStart: Date | null
    currentPeriodEnd: Date | null
    cancelAtPeriodEnd: boolean
    canceledAt: Date | null
    lastPaymentAt: Date | null
    nextPaymentAt: Date | null
    isTestAccount: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserSubscriptionCountAggregateOutputType | null
    _min: UserSubscriptionMinAggregateOutputType | null
    _max: UserSubscriptionMaxAggregateOutputType | null
  }

  type GetUserSubscriptionGroupByPayload<T extends UserSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type UserSubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planId?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    stripeSessionId?: boolean
    status?: boolean
    trialStart?: boolean
    trialEnd?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    cancelAtPeriodEnd?: boolean
    canceledAt?: boolean
    lastPaymentAt?: boolean
    nextPaymentAt?: boolean
    isTestAccount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
    paymentTransactions?: boolean | UserSubscription$paymentTransactionsArgs<ExtArgs>
    adminSubscriptionLogs?: boolean | UserSubscription$adminSubscriptionLogsArgs<ExtArgs>
    _count?: boolean | UserSubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSubscription"]>

  export type UserSubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planId?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    stripeSessionId?: boolean
    status?: boolean
    trialStart?: boolean
    trialEnd?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    cancelAtPeriodEnd?: boolean
    canceledAt?: boolean
    lastPaymentAt?: boolean
    nextPaymentAt?: boolean
    isTestAccount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSubscription"]>

  export type UserSubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planId?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    stripeSessionId?: boolean
    status?: boolean
    trialStart?: boolean
    trialEnd?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    cancelAtPeriodEnd?: boolean
    canceledAt?: boolean
    lastPaymentAt?: boolean
    nextPaymentAt?: boolean
    isTestAccount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSubscription"]>

  export type UserSubscriptionSelectScalar = {
    id?: boolean
    userId?: boolean
    planId?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    stripeSessionId?: boolean
    status?: boolean
    trialStart?: boolean
    trialEnd?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    cancelAtPeriodEnd?: boolean
    canceledAt?: boolean
    lastPaymentAt?: boolean
    nextPaymentAt?: boolean
    isTestAccount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserSubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "planId" | "stripeCustomerId" | "stripeSubscriptionId" | "stripeSessionId" | "status" | "trialStart" | "trialEnd" | "currentPeriodStart" | "currentPeriodEnd" | "cancelAtPeriodEnd" | "canceledAt" | "lastPaymentAt" | "nextPaymentAt" | "isTestAccount" | "createdAt" | "updatedAt", ExtArgs["result"]["userSubscription"]>
  export type UserSubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
    paymentTransactions?: boolean | UserSubscription$paymentTransactionsArgs<ExtArgs>
    adminSubscriptionLogs?: boolean | UserSubscription$adminSubscriptionLogsArgs<ExtArgs>
    _count?: boolean | UserSubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserSubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }
  export type UserSubscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }

  export type $UserSubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSubscription"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      plan: Prisma.$SubscriptionPlanPayload<ExtArgs>
      paymentTransactions: Prisma.$PaymentTransactionPayload<ExtArgs>[]
      adminSubscriptionLogs: Prisma.$AdminSubscriptionLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      planId: string
      stripeCustomerId: string | null
      stripeSubscriptionId: string | null
      stripeSessionId: string | null
      status: string
      trialStart: Date | null
      trialEnd: Date | null
      currentPeriodStart: Date | null
      currentPeriodEnd: Date | null
      cancelAtPeriodEnd: boolean
      canceledAt: Date | null
      lastPaymentAt: Date | null
      nextPaymentAt: Date | null
      isTestAccount: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userSubscription"]>
    composites: {}
  }

  type UserSubscriptionGetPayload<S extends boolean | null | undefined | UserSubscriptionDefaultArgs> = $Result.GetResult<Prisma.$UserSubscriptionPayload, S>

  type UserSubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSubscriptionCountAggregateInputType | true
    }

  export interface UserSubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSubscription'], meta: { name: 'UserSubscription' } }
    /**
     * Find zero or one UserSubscription that matches the filter.
     * @param {UserSubscriptionFindUniqueArgs} args - Arguments to find a UserSubscription
     * @example
     * // Get one UserSubscription
     * const userSubscription = await prisma.userSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSubscriptionFindUniqueArgs>(args: SelectSubset<T, UserSubscriptionFindUniqueArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSubscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a UserSubscription
     * @example
     * // Get one UserSubscription
     * const userSubscription = await prisma.userSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSubscriptionFindFirstArgs} args - Arguments to find a UserSubscription
     * @example
     * // Get one UserSubscription
     * const userSubscription = await prisma.userSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSubscriptionFindFirstArgs>(args?: SelectSubset<T, UserSubscriptionFindFirstArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSubscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSubscriptionFindFirstOrThrowArgs} args - Arguments to find a UserSubscription
     * @example
     * // Get one UserSubscription
     * const userSubscription = await prisma.userSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSubscriptions
     * const userSubscriptions = await prisma.userSubscription.findMany()
     * 
     * // Get first 10 UserSubscriptions
     * const userSubscriptions = await prisma.userSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSubscriptionWithIdOnly = await prisma.userSubscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSubscriptionFindManyArgs>(args?: SelectSubset<T, UserSubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSubscription.
     * @param {UserSubscriptionCreateArgs} args - Arguments to create a UserSubscription.
     * @example
     * // Create one UserSubscription
     * const UserSubscription = await prisma.userSubscription.create({
     *   data: {
     *     // ... data to create a UserSubscription
     *   }
     * })
     * 
     */
    create<T extends UserSubscriptionCreateArgs>(args: SelectSubset<T, UserSubscriptionCreateArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSubscriptions.
     * @param {UserSubscriptionCreateManyArgs} args - Arguments to create many UserSubscriptions.
     * @example
     * // Create many UserSubscriptions
     * const userSubscription = await prisma.userSubscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSubscriptionCreateManyArgs>(args?: SelectSubset<T, UserSubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSubscriptions and returns the data saved in the database.
     * @param {UserSubscriptionCreateManyAndReturnArgs} args - Arguments to create many UserSubscriptions.
     * @example
     * // Create many UserSubscriptions
     * const userSubscription = await prisma.userSubscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSubscriptions and only return the `id`
     * const userSubscriptionWithIdOnly = await prisma.userSubscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSubscription.
     * @param {UserSubscriptionDeleteArgs} args - Arguments to delete one UserSubscription.
     * @example
     * // Delete one UserSubscription
     * const UserSubscription = await prisma.userSubscription.delete({
     *   where: {
     *     // ... filter to delete one UserSubscription
     *   }
     * })
     * 
     */
    delete<T extends UserSubscriptionDeleteArgs>(args: SelectSubset<T, UserSubscriptionDeleteArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSubscription.
     * @param {UserSubscriptionUpdateArgs} args - Arguments to update one UserSubscription.
     * @example
     * // Update one UserSubscription
     * const userSubscription = await prisma.userSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSubscriptionUpdateArgs>(args: SelectSubset<T, UserSubscriptionUpdateArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSubscriptions.
     * @param {UserSubscriptionDeleteManyArgs} args - Arguments to filter UserSubscriptions to delete.
     * @example
     * // Delete a few UserSubscriptions
     * const { count } = await prisma.userSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSubscriptionDeleteManyArgs>(args?: SelectSubset<T, UserSubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSubscriptions
     * const userSubscription = await prisma.userSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSubscriptionUpdateManyArgs>(args: SelectSubset<T, UserSubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSubscriptions and returns the data updated in the database.
     * @param {UserSubscriptionUpdateManyAndReturnArgs} args - Arguments to update many UserSubscriptions.
     * @example
     * // Update many UserSubscriptions
     * const userSubscription = await prisma.userSubscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSubscriptions and only return the `id`
     * const userSubscriptionWithIdOnly = await prisma.userSubscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSubscription.
     * @param {UserSubscriptionUpsertArgs} args - Arguments to update or create a UserSubscription.
     * @example
     * // Update or create a UserSubscription
     * const userSubscription = await prisma.userSubscription.upsert({
     *   create: {
     *     // ... data to create a UserSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSubscription we want to update
     *   }
     * })
     */
    upsert<T extends UserSubscriptionUpsertArgs>(args: SelectSubset<T, UserSubscriptionUpsertArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSubscriptionCountArgs} args - Arguments to filter UserSubscriptions to count.
     * @example
     * // Count the number of UserSubscriptions
     * const count = await prisma.userSubscription.count({
     *   where: {
     *     // ... the filter for the UserSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends UserSubscriptionCountArgs>(
      args?: Subset<T, UserSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSubscriptionAggregateArgs>(args: Subset<T, UserSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetUserSubscriptionAggregateType<T>>

    /**
     * Group by UserSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: UserSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSubscription model
   */
  readonly fields: UserSubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    plan<T extends SubscriptionPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionPlanDefaultArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    paymentTransactions<T extends UserSubscription$paymentTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, UserSubscription$paymentTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    adminSubscriptionLogs<T extends UserSubscription$adminSubscriptionLogsArgs<ExtArgs> = {}>(args?: Subset<T, UserSubscription$adminSubscriptionLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminSubscriptionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSubscription model
   */
  interface UserSubscriptionFieldRefs {
    readonly id: FieldRef<"UserSubscription", 'String'>
    readonly userId: FieldRef<"UserSubscription", 'String'>
    readonly planId: FieldRef<"UserSubscription", 'String'>
    readonly stripeCustomerId: FieldRef<"UserSubscription", 'String'>
    readonly stripeSubscriptionId: FieldRef<"UserSubscription", 'String'>
    readonly stripeSessionId: FieldRef<"UserSubscription", 'String'>
    readonly status: FieldRef<"UserSubscription", 'String'>
    readonly trialStart: FieldRef<"UserSubscription", 'DateTime'>
    readonly trialEnd: FieldRef<"UserSubscription", 'DateTime'>
    readonly currentPeriodStart: FieldRef<"UserSubscription", 'DateTime'>
    readonly currentPeriodEnd: FieldRef<"UserSubscription", 'DateTime'>
    readonly cancelAtPeriodEnd: FieldRef<"UserSubscription", 'Boolean'>
    readonly canceledAt: FieldRef<"UserSubscription", 'DateTime'>
    readonly lastPaymentAt: FieldRef<"UserSubscription", 'DateTime'>
    readonly nextPaymentAt: FieldRef<"UserSubscription", 'DateTime'>
    readonly isTestAccount: FieldRef<"UserSubscription", 'Boolean'>
    readonly createdAt: FieldRef<"UserSubscription", 'DateTime'>
    readonly updatedAt: FieldRef<"UserSubscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSubscription findUnique
   */
  export type UserSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which UserSubscription to fetch.
     */
    where: UserSubscriptionWhereUniqueInput
  }

  /**
   * UserSubscription findUniqueOrThrow
   */
  export type UserSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which UserSubscription to fetch.
     */
    where: UserSubscriptionWhereUniqueInput
  }

  /**
   * UserSubscription findFirst
   */
  export type UserSubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which UserSubscription to fetch.
     */
    where?: UserSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSubscriptions to fetch.
     */
    orderBy?: UserSubscriptionOrderByWithRelationInput | UserSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSubscriptions.
     */
    cursor?: UserSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSubscriptions.
     */
    distinct?: UserSubscriptionScalarFieldEnum | UserSubscriptionScalarFieldEnum[]
  }

  /**
   * UserSubscription findFirstOrThrow
   */
  export type UserSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which UserSubscription to fetch.
     */
    where?: UserSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSubscriptions to fetch.
     */
    orderBy?: UserSubscriptionOrderByWithRelationInput | UserSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSubscriptions.
     */
    cursor?: UserSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSubscriptions.
     */
    distinct?: UserSubscriptionScalarFieldEnum | UserSubscriptionScalarFieldEnum[]
  }

  /**
   * UserSubscription findMany
   */
  export type UserSubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which UserSubscriptions to fetch.
     */
    where?: UserSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSubscriptions to fetch.
     */
    orderBy?: UserSubscriptionOrderByWithRelationInput | UserSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSubscriptions.
     */
    cursor?: UserSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSubscriptions.
     */
    skip?: number
    distinct?: UserSubscriptionScalarFieldEnum | UserSubscriptionScalarFieldEnum[]
  }

  /**
   * UserSubscription create
   */
  export type UserSubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSubscription.
     */
    data: XOR<UserSubscriptionCreateInput, UserSubscriptionUncheckedCreateInput>
  }

  /**
   * UserSubscription createMany
   */
  export type UserSubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSubscriptions.
     */
    data: UserSubscriptionCreateManyInput | UserSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSubscription createManyAndReturn
   */
  export type UserSubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many UserSubscriptions.
     */
    data: UserSubscriptionCreateManyInput | UserSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSubscription update
   */
  export type UserSubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSubscription.
     */
    data: XOR<UserSubscriptionUpdateInput, UserSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which UserSubscription to update.
     */
    where: UserSubscriptionWhereUniqueInput
  }

  /**
   * UserSubscription updateMany
   */
  export type UserSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSubscriptions.
     */
    data: XOR<UserSubscriptionUpdateManyMutationInput, UserSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which UserSubscriptions to update
     */
    where?: UserSubscriptionWhereInput
    /**
     * Limit how many UserSubscriptions to update.
     */
    limit?: number
  }

  /**
   * UserSubscription updateManyAndReturn
   */
  export type UserSubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update UserSubscriptions.
     */
    data: XOR<UserSubscriptionUpdateManyMutationInput, UserSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which UserSubscriptions to update
     */
    where?: UserSubscriptionWhereInput
    /**
     * Limit how many UserSubscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSubscription upsert
   */
  export type UserSubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSubscription to update in case it exists.
     */
    where: UserSubscriptionWhereUniqueInput
    /**
     * In case the UserSubscription found by the `where` argument doesn't exist, create a new UserSubscription with this data.
     */
    create: XOR<UserSubscriptionCreateInput, UserSubscriptionUncheckedCreateInput>
    /**
     * In case the UserSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSubscriptionUpdateInput, UserSubscriptionUncheckedUpdateInput>
  }

  /**
   * UserSubscription delete
   */
  export type UserSubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * Filter which UserSubscription to delete.
     */
    where: UserSubscriptionWhereUniqueInput
  }

  /**
   * UserSubscription deleteMany
   */
  export type UserSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSubscriptions to delete
     */
    where?: UserSubscriptionWhereInput
    /**
     * Limit how many UserSubscriptions to delete.
     */
    limit?: number
  }

  /**
   * UserSubscription.paymentTransactions
   */
  export type UserSubscription$paymentTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    where?: PaymentTransactionWhereInput
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    cursor?: PaymentTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * UserSubscription.adminSubscriptionLogs
   */
  export type UserSubscription$adminSubscriptionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogInclude<ExtArgs> | null
    where?: AdminSubscriptionLogWhereInput
    orderBy?: AdminSubscriptionLogOrderByWithRelationInput | AdminSubscriptionLogOrderByWithRelationInput[]
    cursor?: AdminSubscriptionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminSubscriptionLogScalarFieldEnum | AdminSubscriptionLogScalarFieldEnum[]
  }

  /**
   * UserSubscription without action
   */
  export type UserSubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model UsageQuota
   */

  export type AggregateUsageQuota = {
    _count: UsageQuotaCountAggregateOutputType | null
    _avg: UsageQuotaAvgAggregateOutputType | null
    _sum: UsageQuotaSumAggregateOutputType | null
    _min: UsageQuotaMinAggregateOutputType | null
    _max: UsageQuotaMaxAggregateOutputType | null
  }

  export type UsageQuotaAvgAggregateOutputType = {
    usedCount: number | null
    limitCount: number | null
  }

  export type UsageQuotaSumAggregateOutputType = {
    usedCount: number | null
    limitCount: number | null
  }

  export type UsageQuotaMinAggregateOutputType = {
    id: string | null
    userId: string | null
    resourceType: string | null
    usedCount: number | null
    limitCount: number | null
    periodStart: Date | null
    periodEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsageQuotaMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    resourceType: string | null
    usedCount: number | null
    limitCount: number | null
    periodStart: Date | null
    periodEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsageQuotaCountAggregateOutputType = {
    id: number
    userId: number
    resourceType: number
    usedCount: number
    limitCount: number
    periodStart: number
    periodEnd: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UsageQuotaAvgAggregateInputType = {
    usedCount?: true
    limitCount?: true
  }

  export type UsageQuotaSumAggregateInputType = {
    usedCount?: true
    limitCount?: true
  }

  export type UsageQuotaMinAggregateInputType = {
    id?: true
    userId?: true
    resourceType?: true
    usedCount?: true
    limitCount?: true
    periodStart?: true
    periodEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsageQuotaMaxAggregateInputType = {
    id?: true
    userId?: true
    resourceType?: true
    usedCount?: true
    limitCount?: true
    periodStart?: true
    periodEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsageQuotaCountAggregateInputType = {
    id?: true
    userId?: true
    resourceType?: true
    usedCount?: true
    limitCount?: true
    periodStart?: true
    periodEnd?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UsageQuotaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsageQuota to aggregate.
     */
    where?: UsageQuotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageQuotas to fetch.
     */
    orderBy?: UsageQuotaOrderByWithRelationInput | UsageQuotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsageQuotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageQuotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageQuotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsageQuotas
    **/
    _count?: true | UsageQuotaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsageQuotaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsageQuotaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsageQuotaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsageQuotaMaxAggregateInputType
  }

  export type GetUsageQuotaAggregateType<T extends UsageQuotaAggregateArgs> = {
        [P in keyof T & keyof AggregateUsageQuota]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsageQuota[P]>
      : GetScalarType<T[P], AggregateUsageQuota[P]>
  }




  export type UsageQuotaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageQuotaWhereInput
    orderBy?: UsageQuotaOrderByWithAggregationInput | UsageQuotaOrderByWithAggregationInput[]
    by: UsageQuotaScalarFieldEnum[] | UsageQuotaScalarFieldEnum
    having?: UsageQuotaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsageQuotaCountAggregateInputType | true
    _avg?: UsageQuotaAvgAggregateInputType
    _sum?: UsageQuotaSumAggregateInputType
    _min?: UsageQuotaMinAggregateInputType
    _max?: UsageQuotaMaxAggregateInputType
  }

  export type UsageQuotaGroupByOutputType = {
    id: string
    userId: string
    resourceType: string
    usedCount: number
    limitCount: number | null
    periodStart: Date
    periodEnd: Date
    createdAt: Date
    updatedAt: Date
    _count: UsageQuotaCountAggregateOutputType | null
    _avg: UsageQuotaAvgAggregateOutputType | null
    _sum: UsageQuotaSumAggregateOutputType | null
    _min: UsageQuotaMinAggregateOutputType | null
    _max: UsageQuotaMaxAggregateOutputType | null
  }

  type GetUsageQuotaGroupByPayload<T extends UsageQuotaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsageQuotaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsageQuotaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsageQuotaGroupByOutputType[P]>
            : GetScalarType<T[P], UsageQuotaGroupByOutputType[P]>
        }
      >
    >


  export type UsageQuotaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    resourceType?: boolean
    usedCount?: boolean
    limitCount?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageQuota"]>

  export type UsageQuotaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    resourceType?: boolean
    usedCount?: boolean
    limitCount?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageQuota"]>

  export type UsageQuotaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    resourceType?: boolean
    usedCount?: boolean
    limitCount?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageQuota"]>

  export type UsageQuotaSelectScalar = {
    id?: boolean
    userId?: boolean
    resourceType?: boolean
    usedCount?: boolean
    limitCount?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UsageQuotaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "resourceType" | "usedCount" | "limitCount" | "periodStart" | "periodEnd" | "createdAt" | "updatedAt", ExtArgs["result"]["usageQuota"]>
  export type UsageQuotaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UsageQuotaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UsageQuotaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UsageQuotaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UsageQuota"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      resourceType: string
      usedCount: number
      limitCount: number | null
      periodStart: Date
      periodEnd: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["usageQuota"]>
    composites: {}
  }

  type UsageQuotaGetPayload<S extends boolean | null | undefined | UsageQuotaDefaultArgs> = $Result.GetResult<Prisma.$UsageQuotaPayload, S>

  type UsageQuotaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsageQuotaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsageQuotaCountAggregateInputType | true
    }

  export interface UsageQuotaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsageQuota'], meta: { name: 'UsageQuota' } }
    /**
     * Find zero or one UsageQuota that matches the filter.
     * @param {UsageQuotaFindUniqueArgs} args - Arguments to find a UsageQuota
     * @example
     * // Get one UsageQuota
     * const usageQuota = await prisma.usageQuota.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsageQuotaFindUniqueArgs>(args: SelectSubset<T, UsageQuotaFindUniqueArgs<ExtArgs>>): Prisma__UsageQuotaClient<$Result.GetResult<Prisma.$UsageQuotaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UsageQuota that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsageQuotaFindUniqueOrThrowArgs} args - Arguments to find a UsageQuota
     * @example
     * // Get one UsageQuota
     * const usageQuota = await prisma.usageQuota.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsageQuotaFindUniqueOrThrowArgs>(args: SelectSubset<T, UsageQuotaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsageQuotaClient<$Result.GetResult<Prisma.$UsageQuotaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UsageQuota that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageQuotaFindFirstArgs} args - Arguments to find a UsageQuota
     * @example
     * // Get one UsageQuota
     * const usageQuota = await prisma.usageQuota.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsageQuotaFindFirstArgs>(args?: SelectSubset<T, UsageQuotaFindFirstArgs<ExtArgs>>): Prisma__UsageQuotaClient<$Result.GetResult<Prisma.$UsageQuotaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UsageQuota that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageQuotaFindFirstOrThrowArgs} args - Arguments to find a UsageQuota
     * @example
     * // Get one UsageQuota
     * const usageQuota = await prisma.usageQuota.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsageQuotaFindFirstOrThrowArgs>(args?: SelectSubset<T, UsageQuotaFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsageQuotaClient<$Result.GetResult<Prisma.$UsageQuotaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UsageQuotas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageQuotaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsageQuotas
     * const usageQuotas = await prisma.usageQuota.findMany()
     * 
     * // Get first 10 UsageQuotas
     * const usageQuotas = await prisma.usageQuota.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usageQuotaWithIdOnly = await prisma.usageQuota.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsageQuotaFindManyArgs>(args?: SelectSubset<T, UsageQuotaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageQuotaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UsageQuota.
     * @param {UsageQuotaCreateArgs} args - Arguments to create a UsageQuota.
     * @example
     * // Create one UsageQuota
     * const UsageQuota = await prisma.usageQuota.create({
     *   data: {
     *     // ... data to create a UsageQuota
     *   }
     * })
     * 
     */
    create<T extends UsageQuotaCreateArgs>(args: SelectSubset<T, UsageQuotaCreateArgs<ExtArgs>>): Prisma__UsageQuotaClient<$Result.GetResult<Prisma.$UsageQuotaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UsageQuotas.
     * @param {UsageQuotaCreateManyArgs} args - Arguments to create many UsageQuotas.
     * @example
     * // Create many UsageQuotas
     * const usageQuota = await prisma.usageQuota.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsageQuotaCreateManyArgs>(args?: SelectSubset<T, UsageQuotaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UsageQuotas and returns the data saved in the database.
     * @param {UsageQuotaCreateManyAndReturnArgs} args - Arguments to create many UsageQuotas.
     * @example
     * // Create many UsageQuotas
     * const usageQuota = await prisma.usageQuota.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UsageQuotas and only return the `id`
     * const usageQuotaWithIdOnly = await prisma.usageQuota.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsageQuotaCreateManyAndReturnArgs>(args?: SelectSubset<T, UsageQuotaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageQuotaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UsageQuota.
     * @param {UsageQuotaDeleteArgs} args - Arguments to delete one UsageQuota.
     * @example
     * // Delete one UsageQuota
     * const UsageQuota = await prisma.usageQuota.delete({
     *   where: {
     *     // ... filter to delete one UsageQuota
     *   }
     * })
     * 
     */
    delete<T extends UsageQuotaDeleteArgs>(args: SelectSubset<T, UsageQuotaDeleteArgs<ExtArgs>>): Prisma__UsageQuotaClient<$Result.GetResult<Prisma.$UsageQuotaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UsageQuota.
     * @param {UsageQuotaUpdateArgs} args - Arguments to update one UsageQuota.
     * @example
     * // Update one UsageQuota
     * const usageQuota = await prisma.usageQuota.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsageQuotaUpdateArgs>(args: SelectSubset<T, UsageQuotaUpdateArgs<ExtArgs>>): Prisma__UsageQuotaClient<$Result.GetResult<Prisma.$UsageQuotaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UsageQuotas.
     * @param {UsageQuotaDeleteManyArgs} args - Arguments to filter UsageQuotas to delete.
     * @example
     * // Delete a few UsageQuotas
     * const { count } = await prisma.usageQuota.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsageQuotaDeleteManyArgs>(args?: SelectSubset<T, UsageQuotaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsageQuotas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageQuotaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsageQuotas
     * const usageQuota = await prisma.usageQuota.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsageQuotaUpdateManyArgs>(args: SelectSubset<T, UsageQuotaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsageQuotas and returns the data updated in the database.
     * @param {UsageQuotaUpdateManyAndReturnArgs} args - Arguments to update many UsageQuotas.
     * @example
     * // Update many UsageQuotas
     * const usageQuota = await prisma.usageQuota.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UsageQuotas and only return the `id`
     * const usageQuotaWithIdOnly = await prisma.usageQuota.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsageQuotaUpdateManyAndReturnArgs>(args: SelectSubset<T, UsageQuotaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageQuotaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UsageQuota.
     * @param {UsageQuotaUpsertArgs} args - Arguments to update or create a UsageQuota.
     * @example
     * // Update or create a UsageQuota
     * const usageQuota = await prisma.usageQuota.upsert({
     *   create: {
     *     // ... data to create a UsageQuota
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsageQuota we want to update
     *   }
     * })
     */
    upsert<T extends UsageQuotaUpsertArgs>(args: SelectSubset<T, UsageQuotaUpsertArgs<ExtArgs>>): Prisma__UsageQuotaClient<$Result.GetResult<Prisma.$UsageQuotaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UsageQuotas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageQuotaCountArgs} args - Arguments to filter UsageQuotas to count.
     * @example
     * // Count the number of UsageQuotas
     * const count = await prisma.usageQuota.count({
     *   where: {
     *     // ... the filter for the UsageQuotas we want to count
     *   }
     * })
    **/
    count<T extends UsageQuotaCountArgs>(
      args?: Subset<T, UsageQuotaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsageQuotaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsageQuota.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageQuotaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsageQuotaAggregateArgs>(args: Subset<T, UsageQuotaAggregateArgs>): Prisma.PrismaPromise<GetUsageQuotaAggregateType<T>>

    /**
     * Group by UsageQuota.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageQuotaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsageQuotaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsageQuotaGroupByArgs['orderBy'] }
        : { orderBy?: UsageQuotaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsageQuotaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsageQuotaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsageQuota model
   */
  readonly fields: UsageQuotaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsageQuota.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsageQuotaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UsageQuota model
   */
  interface UsageQuotaFieldRefs {
    readonly id: FieldRef<"UsageQuota", 'String'>
    readonly userId: FieldRef<"UsageQuota", 'String'>
    readonly resourceType: FieldRef<"UsageQuota", 'String'>
    readonly usedCount: FieldRef<"UsageQuota", 'Int'>
    readonly limitCount: FieldRef<"UsageQuota", 'Int'>
    readonly periodStart: FieldRef<"UsageQuota", 'DateTime'>
    readonly periodEnd: FieldRef<"UsageQuota", 'DateTime'>
    readonly createdAt: FieldRef<"UsageQuota", 'DateTime'>
    readonly updatedAt: FieldRef<"UsageQuota", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UsageQuota findUnique
   */
  export type UsageQuotaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageQuota
     */
    select?: UsageQuotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageQuota
     */
    omit?: UsageQuotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageQuotaInclude<ExtArgs> | null
    /**
     * Filter, which UsageQuota to fetch.
     */
    where: UsageQuotaWhereUniqueInput
  }

  /**
   * UsageQuota findUniqueOrThrow
   */
  export type UsageQuotaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageQuota
     */
    select?: UsageQuotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageQuota
     */
    omit?: UsageQuotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageQuotaInclude<ExtArgs> | null
    /**
     * Filter, which UsageQuota to fetch.
     */
    where: UsageQuotaWhereUniqueInput
  }

  /**
   * UsageQuota findFirst
   */
  export type UsageQuotaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageQuota
     */
    select?: UsageQuotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageQuota
     */
    omit?: UsageQuotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageQuotaInclude<ExtArgs> | null
    /**
     * Filter, which UsageQuota to fetch.
     */
    where?: UsageQuotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageQuotas to fetch.
     */
    orderBy?: UsageQuotaOrderByWithRelationInput | UsageQuotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsageQuotas.
     */
    cursor?: UsageQuotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageQuotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageQuotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsageQuotas.
     */
    distinct?: UsageQuotaScalarFieldEnum | UsageQuotaScalarFieldEnum[]
  }

  /**
   * UsageQuota findFirstOrThrow
   */
  export type UsageQuotaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageQuota
     */
    select?: UsageQuotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageQuota
     */
    omit?: UsageQuotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageQuotaInclude<ExtArgs> | null
    /**
     * Filter, which UsageQuota to fetch.
     */
    where?: UsageQuotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageQuotas to fetch.
     */
    orderBy?: UsageQuotaOrderByWithRelationInput | UsageQuotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsageQuotas.
     */
    cursor?: UsageQuotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageQuotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageQuotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsageQuotas.
     */
    distinct?: UsageQuotaScalarFieldEnum | UsageQuotaScalarFieldEnum[]
  }

  /**
   * UsageQuota findMany
   */
  export type UsageQuotaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageQuota
     */
    select?: UsageQuotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageQuota
     */
    omit?: UsageQuotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageQuotaInclude<ExtArgs> | null
    /**
     * Filter, which UsageQuotas to fetch.
     */
    where?: UsageQuotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageQuotas to fetch.
     */
    orderBy?: UsageQuotaOrderByWithRelationInput | UsageQuotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsageQuotas.
     */
    cursor?: UsageQuotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageQuotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageQuotas.
     */
    skip?: number
    distinct?: UsageQuotaScalarFieldEnum | UsageQuotaScalarFieldEnum[]
  }

  /**
   * UsageQuota create
   */
  export type UsageQuotaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageQuota
     */
    select?: UsageQuotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageQuota
     */
    omit?: UsageQuotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageQuotaInclude<ExtArgs> | null
    /**
     * The data needed to create a UsageQuota.
     */
    data: XOR<UsageQuotaCreateInput, UsageQuotaUncheckedCreateInput>
  }

  /**
   * UsageQuota createMany
   */
  export type UsageQuotaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsageQuotas.
     */
    data: UsageQuotaCreateManyInput | UsageQuotaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UsageQuota createManyAndReturn
   */
  export type UsageQuotaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageQuota
     */
    select?: UsageQuotaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UsageQuota
     */
    omit?: UsageQuotaOmit<ExtArgs> | null
    /**
     * The data used to create many UsageQuotas.
     */
    data: UsageQuotaCreateManyInput | UsageQuotaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageQuotaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsageQuota update
   */
  export type UsageQuotaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageQuota
     */
    select?: UsageQuotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageQuota
     */
    omit?: UsageQuotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageQuotaInclude<ExtArgs> | null
    /**
     * The data needed to update a UsageQuota.
     */
    data: XOR<UsageQuotaUpdateInput, UsageQuotaUncheckedUpdateInput>
    /**
     * Choose, which UsageQuota to update.
     */
    where: UsageQuotaWhereUniqueInput
  }

  /**
   * UsageQuota updateMany
   */
  export type UsageQuotaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsageQuotas.
     */
    data: XOR<UsageQuotaUpdateManyMutationInput, UsageQuotaUncheckedUpdateManyInput>
    /**
     * Filter which UsageQuotas to update
     */
    where?: UsageQuotaWhereInput
    /**
     * Limit how many UsageQuotas to update.
     */
    limit?: number
  }

  /**
   * UsageQuota updateManyAndReturn
   */
  export type UsageQuotaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageQuota
     */
    select?: UsageQuotaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UsageQuota
     */
    omit?: UsageQuotaOmit<ExtArgs> | null
    /**
     * The data used to update UsageQuotas.
     */
    data: XOR<UsageQuotaUpdateManyMutationInput, UsageQuotaUncheckedUpdateManyInput>
    /**
     * Filter which UsageQuotas to update
     */
    where?: UsageQuotaWhereInput
    /**
     * Limit how many UsageQuotas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageQuotaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsageQuota upsert
   */
  export type UsageQuotaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageQuota
     */
    select?: UsageQuotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageQuota
     */
    omit?: UsageQuotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageQuotaInclude<ExtArgs> | null
    /**
     * The filter to search for the UsageQuota to update in case it exists.
     */
    where: UsageQuotaWhereUniqueInput
    /**
     * In case the UsageQuota found by the `where` argument doesn't exist, create a new UsageQuota with this data.
     */
    create: XOR<UsageQuotaCreateInput, UsageQuotaUncheckedCreateInput>
    /**
     * In case the UsageQuota was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsageQuotaUpdateInput, UsageQuotaUncheckedUpdateInput>
  }

  /**
   * UsageQuota delete
   */
  export type UsageQuotaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageQuota
     */
    select?: UsageQuotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageQuota
     */
    omit?: UsageQuotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageQuotaInclude<ExtArgs> | null
    /**
     * Filter which UsageQuota to delete.
     */
    where: UsageQuotaWhereUniqueInput
  }

  /**
   * UsageQuota deleteMany
   */
  export type UsageQuotaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsageQuotas to delete
     */
    where?: UsageQuotaWhereInput
    /**
     * Limit how many UsageQuotas to delete.
     */
    limit?: number
  }

  /**
   * UsageQuota without action
   */
  export type UsageQuotaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageQuota
     */
    select?: UsageQuotaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageQuota
     */
    omit?: UsageQuotaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageQuotaInclude<ExtArgs> | null
  }


  /**
   * Model PaymentTransaction
   */

  export type AggregatePaymentTransaction = {
    _count: PaymentTransactionCountAggregateOutputType | null
    _avg: PaymentTransactionAvgAggregateOutputType | null
    _sum: PaymentTransactionSumAggregateOutputType | null
    _min: PaymentTransactionMinAggregateOutputType | null
    _max: PaymentTransactionMaxAggregateOutputType | null
  }

  export type PaymentTransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type PaymentTransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type PaymentTransactionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    stripeSessionId: string | null
    stripePaymentId: string | null
    amount: number | null
    currency: string | null
    status: string | null
    subscriptionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentTransactionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    stripeSessionId: string | null
    stripePaymentId: string | null
    amount: number | null
    currency: string | null
    status: string | null
    subscriptionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentTransactionCountAggregateOutputType = {
    id: number
    userId: number
    stripeSessionId: number
    stripePaymentId: number
    amount: number
    currency: number
    status: number
    subscriptionId: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentTransactionAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentTransactionSumAggregateInputType = {
    amount?: true
  }

  export type PaymentTransactionMinAggregateInputType = {
    id?: true
    userId?: true
    stripeSessionId?: true
    stripePaymentId?: true
    amount?: true
    currency?: true
    status?: true
    subscriptionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentTransactionMaxAggregateInputType = {
    id?: true
    userId?: true
    stripeSessionId?: true
    stripePaymentId?: true
    amount?: true
    currency?: true
    status?: true
    subscriptionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentTransactionCountAggregateInputType = {
    id?: true
    userId?: true
    stripeSessionId?: true
    stripePaymentId?: true
    amount?: true
    currency?: true
    status?: true
    subscriptionId?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentTransaction to aggregate.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentTransactions
    **/
    _count?: true | PaymentTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentTransactionMaxAggregateInputType
  }

  export type GetPaymentTransactionAggregateType<T extends PaymentTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentTransaction[P]>
      : GetScalarType<T[P], AggregatePaymentTransaction[P]>
  }




  export type PaymentTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTransactionWhereInput
    orderBy?: PaymentTransactionOrderByWithAggregationInput | PaymentTransactionOrderByWithAggregationInput[]
    by: PaymentTransactionScalarFieldEnum[] | PaymentTransactionScalarFieldEnum
    having?: PaymentTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentTransactionCountAggregateInputType | true
    _avg?: PaymentTransactionAvgAggregateInputType
    _sum?: PaymentTransactionSumAggregateInputType
    _min?: PaymentTransactionMinAggregateInputType
    _max?: PaymentTransactionMaxAggregateInputType
  }

  export type PaymentTransactionGroupByOutputType = {
    id: string
    userId: string
    stripeSessionId: string | null
    stripePaymentId: string | null
    amount: number
    currency: string
    status: string
    subscriptionId: string | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: PaymentTransactionCountAggregateOutputType | null
    _avg: PaymentTransactionAvgAggregateOutputType | null
    _sum: PaymentTransactionSumAggregateOutputType | null
    _min: PaymentTransactionMinAggregateOutputType | null
    _max: PaymentTransactionMaxAggregateOutputType | null
  }

  type GetPaymentTransactionGroupByPayload<T extends PaymentTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentTransactionGroupByOutputType[P]>
        }
      >
    >


  export type PaymentTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stripeSessionId?: boolean
    stripePaymentId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    subscriptionId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    subscription?: boolean | PaymentTransaction$subscriptionArgs<ExtArgs>
  }, ExtArgs["result"]["paymentTransaction"]>

  export type PaymentTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stripeSessionId?: boolean
    stripePaymentId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    subscriptionId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    subscription?: boolean | PaymentTransaction$subscriptionArgs<ExtArgs>
  }, ExtArgs["result"]["paymentTransaction"]>

  export type PaymentTransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stripeSessionId?: boolean
    stripePaymentId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    subscriptionId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    subscription?: boolean | PaymentTransaction$subscriptionArgs<ExtArgs>
  }, ExtArgs["result"]["paymentTransaction"]>

  export type PaymentTransactionSelectScalar = {
    id?: boolean
    userId?: boolean
    stripeSessionId?: boolean
    stripePaymentId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    subscriptionId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentTransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "stripeSessionId" | "stripePaymentId" | "amount" | "currency" | "status" | "subscriptionId" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["paymentTransaction"]>
  export type PaymentTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    subscription?: boolean | PaymentTransaction$subscriptionArgs<ExtArgs>
  }
  export type PaymentTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    subscription?: boolean | PaymentTransaction$subscriptionArgs<ExtArgs>
  }
  export type PaymentTransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    subscription?: boolean | PaymentTransaction$subscriptionArgs<ExtArgs>
  }

  export type $PaymentTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentTransaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      subscription: Prisma.$UserSubscriptionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      stripeSessionId: string | null
      stripePaymentId: string | null
      amount: number
      currency: string
      status: string
      subscriptionId: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["paymentTransaction"]>
    composites: {}
  }

  type PaymentTransactionGetPayload<S extends boolean | null | undefined | PaymentTransactionDefaultArgs> = $Result.GetResult<Prisma.$PaymentTransactionPayload, S>

  type PaymentTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentTransactionCountAggregateInputType | true
    }

  export interface PaymentTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentTransaction'], meta: { name: 'PaymentTransaction' } }
    /**
     * Find zero or one PaymentTransaction that matches the filter.
     * @param {PaymentTransactionFindUniqueArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentTransactionFindUniqueArgs>(args: SelectSubset<T, PaymentTransactionFindUniqueArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PaymentTransaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentTransactionFindUniqueOrThrowArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionFindFirstArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentTransactionFindFirstArgs>(args?: SelectSubset<T, PaymentTransactionFindFirstArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionFindFirstOrThrowArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PaymentTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentTransactions
     * const paymentTransactions = await prisma.paymentTransaction.findMany()
     * 
     * // Get first 10 PaymentTransactions
     * const paymentTransactions = await prisma.paymentTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentTransactionWithIdOnly = await prisma.paymentTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentTransactionFindManyArgs>(args?: SelectSubset<T, PaymentTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PaymentTransaction.
     * @param {PaymentTransactionCreateArgs} args - Arguments to create a PaymentTransaction.
     * @example
     * // Create one PaymentTransaction
     * const PaymentTransaction = await prisma.paymentTransaction.create({
     *   data: {
     *     // ... data to create a PaymentTransaction
     *   }
     * })
     * 
     */
    create<T extends PaymentTransactionCreateArgs>(args: SelectSubset<T, PaymentTransactionCreateArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PaymentTransactions.
     * @param {PaymentTransactionCreateManyArgs} args - Arguments to create many PaymentTransactions.
     * @example
     * // Create many PaymentTransactions
     * const paymentTransaction = await prisma.paymentTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentTransactionCreateManyArgs>(args?: SelectSubset<T, PaymentTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentTransactions and returns the data saved in the database.
     * @param {PaymentTransactionCreateManyAndReturnArgs} args - Arguments to create many PaymentTransactions.
     * @example
     * // Create many PaymentTransactions
     * const paymentTransaction = await prisma.paymentTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentTransactions and only return the `id`
     * const paymentTransactionWithIdOnly = await prisma.paymentTransaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PaymentTransaction.
     * @param {PaymentTransactionDeleteArgs} args - Arguments to delete one PaymentTransaction.
     * @example
     * // Delete one PaymentTransaction
     * const PaymentTransaction = await prisma.paymentTransaction.delete({
     *   where: {
     *     // ... filter to delete one PaymentTransaction
     *   }
     * })
     * 
     */
    delete<T extends PaymentTransactionDeleteArgs>(args: SelectSubset<T, PaymentTransactionDeleteArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PaymentTransaction.
     * @param {PaymentTransactionUpdateArgs} args - Arguments to update one PaymentTransaction.
     * @example
     * // Update one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentTransactionUpdateArgs>(args: SelectSubset<T, PaymentTransactionUpdateArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PaymentTransactions.
     * @param {PaymentTransactionDeleteManyArgs} args - Arguments to filter PaymentTransactions to delete.
     * @example
     * // Delete a few PaymentTransactions
     * const { count } = await prisma.paymentTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentTransactionDeleteManyArgs>(args?: SelectSubset<T, PaymentTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentTransactions
     * const paymentTransaction = await prisma.paymentTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentTransactionUpdateManyArgs>(args: SelectSubset<T, PaymentTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentTransactions and returns the data updated in the database.
     * @param {PaymentTransactionUpdateManyAndReturnArgs} args - Arguments to update many PaymentTransactions.
     * @example
     * // Update many PaymentTransactions
     * const paymentTransaction = await prisma.paymentTransaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PaymentTransactions and only return the `id`
     * const paymentTransactionWithIdOnly = await prisma.paymentTransaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentTransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PaymentTransaction.
     * @param {PaymentTransactionUpsertArgs} args - Arguments to update or create a PaymentTransaction.
     * @example
     * // Update or create a PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.upsert({
     *   create: {
     *     // ... data to create a PaymentTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentTransaction we want to update
     *   }
     * })
     */
    upsert<T extends PaymentTransactionUpsertArgs>(args: SelectSubset<T, PaymentTransactionUpsertArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PaymentTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionCountArgs} args - Arguments to filter PaymentTransactions to count.
     * @example
     * // Count the number of PaymentTransactions
     * const count = await prisma.paymentTransaction.count({
     *   where: {
     *     // ... the filter for the PaymentTransactions we want to count
     *   }
     * })
    **/
    count<T extends PaymentTransactionCountArgs>(
      args?: Subset<T, PaymentTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentTransactionAggregateArgs>(args: Subset<T, PaymentTransactionAggregateArgs>): Prisma.PrismaPromise<GetPaymentTransactionAggregateType<T>>

    /**
     * Group by PaymentTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentTransactionGroupByArgs['orderBy'] }
        : { orderBy?: PaymentTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentTransaction model
   */
  readonly fields: PaymentTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subscription<T extends PaymentTransaction$subscriptionArgs<ExtArgs> = {}>(args?: Subset<T, PaymentTransaction$subscriptionArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentTransaction model
   */
  interface PaymentTransactionFieldRefs {
    readonly id: FieldRef<"PaymentTransaction", 'String'>
    readonly userId: FieldRef<"PaymentTransaction", 'String'>
    readonly stripeSessionId: FieldRef<"PaymentTransaction", 'String'>
    readonly stripePaymentId: FieldRef<"PaymentTransaction", 'String'>
    readonly amount: FieldRef<"PaymentTransaction", 'Int'>
    readonly currency: FieldRef<"PaymentTransaction", 'String'>
    readonly status: FieldRef<"PaymentTransaction", 'String'>
    readonly subscriptionId: FieldRef<"PaymentTransaction", 'String'>
    readonly metadata: FieldRef<"PaymentTransaction", 'Json'>
    readonly createdAt: FieldRef<"PaymentTransaction", 'DateTime'>
    readonly updatedAt: FieldRef<"PaymentTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaymentTransaction findUnique
   */
  export type PaymentTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where: PaymentTransactionWhereUniqueInput
  }

  /**
   * PaymentTransaction findUniqueOrThrow
   */
  export type PaymentTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where: PaymentTransactionWhereUniqueInput
  }

  /**
   * PaymentTransaction findFirst
   */
  export type PaymentTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentTransactions.
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentTransactions.
     */
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * PaymentTransaction findFirstOrThrow
   */
  export type PaymentTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentTransactions.
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentTransactions.
     */
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * PaymentTransaction findMany
   */
  export type PaymentTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransactions to fetch.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentTransactions.
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * PaymentTransaction create
   */
  export type PaymentTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentTransaction.
     */
    data: XOR<PaymentTransactionCreateInput, PaymentTransactionUncheckedCreateInput>
  }

  /**
   * PaymentTransaction createMany
   */
  export type PaymentTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentTransactions.
     */
    data: PaymentTransactionCreateManyInput | PaymentTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentTransaction createManyAndReturn
   */
  export type PaymentTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * The data used to create many PaymentTransactions.
     */
    data: PaymentTransactionCreateManyInput | PaymentTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentTransaction update
   */
  export type PaymentTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentTransaction.
     */
    data: XOR<PaymentTransactionUpdateInput, PaymentTransactionUncheckedUpdateInput>
    /**
     * Choose, which PaymentTransaction to update.
     */
    where: PaymentTransactionWhereUniqueInput
  }

  /**
   * PaymentTransaction updateMany
   */
  export type PaymentTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentTransactions.
     */
    data: XOR<PaymentTransactionUpdateManyMutationInput, PaymentTransactionUncheckedUpdateManyInput>
    /**
     * Filter which PaymentTransactions to update
     */
    where?: PaymentTransactionWhereInput
    /**
     * Limit how many PaymentTransactions to update.
     */
    limit?: number
  }

  /**
   * PaymentTransaction updateManyAndReturn
   */
  export type PaymentTransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * The data used to update PaymentTransactions.
     */
    data: XOR<PaymentTransactionUpdateManyMutationInput, PaymentTransactionUncheckedUpdateManyInput>
    /**
     * Filter which PaymentTransactions to update
     */
    where?: PaymentTransactionWhereInput
    /**
     * Limit how many PaymentTransactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentTransaction upsert
   */
  export type PaymentTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentTransaction to update in case it exists.
     */
    where: PaymentTransactionWhereUniqueInput
    /**
     * In case the PaymentTransaction found by the `where` argument doesn't exist, create a new PaymentTransaction with this data.
     */
    create: XOR<PaymentTransactionCreateInput, PaymentTransactionUncheckedCreateInput>
    /**
     * In case the PaymentTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentTransactionUpdateInput, PaymentTransactionUncheckedUpdateInput>
  }

  /**
   * PaymentTransaction delete
   */
  export type PaymentTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter which PaymentTransaction to delete.
     */
    where: PaymentTransactionWhereUniqueInput
  }

  /**
   * PaymentTransaction deleteMany
   */
  export type PaymentTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentTransactions to delete
     */
    where?: PaymentTransactionWhereInput
    /**
     * Limit how many PaymentTransactions to delete.
     */
    limit?: number
  }

  /**
   * PaymentTransaction.subscription
   */
  export type PaymentTransaction$subscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    where?: UserSubscriptionWhereInput
  }

  /**
   * PaymentTransaction without action
   */
  export type PaymentTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
  }


  /**
   * Model APIUsage
   */

  export type AggregateAPIUsage = {
    _count: APIUsageCountAggregateOutputType | null
    _avg: APIUsageAvgAggregateOutputType | null
    _sum: APIUsageSumAggregateOutputType | null
    _min: APIUsageMinAggregateOutputType | null
    _max: APIUsageMaxAggregateOutputType | null
  }

  export type APIUsageAvgAggregateOutputType = {
    statusCode: number | null
    responseTime: number | null
  }

  export type APIUsageSumAggregateOutputType = {
    statusCode: number | null
    responseTime: number | null
  }

  export type APIUsageMinAggregateOutputType = {
    id: string | null
    userId: string | null
    endpoint: string | null
    method: string | null
    statusCode: number | null
    responseTime: number | null
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date | null
  }

  export type APIUsageMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    endpoint: string | null
    method: string | null
    statusCode: number | null
    responseTime: number | null
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date | null
  }

  export type APIUsageCountAggregateOutputType = {
    id: number
    userId: number
    endpoint: number
    method: number
    statusCode: number
    responseTime: number
    userAgent: number
    ipAddress: number
    createdAt: number
    _all: number
  }


  export type APIUsageAvgAggregateInputType = {
    statusCode?: true
    responseTime?: true
  }

  export type APIUsageSumAggregateInputType = {
    statusCode?: true
    responseTime?: true
  }

  export type APIUsageMinAggregateInputType = {
    id?: true
    userId?: true
    endpoint?: true
    method?: true
    statusCode?: true
    responseTime?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
  }

  export type APIUsageMaxAggregateInputType = {
    id?: true
    userId?: true
    endpoint?: true
    method?: true
    statusCode?: true
    responseTime?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
  }

  export type APIUsageCountAggregateInputType = {
    id?: true
    userId?: true
    endpoint?: true
    method?: true
    statusCode?: true
    responseTime?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
    _all?: true
  }

  export type APIUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which APIUsage to aggregate.
     */
    where?: APIUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of APIUsages to fetch.
     */
    orderBy?: APIUsageOrderByWithRelationInput | APIUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: APIUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` APIUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` APIUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned APIUsages
    **/
    _count?: true | APIUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: APIUsageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: APIUsageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: APIUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: APIUsageMaxAggregateInputType
  }

  export type GetAPIUsageAggregateType<T extends APIUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateAPIUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAPIUsage[P]>
      : GetScalarType<T[P], AggregateAPIUsage[P]>
  }




  export type APIUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: APIUsageWhereInput
    orderBy?: APIUsageOrderByWithAggregationInput | APIUsageOrderByWithAggregationInput[]
    by: APIUsageScalarFieldEnum[] | APIUsageScalarFieldEnum
    having?: APIUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: APIUsageCountAggregateInputType | true
    _avg?: APIUsageAvgAggregateInputType
    _sum?: APIUsageSumAggregateInputType
    _min?: APIUsageMinAggregateInputType
    _max?: APIUsageMaxAggregateInputType
  }

  export type APIUsageGroupByOutputType = {
    id: string
    userId: string | null
    endpoint: string
    method: string
    statusCode: number
    responseTime: number
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date
    _count: APIUsageCountAggregateOutputType | null
    _avg: APIUsageAvgAggregateOutputType | null
    _sum: APIUsageSumAggregateOutputType | null
    _min: APIUsageMinAggregateOutputType | null
    _max: APIUsageMaxAggregateOutputType | null
  }

  type GetAPIUsageGroupByPayload<T extends APIUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<APIUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof APIUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], APIUsageGroupByOutputType[P]>
            : GetScalarType<T[P], APIUsageGroupByOutputType[P]>
        }
      >
    >


  export type APIUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    responseTime?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["aPIUsage"]>

  export type APIUsageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    responseTime?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["aPIUsage"]>

  export type APIUsageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    responseTime?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["aPIUsage"]>

  export type APIUsageSelectScalar = {
    id?: boolean
    userId?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    responseTime?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
  }

  export type APIUsageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "endpoint" | "method" | "statusCode" | "responseTime" | "userAgent" | "ipAddress" | "createdAt", ExtArgs["result"]["aPIUsage"]>

  export type $APIUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "APIUsage"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      endpoint: string
      method: string
      statusCode: number
      responseTime: number
      userAgent: string | null
      ipAddress: string | null
      createdAt: Date
    }, ExtArgs["result"]["aPIUsage"]>
    composites: {}
  }

  type APIUsageGetPayload<S extends boolean | null | undefined | APIUsageDefaultArgs> = $Result.GetResult<Prisma.$APIUsagePayload, S>

  type APIUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<APIUsageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: APIUsageCountAggregateInputType | true
    }

  export interface APIUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['APIUsage'], meta: { name: 'APIUsage' } }
    /**
     * Find zero or one APIUsage that matches the filter.
     * @param {APIUsageFindUniqueArgs} args - Arguments to find a APIUsage
     * @example
     * // Get one APIUsage
     * const aPIUsage = await prisma.aPIUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends APIUsageFindUniqueArgs>(args: SelectSubset<T, APIUsageFindUniqueArgs<ExtArgs>>): Prisma__APIUsageClient<$Result.GetResult<Prisma.$APIUsagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one APIUsage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {APIUsageFindUniqueOrThrowArgs} args - Arguments to find a APIUsage
     * @example
     * // Get one APIUsage
     * const aPIUsage = await prisma.aPIUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends APIUsageFindUniqueOrThrowArgs>(args: SelectSubset<T, APIUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__APIUsageClient<$Result.GetResult<Prisma.$APIUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first APIUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIUsageFindFirstArgs} args - Arguments to find a APIUsage
     * @example
     * // Get one APIUsage
     * const aPIUsage = await prisma.aPIUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends APIUsageFindFirstArgs>(args?: SelectSubset<T, APIUsageFindFirstArgs<ExtArgs>>): Prisma__APIUsageClient<$Result.GetResult<Prisma.$APIUsagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first APIUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIUsageFindFirstOrThrowArgs} args - Arguments to find a APIUsage
     * @example
     * // Get one APIUsage
     * const aPIUsage = await prisma.aPIUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends APIUsageFindFirstOrThrowArgs>(args?: SelectSubset<T, APIUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma__APIUsageClient<$Result.GetResult<Prisma.$APIUsagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more APIUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIUsageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all APIUsages
     * const aPIUsages = await prisma.aPIUsage.findMany()
     * 
     * // Get first 10 APIUsages
     * const aPIUsages = await prisma.aPIUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aPIUsageWithIdOnly = await prisma.aPIUsage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends APIUsageFindManyArgs>(args?: SelectSubset<T, APIUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$APIUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a APIUsage.
     * @param {APIUsageCreateArgs} args - Arguments to create a APIUsage.
     * @example
     * // Create one APIUsage
     * const APIUsage = await prisma.aPIUsage.create({
     *   data: {
     *     // ... data to create a APIUsage
     *   }
     * })
     * 
     */
    create<T extends APIUsageCreateArgs>(args: SelectSubset<T, APIUsageCreateArgs<ExtArgs>>): Prisma__APIUsageClient<$Result.GetResult<Prisma.$APIUsagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many APIUsages.
     * @param {APIUsageCreateManyArgs} args - Arguments to create many APIUsages.
     * @example
     * // Create many APIUsages
     * const aPIUsage = await prisma.aPIUsage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends APIUsageCreateManyArgs>(args?: SelectSubset<T, APIUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many APIUsages and returns the data saved in the database.
     * @param {APIUsageCreateManyAndReturnArgs} args - Arguments to create many APIUsages.
     * @example
     * // Create many APIUsages
     * const aPIUsage = await prisma.aPIUsage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many APIUsages and only return the `id`
     * const aPIUsageWithIdOnly = await prisma.aPIUsage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends APIUsageCreateManyAndReturnArgs>(args?: SelectSubset<T, APIUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$APIUsagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a APIUsage.
     * @param {APIUsageDeleteArgs} args - Arguments to delete one APIUsage.
     * @example
     * // Delete one APIUsage
     * const APIUsage = await prisma.aPIUsage.delete({
     *   where: {
     *     // ... filter to delete one APIUsage
     *   }
     * })
     * 
     */
    delete<T extends APIUsageDeleteArgs>(args: SelectSubset<T, APIUsageDeleteArgs<ExtArgs>>): Prisma__APIUsageClient<$Result.GetResult<Prisma.$APIUsagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one APIUsage.
     * @param {APIUsageUpdateArgs} args - Arguments to update one APIUsage.
     * @example
     * // Update one APIUsage
     * const aPIUsage = await prisma.aPIUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends APIUsageUpdateArgs>(args: SelectSubset<T, APIUsageUpdateArgs<ExtArgs>>): Prisma__APIUsageClient<$Result.GetResult<Prisma.$APIUsagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more APIUsages.
     * @param {APIUsageDeleteManyArgs} args - Arguments to filter APIUsages to delete.
     * @example
     * // Delete a few APIUsages
     * const { count } = await prisma.aPIUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends APIUsageDeleteManyArgs>(args?: SelectSubset<T, APIUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more APIUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many APIUsages
     * const aPIUsage = await prisma.aPIUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends APIUsageUpdateManyArgs>(args: SelectSubset<T, APIUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more APIUsages and returns the data updated in the database.
     * @param {APIUsageUpdateManyAndReturnArgs} args - Arguments to update many APIUsages.
     * @example
     * // Update many APIUsages
     * const aPIUsage = await prisma.aPIUsage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more APIUsages and only return the `id`
     * const aPIUsageWithIdOnly = await prisma.aPIUsage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends APIUsageUpdateManyAndReturnArgs>(args: SelectSubset<T, APIUsageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$APIUsagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one APIUsage.
     * @param {APIUsageUpsertArgs} args - Arguments to update or create a APIUsage.
     * @example
     * // Update or create a APIUsage
     * const aPIUsage = await prisma.aPIUsage.upsert({
     *   create: {
     *     // ... data to create a APIUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the APIUsage we want to update
     *   }
     * })
     */
    upsert<T extends APIUsageUpsertArgs>(args: SelectSubset<T, APIUsageUpsertArgs<ExtArgs>>): Prisma__APIUsageClient<$Result.GetResult<Prisma.$APIUsagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of APIUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIUsageCountArgs} args - Arguments to filter APIUsages to count.
     * @example
     * // Count the number of APIUsages
     * const count = await prisma.aPIUsage.count({
     *   where: {
     *     // ... the filter for the APIUsages we want to count
     *   }
     * })
    **/
    count<T extends APIUsageCountArgs>(
      args?: Subset<T, APIUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], APIUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a APIUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends APIUsageAggregateArgs>(args: Subset<T, APIUsageAggregateArgs>): Prisma.PrismaPromise<GetAPIUsageAggregateType<T>>

    /**
     * Group by APIUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends APIUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: APIUsageGroupByArgs['orderBy'] }
        : { orderBy?: APIUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, APIUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAPIUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the APIUsage model
   */
  readonly fields: APIUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for APIUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__APIUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the APIUsage model
   */
  interface APIUsageFieldRefs {
    readonly id: FieldRef<"APIUsage", 'String'>
    readonly userId: FieldRef<"APIUsage", 'String'>
    readonly endpoint: FieldRef<"APIUsage", 'String'>
    readonly method: FieldRef<"APIUsage", 'String'>
    readonly statusCode: FieldRef<"APIUsage", 'Int'>
    readonly responseTime: FieldRef<"APIUsage", 'Int'>
    readonly userAgent: FieldRef<"APIUsage", 'String'>
    readonly ipAddress: FieldRef<"APIUsage", 'String'>
    readonly createdAt: FieldRef<"APIUsage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * APIUsage findUnique
   */
  export type APIUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUsage
     */
    select?: APIUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the APIUsage
     */
    omit?: APIUsageOmit<ExtArgs> | null
    /**
     * Filter, which APIUsage to fetch.
     */
    where: APIUsageWhereUniqueInput
  }

  /**
   * APIUsage findUniqueOrThrow
   */
  export type APIUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUsage
     */
    select?: APIUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the APIUsage
     */
    omit?: APIUsageOmit<ExtArgs> | null
    /**
     * Filter, which APIUsage to fetch.
     */
    where: APIUsageWhereUniqueInput
  }

  /**
   * APIUsage findFirst
   */
  export type APIUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUsage
     */
    select?: APIUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the APIUsage
     */
    omit?: APIUsageOmit<ExtArgs> | null
    /**
     * Filter, which APIUsage to fetch.
     */
    where?: APIUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of APIUsages to fetch.
     */
    orderBy?: APIUsageOrderByWithRelationInput | APIUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for APIUsages.
     */
    cursor?: APIUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` APIUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` APIUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of APIUsages.
     */
    distinct?: APIUsageScalarFieldEnum | APIUsageScalarFieldEnum[]
  }

  /**
   * APIUsage findFirstOrThrow
   */
  export type APIUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUsage
     */
    select?: APIUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the APIUsage
     */
    omit?: APIUsageOmit<ExtArgs> | null
    /**
     * Filter, which APIUsage to fetch.
     */
    where?: APIUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of APIUsages to fetch.
     */
    orderBy?: APIUsageOrderByWithRelationInput | APIUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for APIUsages.
     */
    cursor?: APIUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` APIUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` APIUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of APIUsages.
     */
    distinct?: APIUsageScalarFieldEnum | APIUsageScalarFieldEnum[]
  }

  /**
   * APIUsage findMany
   */
  export type APIUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUsage
     */
    select?: APIUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the APIUsage
     */
    omit?: APIUsageOmit<ExtArgs> | null
    /**
     * Filter, which APIUsages to fetch.
     */
    where?: APIUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of APIUsages to fetch.
     */
    orderBy?: APIUsageOrderByWithRelationInput | APIUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing APIUsages.
     */
    cursor?: APIUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` APIUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` APIUsages.
     */
    skip?: number
    distinct?: APIUsageScalarFieldEnum | APIUsageScalarFieldEnum[]
  }

  /**
   * APIUsage create
   */
  export type APIUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUsage
     */
    select?: APIUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the APIUsage
     */
    omit?: APIUsageOmit<ExtArgs> | null
    /**
     * The data needed to create a APIUsage.
     */
    data: XOR<APIUsageCreateInput, APIUsageUncheckedCreateInput>
  }

  /**
   * APIUsage createMany
   */
  export type APIUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many APIUsages.
     */
    data: APIUsageCreateManyInput | APIUsageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * APIUsage createManyAndReturn
   */
  export type APIUsageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUsage
     */
    select?: APIUsageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the APIUsage
     */
    omit?: APIUsageOmit<ExtArgs> | null
    /**
     * The data used to create many APIUsages.
     */
    data: APIUsageCreateManyInput | APIUsageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * APIUsage update
   */
  export type APIUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUsage
     */
    select?: APIUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the APIUsage
     */
    omit?: APIUsageOmit<ExtArgs> | null
    /**
     * The data needed to update a APIUsage.
     */
    data: XOR<APIUsageUpdateInput, APIUsageUncheckedUpdateInput>
    /**
     * Choose, which APIUsage to update.
     */
    where: APIUsageWhereUniqueInput
  }

  /**
   * APIUsage updateMany
   */
  export type APIUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update APIUsages.
     */
    data: XOR<APIUsageUpdateManyMutationInput, APIUsageUncheckedUpdateManyInput>
    /**
     * Filter which APIUsages to update
     */
    where?: APIUsageWhereInput
    /**
     * Limit how many APIUsages to update.
     */
    limit?: number
  }

  /**
   * APIUsage updateManyAndReturn
   */
  export type APIUsageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUsage
     */
    select?: APIUsageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the APIUsage
     */
    omit?: APIUsageOmit<ExtArgs> | null
    /**
     * The data used to update APIUsages.
     */
    data: XOR<APIUsageUpdateManyMutationInput, APIUsageUncheckedUpdateManyInput>
    /**
     * Filter which APIUsages to update
     */
    where?: APIUsageWhereInput
    /**
     * Limit how many APIUsages to update.
     */
    limit?: number
  }

  /**
   * APIUsage upsert
   */
  export type APIUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUsage
     */
    select?: APIUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the APIUsage
     */
    omit?: APIUsageOmit<ExtArgs> | null
    /**
     * The filter to search for the APIUsage to update in case it exists.
     */
    where: APIUsageWhereUniqueInput
    /**
     * In case the APIUsage found by the `where` argument doesn't exist, create a new APIUsage with this data.
     */
    create: XOR<APIUsageCreateInput, APIUsageUncheckedCreateInput>
    /**
     * In case the APIUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<APIUsageUpdateInput, APIUsageUncheckedUpdateInput>
  }

  /**
   * APIUsage delete
   */
  export type APIUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUsage
     */
    select?: APIUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the APIUsage
     */
    omit?: APIUsageOmit<ExtArgs> | null
    /**
     * Filter which APIUsage to delete.
     */
    where: APIUsageWhereUniqueInput
  }

  /**
   * APIUsage deleteMany
   */
  export type APIUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which APIUsages to delete
     */
    where?: APIUsageWhereInput
    /**
     * Limit how many APIUsages to delete.
     */
    limit?: number
  }

  /**
   * APIUsage without action
   */
  export type APIUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIUsage
     */
    select?: APIUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the APIUsage
     */
    omit?: APIUsageOmit<ExtArgs> | null
  }


  /**
   * Model TokenBlacklist
   */

  export type AggregateTokenBlacklist = {
    _count: TokenBlacklistCountAggregateOutputType | null
    _min: TokenBlacklistMinAggregateOutputType | null
    _max: TokenBlacklistMaxAggregateOutputType | null
  }

  export type TokenBlacklistMinAggregateOutputType = {
    id: string | null
    userId: string | null
    tokenId: string | null
    reason: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type TokenBlacklistMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    tokenId: string | null
    reason: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type TokenBlacklistCountAggregateOutputType = {
    id: number
    userId: number
    tokenId: number
    reason: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type TokenBlacklistMinAggregateInputType = {
    id?: true
    userId?: true
    tokenId?: true
    reason?: true
    expiresAt?: true
    createdAt?: true
  }

  export type TokenBlacklistMaxAggregateInputType = {
    id?: true
    userId?: true
    tokenId?: true
    reason?: true
    expiresAt?: true
    createdAt?: true
  }

  export type TokenBlacklistCountAggregateInputType = {
    id?: true
    userId?: true
    tokenId?: true
    reason?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type TokenBlacklistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TokenBlacklist to aggregate.
     */
    where?: TokenBlacklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TokenBlacklists to fetch.
     */
    orderBy?: TokenBlacklistOrderByWithRelationInput | TokenBlacklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokenBlacklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TokenBlacklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TokenBlacklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TokenBlacklists
    **/
    _count?: true | TokenBlacklistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenBlacklistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenBlacklistMaxAggregateInputType
  }

  export type GetTokenBlacklistAggregateType<T extends TokenBlacklistAggregateArgs> = {
        [P in keyof T & keyof AggregateTokenBlacklist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTokenBlacklist[P]>
      : GetScalarType<T[P], AggregateTokenBlacklist[P]>
  }




  export type TokenBlacklistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenBlacklistWhereInput
    orderBy?: TokenBlacklistOrderByWithAggregationInput | TokenBlacklistOrderByWithAggregationInput[]
    by: TokenBlacklistScalarFieldEnum[] | TokenBlacklistScalarFieldEnum
    having?: TokenBlacklistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenBlacklistCountAggregateInputType | true
    _min?: TokenBlacklistMinAggregateInputType
    _max?: TokenBlacklistMaxAggregateInputType
  }

  export type TokenBlacklistGroupByOutputType = {
    id: string
    userId: string
    tokenId: string
    reason: string
    expiresAt: Date
    createdAt: Date
    _count: TokenBlacklistCountAggregateOutputType | null
    _min: TokenBlacklistMinAggregateOutputType | null
    _max: TokenBlacklistMaxAggregateOutputType | null
  }

  type GetTokenBlacklistGroupByPayload<T extends TokenBlacklistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokenBlacklistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenBlacklistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenBlacklistGroupByOutputType[P]>
            : GetScalarType<T[P], TokenBlacklistGroupByOutputType[P]>
        }
      >
    >


  export type TokenBlacklistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tokenId?: boolean
    reason?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tokenBlacklist"]>

  export type TokenBlacklistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tokenId?: boolean
    reason?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tokenBlacklist"]>

  export type TokenBlacklistSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tokenId?: boolean
    reason?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tokenBlacklist"]>

  export type TokenBlacklistSelectScalar = {
    id?: boolean
    userId?: boolean
    tokenId?: boolean
    reason?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type TokenBlacklistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "tokenId" | "reason" | "expiresAt" | "createdAt", ExtArgs["result"]["tokenBlacklist"]>

  export type $TokenBlacklistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TokenBlacklist"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      tokenId: string
      reason: string
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["tokenBlacklist"]>
    composites: {}
  }

  type TokenBlacklistGetPayload<S extends boolean | null | undefined | TokenBlacklistDefaultArgs> = $Result.GetResult<Prisma.$TokenBlacklistPayload, S>

  type TokenBlacklistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TokenBlacklistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TokenBlacklistCountAggregateInputType | true
    }

  export interface TokenBlacklistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TokenBlacklist'], meta: { name: 'TokenBlacklist' } }
    /**
     * Find zero or one TokenBlacklist that matches the filter.
     * @param {TokenBlacklistFindUniqueArgs} args - Arguments to find a TokenBlacklist
     * @example
     * // Get one TokenBlacklist
     * const tokenBlacklist = await prisma.tokenBlacklist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TokenBlacklistFindUniqueArgs>(args: SelectSubset<T, TokenBlacklistFindUniqueArgs<ExtArgs>>): Prisma__TokenBlacklistClient<$Result.GetResult<Prisma.$TokenBlacklistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TokenBlacklist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TokenBlacklistFindUniqueOrThrowArgs} args - Arguments to find a TokenBlacklist
     * @example
     * // Get one TokenBlacklist
     * const tokenBlacklist = await prisma.tokenBlacklist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TokenBlacklistFindUniqueOrThrowArgs>(args: SelectSubset<T, TokenBlacklistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TokenBlacklistClient<$Result.GetResult<Prisma.$TokenBlacklistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TokenBlacklist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenBlacklistFindFirstArgs} args - Arguments to find a TokenBlacklist
     * @example
     * // Get one TokenBlacklist
     * const tokenBlacklist = await prisma.tokenBlacklist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TokenBlacklistFindFirstArgs>(args?: SelectSubset<T, TokenBlacklistFindFirstArgs<ExtArgs>>): Prisma__TokenBlacklistClient<$Result.GetResult<Prisma.$TokenBlacklistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TokenBlacklist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenBlacklistFindFirstOrThrowArgs} args - Arguments to find a TokenBlacklist
     * @example
     * // Get one TokenBlacklist
     * const tokenBlacklist = await prisma.tokenBlacklist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TokenBlacklistFindFirstOrThrowArgs>(args?: SelectSubset<T, TokenBlacklistFindFirstOrThrowArgs<ExtArgs>>): Prisma__TokenBlacklistClient<$Result.GetResult<Prisma.$TokenBlacklistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TokenBlacklists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenBlacklistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TokenBlacklists
     * const tokenBlacklists = await prisma.tokenBlacklist.findMany()
     * 
     * // Get first 10 TokenBlacklists
     * const tokenBlacklists = await prisma.tokenBlacklist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenBlacklistWithIdOnly = await prisma.tokenBlacklist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TokenBlacklistFindManyArgs>(args?: SelectSubset<T, TokenBlacklistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenBlacklistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TokenBlacklist.
     * @param {TokenBlacklistCreateArgs} args - Arguments to create a TokenBlacklist.
     * @example
     * // Create one TokenBlacklist
     * const TokenBlacklist = await prisma.tokenBlacklist.create({
     *   data: {
     *     // ... data to create a TokenBlacklist
     *   }
     * })
     * 
     */
    create<T extends TokenBlacklistCreateArgs>(args: SelectSubset<T, TokenBlacklistCreateArgs<ExtArgs>>): Prisma__TokenBlacklistClient<$Result.GetResult<Prisma.$TokenBlacklistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TokenBlacklists.
     * @param {TokenBlacklistCreateManyArgs} args - Arguments to create many TokenBlacklists.
     * @example
     * // Create many TokenBlacklists
     * const tokenBlacklist = await prisma.tokenBlacklist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TokenBlacklistCreateManyArgs>(args?: SelectSubset<T, TokenBlacklistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TokenBlacklists and returns the data saved in the database.
     * @param {TokenBlacklistCreateManyAndReturnArgs} args - Arguments to create many TokenBlacklists.
     * @example
     * // Create many TokenBlacklists
     * const tokenBlacklist = await prisma.tokenBlacklist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TokenBlacklists and only return the `id`
     * const tokenBlacklistWithIdOnly = await prisma.tokenBlacklist.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TokenBlacklistCreateManyAndReturnArgs>(args?: SelectSubset<T, TokenBlacklistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenBlacklistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TokenBlacklist.
     * @param {TokenBlacklistDeleteArgs} args - Arguments to delete one TokenBlacklist.
     * @example
     * // Delete one TokenBlacklist
     * const TokenBlacklist = await prisma.tokenBlacklist.delete({
     *   where: {
     *     // ... filter to delete one TokenBlacklist
     *   }
     * })
     * 
     */
    delete<T extends TokenBlacklistDeleteArgs>(args: SelectSubset<T, TokenBlacklistDeleteArgs<ExtArgs>>): Prisma__TokenBlacklistClient<$Result.GetResult<Prisma.$TokenBlacklistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TokenBlacklist.
     * @param {TokenBlacklistUpdateArgs} args - Arguments to update one TokenBlacklist.
     * @example
     * // Update one TokenBlacklist
     * const tokenBlacklist = await prisma.tokenBlacklist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TokenBlacklistUpdateArgs>(args: SelectSubset<T, TokenBlacklistUpdateArgs<ExtArgs>>): Prisma__TokenBlacklistClient<$Result.GetResult<Prisma.$TokenBlacklistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TokenBlacklists.
     * @param {TokenBlacklistDeleteManyArgs} args - Arguments to filter TokenBlacklists to delete.
     * @example
     * // Delete a few TokenBlacklists
     * const { count } = await prisma.tokenBlacklist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TokenBlacklistDeleteManyArgs>(args?: SelectSubset<T, TokenBlacklistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TokenBlacklists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenBlacklistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TokenBlacklists
     * const tokenBlacklist = await prisma.tokenBlacklist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TokenBlacklistUpdateManyArgs>(args: SelectSubset<T, TokenBlacklistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TokenBlacklists and returns the data updated in the database.
     * @param {TokenBlacklistUpdateManyAndReturnArgs} args - Arguments to update many TokenBlacklists.
     * @example
     * // Update many TokenBlacklists
     * const tokenBlacklist = await prisma.tokenBlacklist.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TokenBlacklists and only return the `id`
     * const tokenBlacklistWithIdOnly = await prisma.tokenBlacklist.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TokenBlacklistUpdateManyAndReturnArgs>(args: SelectSubset<T, TokenBlacklistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenBlacklistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TokenBlacklist.
     * @param {TokenBlacklistUpsertArgs} args - Arguments to update or create a TokenBlacklist.
     * @example
     * // Update or create a TokenBlacklist
     * const tokenBlacklist = await prisma.tokenBlacklist.upsert({
     *   create: {
     *     // ... data to create a TokenBlacklist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TokenBlacklist we want to update
     *   }
     * })
     */
    upsert<T extends TokenBlacklistUpsertArgs>(args: SelectSubset<T, TokenBlacklistUpsertArgs<ExtArgs>>): Prisma__TokenBlacklistClient<$Result.GetResult<Prisma.$TokenBlacklistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TokenBlacklists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenBlacklistCountArgs} args - Arguments to filter TokenBlacklists to count.
     * @example
     * // Count the number of TokenBlacklists
     * const count = await prisma.tokenBlacklist.count({
     *   where: {
     *     // ... the filter for the TokenBlacklists we want to count
     *   }
     * })
    **/
    count<T extends TokenBlacklistCountArgs>(
      args?: Subset<T, TokenBlacklistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenBlacklistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TokenBlacklist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenBlacklistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenBlacklistAggregateArgs>(args: Subset<T, TokenBlacklistAggregateArgs>): Prisma.PrismaPromise<GetTokenBlacklistAggregateType<T>>

    /**
     * Group by TokenBlacklist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenBlacklistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenBlacklistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenBlacklistGroupByArgs['orderBy'] }
        : { orderBy?: TokenBlacklistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenBlacklistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenBlacklistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TokenBlacklist model
   */
  readonly fields: TokenBlacklistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TokenBlacklist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokenBlacklistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TokenBlacklist model
   */
  interface TokenBlacklistFieldRefs {
    readonly id: FieldRef<"TokenBlacklist", 'String'>
    readonly userId: FieldRef<"TokenBlacklist", 'String'>
    readonly tokenId: FieldRef<"TokenBlacklist", 'String'>
    readonly reason: FieldRef<"TokenBlacklist", 'String'>
    readonly expiresAt: FieldRef<"TokenBlacklist", 'DateTime'>
    readonly createdAt: FieldRef<"TokenBlacklist", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TokenBlacklist findUnique
   */
  export type TokenBlacklistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenBlacklist
     */
    select?: TokenBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TokenBlacklist
     */
    omit?: TokenBlacklistOmit<ExtArgs> | null
    /**
     * Filter, which TokenBlacklist to fetch.
     */
    where: TokenBlacklistWhereUniqueInput
  }

  /**
   * TokenBlacklist findUniqueOrThrow
   */
  export type TokenBlacklistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenBlacklist
     */
    select?: TokenBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TokenBlacklist
     */
    omit?: TokenBlacklistOmit<ExtArgs> | null
    /**
     * Filter, which TokenBlacklist to fetch.
     */
    where: TokenBlacklistWhereUniqueInput
  }

  /**
   * TokenBlacklist findFirst
   */
  export type TokenBlacklistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenBlacklist
     */
    select?: TokenBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TokenBlacklist
     */
    omit?: TokenBlacklistOmit<ExtArgs> | null
    /**
     * Filter, which TokenBlacklist to fetch.
     */
    where?: TokenBlacklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TokenBlacklists to fetch.
     */
    orderBy?: TokenBlacklistOrderByWithRelationInput | TokenBlacklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TokenBlacklists.
     */
    cursor?: TokenBlacklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TokenBlacklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TokenBlacklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TokenBlacklists.
     */
    distinct?: TokenBlacklistScalarFieldEnum | TokenBlacklistScalarFieldEnum[]
  }

  /**
   * TokenBlacklist findFirstOrThrow
   */
  export type TokenBlacklistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenBlacklist
     */
    select?: TokenBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TokenBlacklist
     */
    omit?: TokenBlacklistOmit<ExtArgs> | null
    /**
     * Filter, which TokenBlacklist to fetch.
     */
    where?: TokenBlacklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TokenBlacklists to fetch.
     */
    orderBy?: TokenBlacklistOrderByWithRelationInput | TokenBlacklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TokenBlacklists.
     */
    cursor?: TokenBlacklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TokenBlacklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TokenBlacklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TokenBlacklists.
     */
    distinct?: TokenBlacklistScalarFieldEnum | TokenBlacklistScalarFieldEnum[]
  }

  /**
   * TokenBlacklist findMany
   */
  export type TokenBlacklistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenBlacklist
     */
    select?: TokenBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TokenBlacklist
     */
    omit?: TokenBlacklistOmit<ExtArgs> | null
    /**
     * Filter, which TokenBlacklists to fetch.
     */
    where?: TokenBlacklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TokenBlacklists to fetch.
     */
    orderBy?: TokenBlacklistOrderByWithRelationInput | TokenBlacklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TokenBlacklists.
     */
    cursor?: TokenBlacklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TokenBlacklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TokenBlacklists.
     */
    skip?: number
    distinct?: TokenBlacklistScalarFieldEnum | TokenBlacklistScalarFieldEnum[]
  }

  /**
   * TokenBlacklist create
   */
  export type TokenBlacklistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenBlacklist
     */
    select?: TokenBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TokenBlacklist
     */
    omit?: TokenBlacklistOmit<ExtArgs> | null
    /**
     * The data needed to create a TokenBlacklist.
     */
    data: XOR<TokenBlacklistCreateInput, TokenBlacklistUncheckedCreateInput>
  }

  /**
   * TokenBlacklist createMany
   */
  export type TokenBlacklistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TokenBlacklists.
     */
    data: TokenBlacklistCreateManyInput | TokenBlacklistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TokenBlacklist createManyAndReturn
   */
  export type TokenBlacklistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenBlacklist
     */
    select?: TokenBlacklistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TokenBlacklist
     */
    omit?: TokenBlacklistOmit<ExtArgs> | null
    /**
     * The data used to create many TokenBlacklists.
     */
    data: TokenBlacklistCreateManyInput | TokenBlacklistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TokenBlacklist update
   */
  export type TokenBlacklistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenBlacklist
     */
    select?: TokenBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TokenBlacklist
     */
    omit?: TokenBlacklistOmit<ExtArgs> | null
    /**
     * The data needed to update a TokenBlacklist.
     */
    data: XOR<TokenBlacklistUpdateInput, TokenBlacklistUncheckedUpdateInput>
    /**
     * Choose, which TokenBlacklist to update.
     */
    where: TokenBlacklistWhereUniqueInput
  }

  /**
   * TokenBlacklist updateMany
   */
  export type TokenBlacklistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TokenBlacklists.
     */
    data: XOR<TokenBlacklistUpdateManyMutationInput, TokenBlacklistUncheckedUpdateManyInput>
    /**
     * Filter which TokenBlacklists to update
     */
    where?: TokenBlacklistWhereInput
    /**
     * Limit how many TokenBlacklists to update.
     */
    limit?: number
  }

  /**
   * TokenBlacklist updateManyAndReturn
   */
  export type TokenBlacklistUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenBlacklist
     */
    select?: TokenBlacklistSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TokenBlacklist
     */
    omit?: TokenBlacklistOmit<ExtArgs> | null
    /**
     * The data used to update TokenBlacklists.
     */
    data: XOR<TokenBlacklistUpdateManyMutationInput, TokenBlacklistUncheckedUpdateManyInput>
    /**
     * Filter which TokenBlacklists to update
     */
    where?: TokenBlacklistWhereInput
    /**
     * Limit how many TokenBlacklists to update.
     */
    limit?: number
  }

  /**
   * TokenBlacklist upsert
   */
  export type TokenBlacklistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenBlacklist
     */
    select?: TokenBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TokenBlacklist
     */
    omit?: TokenBlacklistOmit<ExtArgs> | null
    /**
     * The filter to search for the TokenBlacklist to update in case it exists.
     */
    where: TokenBlacklistWhereUniqueInput
    /**
     * In case the TokenBlacklist found by the `where` argument doesn't exist, create a new TokenBlacklist with this data.
     */
    create: XOR<TokenBlacklistCreateInput, TokenBlacklistUncheckedCreateInput>
    /**
     * In case the TokenBlacklist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokenBlacklistUpdateInput, TokenBlacklistUncheckedUpdateInput>
  }

  /**
   * TokenBlacklist delete
   */
  export type TokenBlacklistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenBlacklist
     */
    select?: TokenBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TokenBlacklist
     */
    omit?: TokenBlacklistOmit<ExtArgs> | null
    /**
     * Filter which TokenBlacklist to delete.
     */
    where: TokenBlacklistWhereUniqueInput
  }

  /**
   * TokenBlacklist deleteMany
   */
  export type TokenBlacklistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TokenBlacklists to delete
     */
    where?: TokenBlacklistWhereInput
    /**
     * Limit how many TokenBlacklists to delete.
     */
    limit?: number
  }

  /**
   * TokenBlacklist without action
   */
  export type TokenBlacklistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenBlacklist
     */
    select?: TokenBlacklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TokenBlacklist
     */
    omit?: TokenBlacklistOmit<ExtArgs> | null
  }


  /**
   * Model AdminSubscriptionLog
   */

  export type AggregateAdminSubscriptionLog = {
    _count: AdminSubscriptionLogCountAggregateOutputType | null
    _min: AdminSubscriptionLogMinAggregateOutputType | null
    _max: AdminSubscriptionLogMaxAggregateOutputType | null
  }

  export type AdminSubscriptionLogMinAggregateOutputType = {
    id: string | null
    adminUserId: string | null
    targetUserId: string | null
    subscriptionId: string | null
    operationType: string | null
    oldStatus: string | null
    newStatus: string | null
    oldTestAccount: boolean | null
    newTestAccount: boolean | null
    reason: string | null
    createdAt: Date | null
  }

  export type AdminSubscriptionLogMaxAggregateOutputType = {
    id: string | null
    adminUserId: string | null
    targetUserId: string | null
    subscriptionId: string | null
    operationType: string | null
    oldStatus: string | null
    newStatus: string | null
    oldTestAccount: boolean | null
    newTestAccount: boolean | null
    reason: string | null
    createdAt: Date | null
  }

  export type AdminSubscriptionLogCountAggregateOutputType = {
    id: number
    adminUserId: number
    targetUserId: number
    subscriptionId: number
    operationType: number
    oldStatus: number
    newStatus: number
    oldTestAccount: number
    newTestAccount: number
    metadata: number
    reason: number
    createdAt: number
    _all: number
  }


  export type AdminSubscriptionLogMinAggregateInputType = {
    id?: true
    adminUserId?: true
    targetUserId?: true
    subscriptionId?: true
    operationType?: true
    oldStatus?: true
    newStatus?: true
    oldTestAccount?: true
    newTestAccount?: true
    reason?: true
    createdAt?: true
  }

  export type AdminSubscriptionLogMaxAggregateInputType = {
    id?: true
    adminUserId?: true
    targetUserId?: true
    subscriptionId?: true
    operationType?: true
    oldStatus?: true
    newStatus?: true
    oldTestAccount?: true
    newTestAccount?: true
    reason?: true
    createdAt?: true
  }

  export type AdminSubscriptionLogCountAggregateInputType = {
    id?: true
    adminUserId?: true
    targetUserId?: true
    subscriptionId?: true
    operationType?: true
    oldStatus?: true
    newStatus?: true
    oldTestAccount?: true
    newTestAccount?: true
    metadata?: true
    reason?: true
    createdAt?: true
    _all?: true
  }

  export type AdminSubscriptionLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminSubscriptionLog to aggregate.
     */
    where?: AdminSubscriptionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminSubscriptionLogs to fetch.
     */
    orderBy?: AdminSubscriptionLogOrderByWithRelationInput | AdminSubscriptionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminSubscriptionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminSubscriptionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminSubscriptionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminSubscriptionLogs
    **/
    _count?: true | AdminSubscriptionLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminSubscriptionLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminSubscriptionLogMaxAggregateInputType
  }

  export type GetAdminSubscriptionLogAggregateType<T extends AdminSubscriptionLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminSubscriptionLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminSubscriptionLog[P]>
      : GetScalarType<T[P], AggregateAdminSubscriptionLog[P]>
  }




  export type AdminSubscriptionLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminSubscriptionLogWhereInput
    orderBy?: AdminSubscriptionLogOrderByWithAggregationInput | AdminSubscriptionLogOrderByWithAggregationInput[]
    by: AdminSubscriptionLogScalarFieldEnum[] | AdminSubscriptionLogScalarFieldEnum
    having?: AdminSubscriptionLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminSubscriptionLogCountAggregateInputType | true
    _min?: AdminSubscriptionLogMinAggregateInputType
    _max?: AdminSubscriptionLogMaxAggregateInputType
  }

  export type AdminSubscriptionLogGroupByOutputType = {
    id: string
    adminUserId: string
    targetUserId: string
    subscriptionId: string | null
    operationType: string
    oldStatus: string | null
    newStatus: string | null
    oldTestAccount: boolean | null
    newTestAccount: boolean | null
    metadata: JsonValue | null
    reason: string | null
    createdAt: Date
    _count: AdminSubscriptionLogCountAggregateOutputType | null
    _min: AdminSubscriptionLogMinAggregateOutputType | null
    _max: AdminSubscriptionLogMaxAggregateOutputType | null
  }

  type GetAdminSubscriptionLogGroupByPayload<T extends AdminSubscriptionLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminSubscriptionLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminSubscriptionLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminSubscriptionLogGroupByOutputType[P]>
            : GetScalarType<T[P], AdminSubscriptionLogGroupByOutputType[P]>
        }
      >
    >


  export type AdminSubscriptionLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminUserId?: boolean
    targetUserId?: boolean
    subscriptionId?: boolean
    operationType?: boolean
    oldStatus?: boolean
    newStatus?: boolean
    oldTestAccount?: boolean
    newTestAccount?: boolean
    metadata?: boolean
    reason?: boolean
    createdAt?: boolean
    adminUser?: boolean | UserDefaultArgs<ExtArgs>
    targetUser?: boolean | UserDefaultArgs<ExtArgs>
    subscription?: boolean | AdminSubscriptionLog$subscriptionArgs<ExtArgs>
  }, ExtArgs["result"]["adminSubscriptionLog"]>

  export type AdminSubscriptionLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminUserId?: boolean
    targetUserId?: boolean
    subscriptionId?: boolean
    operationType?: boolean
    oldStatus?: boolean
    newStatus?: boolean
    oldTestAccount?: boolean
    newTestAccount?: boolean
    metadata?: boolean
    reason?: boolean
    createdAt?: boolean
    adminUser?: boolean | UserDefaultArgs<ExtArgs>
    targetUser?: boolean | UserDefaultArgs<ExtArgs>
    subscription?: boolean | AdminSubscriptionLog$subscriptionArgs<ExtArgs>
  }, ExtArgs["result"]["adminSubscriptionLog"]>

  export type AdminSubscriptionLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminUserId?: boolean
    targetUserId?: boolean
    subscriptionId?: boolean
    operationType?: boolean
    oldStatus?: boolean
    newStatus?: boolean
    oldTestAccount?: boolean
    newTestAccount?: boolean
    metadata?: boolean
    reason?: boolean
    createdAt?: boolean
    adminUser?: boolean | UserDefaultArgs<ExtArgs>
    targetUser?: boolean | UserDefaultArgs<ExtArgs>
    subscription?: boolean | AdminSubscriptionLog$subscriptionArgs<ExtArgs>
  }, ExtArgs["result"]["adminSubscriptionLog"]>

  export type AdminSubscriptionLogSelectScalar = {
    id?: boolean
    adminUserId?: boolean
    targetUserId?: boolean
    subscriptionId?: boolean
    operationType?: boolean
    oldStatus?: boolean
    newStatus?: boolean
    oldTestAccount?: boolean
    newTestAccount?: boolean
    metadata?: boolean
    reason?: boolean
    createdAt?: boolean
  }

  export type AdminSubscriptionLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "adminUserId" | "targetUserId" | "subscriptionId" | "operationType" | "oldStatus" | "newStatus" | "oldTestAccount" | "newTestAccount" | "metadata" | "reason" | "createdAt", ExtArgs["result"]["adminSubscriptionLog"]>
  export type AdminSubscriptionLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminUser?: boolean | UserDefaultArgs<ExtArgs>
    targetUser?: boolean | UserDefaultArgs<ExtArgs>
    subscription?: boolean | AdminSubscriptionLog$subscriptionArgs<ExtArgs>
  }
  export type AdminSubscriptionLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminUser?: boolean | UserDefaultArgs<ExtArgs>
    targetUser?: boolean | UserDefaultArgs<ExtArgs>
    subscription?: boolean | AdminSubscriptionLog$subscriptionArgs<ExtArgs>
  }
  export type AdminSubscriptionLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminUser?: boolean | UserDefaultArgs<ExtArgs>
    targetUser?: boolean | UserDefaultArgs<ExtArgs>
    subscription?: boolean | AdminSubscriptionLog$subscriptionArgs<ExtArgs>
  }

  export type $AdminSubscriptionLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminSubscriptionLog"
    objects: {
      adminUser: Prisma.$UserPayload<ExtArgs>
      targetUser: Prisma.$UserPayload<ExtArgs>
      subscription: Prisma.$UserSubscriptionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      adminUserId: string
      targetUserId: string
      subscriptionId: string | null
      operationType: string
      oldStatus: string | null
      newStatus: string | null
      oldTestAccount: boolean | null
      newTestAccount: boolean | null
      metadata: Prisma.JsonValue | null
      reason: string | null
      createdAt: Date
    }, ExtArgs["result"]["adminSubscriptionLog"]>
    composites: {}
  }

  type AdminSubscriptionLogGetPayload<S extends boolean | null | undefined | AdminSubscriptionLogDefaultArgs> = $Result.GetResult<Prisma.$AdminSubscriptionLogPayload, S>

  type AdminSubscriptionLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminSubscriptionLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminSubscriptionLogCountAggregateInputType | true
    }

  export interface AdminSubscriptionLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminSubscriptionLog'], meta: { name: 'AdminSubscriptionLog' } }
    /**
     * Find zero or one AdminSubscriptionLog that matches the filter.
     * @param {AdminSubscriptionLogFindUniqueArgs} args - Arguments to find a AdminSubscriptionLog
     * @example
     * // Get one AdminSubscriptionLog
     * const adminSubscriptionLog = await prisma.adminSubscriptionLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminSubscriptionLogFindUniqueArgs>(args: SelectSubset<T, AdminSubscriptionLogFindUniqueArgs<ExtArgs>>): Prisma__AdminSubscriptionLogClient<$Result.GetResult<Prisma.$AdminSubscriptionLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminSubscriptionLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminSubscriptionLogFindUniqueOrThrowArgs} args - Arguments to find a AdminSubscriptionLog
     * @example
     * // Get one AdminSubscriptionLog
     * const adminSubscriptionLog = await prisma.adminSubscriptionLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminSubscriptionLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminSubscriptionLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminSubscriptionLogClient<$Result.GetResult<Prisma.$AdminSubscriptionLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminSubscriptionLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminSubscriptionLogFindFirstArgs} args - Arguments to find a AdminSubscriptionLog
     * @example
     * // Get one AdminSubscriptionLog
     * const adminSubscriptionLog = await prisma.adminSubscriptionLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminSubscriptionLogFindFirstArgs>(args?: SelectSubset<T, AdminSubscriptionLogFindFirstArgs<ExtArgs>>): Prisma__AdminSubscriptionLogClient<$Result.GetResult<Prisma.$AdminSubscriptionLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminSubscriptionLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminSubscriptionLogFindFirstOrThrowArgs} args - Arguments to find a AdminSubscriptionLog
     * @example
     * // Get one AdminSubscriptionLog
     * const adminSubscriptionLog = await prisma.adminSubscriptionLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminSubscriptionLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminSubscriptionLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminSubscriptionLogClient<$Result.GetResult<Prisma.$AdminSubscriptionLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminSubscriptionLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminSubscriptionLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminSubscriptionLogs
     * const adminSubscriptionLogs = await prisma.adminSubscriptionLog.findMany()
     * 
     * // Get first 10 AdminSubscriptionLogs
     * const adminSubscriptionLogs = await prisma.adminSubscriptionLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminSubscriptionLogWithIdOnly = await prisma.adminSubscriptionLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminSubscriptionLogFindManyArgs>(args?: SelectSubset<T, AdminSubscriptionLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminSubscriptionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminSubscriptionLog.
     * @param {AdminSubscriptionLogCreateArgs} args - Arguments to create a AdminSubscriptionLog.
     * @example
     * // Create one AdminSubscriptionLog
     * const AdminSubscriptionLog = await prisma.adminSubscriptionLog.create({
     *   data: {
     *     // ... data to create a AdminSubscriptionLog
     *   }
     * })
     * 
     */
    create<T extends AdminSubscriptionLogCreateArgs>(args: SelectSubset<T, AdminSubscriptionLogCreateArgs<ExtArgs>>): Prisma__AdminSubscriptionLogClient<$Result.GetResult<Prisma.$AdminSubscriptionLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminSubscriptionLogs.
     * @param {AdminSubscriptionLogCreateManyArgs} args - Arguments to create many AdminSubscriptionLogs.
     * @example
     * // Create many AdminSubscriptionLogs
     * const adminSubscriptionLog = await prisma.adminSubscriptionLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminSubscriptionLogCreateManyArgs>(args?: SelectSubset<T, AdminSubscriptionLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminSubscriptionLogs and returns the data saved in the database.
     * @param {AdminSubscriptionLogCreateManyAndReturnArgs} args - Arguments to create many AdminSubscriptionLogs.
     * @example
     * // Create many AdminSubscriptionLogs
     * const adminSubscriptionLog = await prisma.adminSubscriptionLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminSubscriptionLogs and only return the `id`
     * const adminSubscriptionLogWithIdOnly = await prisma.adminSubscriptionLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminSubscriptionLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminSubscriptionLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminSubscriptionLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AdminSubscriptionLog.
     * @param {AdminSubscriptionLogDeleteArgs} args - Arguments to delete one AdminSubscriptionLog.
     * @example
     * // Delete one AdminSubscriptionLog
     * const AdminSubscriptionLog = await prisma.adminSubscriptionLog.delete({
     *   where: {
     *     // ... filter to delete one AdminSubscriptionLog
     *   }
     * })
     * 
     */
    delete<T extends AdminSubscriptionLogDeleteArgs>(args: SelectSubset<T, AdminSubscriptionLogDeleteArgs<ExtArgs>>): Prisma__AdminSubscriptionLogClient<$Result.GetResult<Prisma.$AdminSubscriptionLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminSubscriptionLog.
     * @param {AdminSubscriptionLogUpdateArgs} args - Arguments to update one AdminSubscriptionLog.
     * @example
     * // Update one AdminSubscriptionLog
     * const adminSubscriptionLog = await prisma.adminSubscriptionLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminSubscriptionLogUpdateArgs>(args: SelectSubset<T, AdminSubscriptionLogUpdateArgs<ExtArgs>>): Prisma__AdminSubscriptionLogClient<$Result.GetResult<Prisma.$AdminSubscriptionLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminSubscriptionLogs.
     * @param {AdminSubscriptionLogDeleteManyArgs} args - Arguments to filter AdminSubscriptionLogs to delete.
     * @example
     * // Delete a few AdminSubscriptionLogs
     * const { count } = await prisma.adminSubscriptionLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminSubscriptionLogDeleteManyArgs>(args?: SelectSubset<T, AdminSubscriptionLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminSubscriptionLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminSubscriptionLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminSubscriptionLogs
     * const adminSubscriptionLog = await prisma.adminSubscriptionLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminSubscriptionLogUpdateManyArgs>(args: SelectSubset<T, AdminSubscriptionLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminSubscriptionLogs and returns the data updated in the database.
     * @param {AdminSubscriptionLogUpdateManyAndReturnArgs} args - Arguments to update many AdminSubscriptionLogs.
     * @example
     * // Update many AdminSubscriptionLogs
     * const adminSubscriptionLog = await prisma.adminSubscriptionLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdminSubscriptionLogs and only return the `id`
     * const adminSubscriptionLogWithIdOnly = await prisma.adminSubscriptionLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminSubscriptionLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminSubscriptionLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminSubscriptionLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AdminSubscriptionLog.
     * @param {AdminSubscriptionLogUpsertArgs} args - Arguments to update or create a AdminSubscriptionLog.
     * @example
     * // Update or create a AdminSubscriptionLog
     * const adminSubscriptionLog = await prisma.adminSubscriptionLog.upsert({
     *   create: {
     *     // ... data to create a AdminSubscriptionLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminSubscriptionLog we want to update
     *   }
     * })
     */
    upsert<T extends AdminSubscriptionLogUpsertArgs>(args: SelectSubset<T, AdminSubscriptionLogUpsertArgs<ExtArgs>>): Prisma__AdminSubscriptionLogClient<$Result.GetResult<Prisma.$AdminSubscriptionLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminSubscriptionLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminSubscriptionLogCountArgs} args - Arguments to filter AdminSubscriptionLogs to count.
     * @example
     * // Count the number of AdminSubscriptionLogs
     * const count = await prisma.adminSubscriptionLog.count({
     *   where: {
     *     // ... the filter for the AdminSubscriptionLogs we want to count
     *   }
     * })
    **/
    count<T extends AdminSubscriptionLogCountArgs>(
      args?: Subset<T, AdminSubscriptionLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminSubscriptionLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminSubscriptionLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminSubscriptionLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminSubscriptionLogAggregateArgs>(args: Subset<T, AdminSubscriptionLogAggregateArgs>): Prisma.PrismaPromise<GetAdminSubscriptionLogAggregateType<T>>

    /**
     * Group by AdminSubscriptionLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminSubscriptionLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminSubscriptionLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminSubscriptionLogGroupByArgs['orderBy'] }
        : { orderBy?: AdminSubscriptionLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminSubscriptionLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminSubscriptionLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminSubscriptionLog model
   */
  readonly fields: AdminSubscriptionLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminSubscriptionLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminSubscriptionLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adminUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    targetUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subscription<T extends AdminSubscriptionLog$subscriptionArgs<ExtArgs> = {}>(args?: Subset<T, AdminSubscriptionLog$subscriptionArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminSubscriptionLog model
   */
  interface AdminSubscriptionLogFieldRefs {
    readonly id: FieldRef<"AdminSubscriptionLog", 'String'>
    readonly adminUserId: FieldRef<"AdminSubscriptionLog", 'String'>
    readonly targetUserId: FieldRef<"AdminSubscriptionLog", 'String'>
    readonly subscriptionId: FieldRef<"AdminSubscriptionLog", 'String'>
    readonly operationType: FieldRef<"AdminSubscriptionLog", 'String'>
    readonly oldStatus: FieldRef<"AdminSubscriptionLog", 'String'>
    readonly newStatus: FieldRef<"AdminSubscriptionLog", 'String'>
    readonly oldTestAccount: FieldRef<"AdminSubscriptionLog", 'Boolean'>
    readonly newTestAccount: FieldRef<"AdminSubscriptionLog", 'Boolean'>
    readonly metadata: FieldRef<"AdminSubscriptionLog", 'Json'>
    readonly reason: FieldRef<"AdminSubscriptionLog", 'String'>
    readonly createdAt: FieldRef<"AdminSubscriptionLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminSubscriptionLog findUnique
   */
  export type AdminSubscriptionLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminSubscriptionLog to fetch.
     */
    where: AdminSubscriptionLogWhereUniqueInput
  }

  /**
   * AdminSubscriptionLog findUniqueOrThrow
   */
  export type AdminSubscriptionLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminSubscriptionLog to fetch.
     */
    where: AdminSubscriptionLogWhereUniqueInput
  }

  /**
   * AdminSubscriptionLog findFirst
   */
  export type AdminSubscriptionLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminSubscriptionLog to fetch.
     */
    where?: AdminSubscriptionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminSubscriptionLogs to fetch.
     */
    orderBy?: AdminSubscriptionLogOrderByWithRelationInput | AdminSubscriptionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminSubscriptionLogs.
     */
    cursor?: AdminSubscriptionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminSubscriptionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminSubscriptionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminSubscriptionLogs.
     */
    distinct?: AdminSubscriptionLogScalarFieldEnum | AdminSubscriptionLogScalarFieldEnum[]
  }

  /**
   * AdminSubscriptionLog findFirstOrThrow
   */
  export type AdminSubscriptionLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminSubscriptionLog to fetch.
     */
    where?: AdminSubscriptionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminSubscriptionLogs to fetch.
     */
    orderBy?: AdminSubscriptionLogOrderByWithRelationInput | AdminSubscriptionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminSubscriptionLogs.
     */
    cursor?: AdminSubscriptionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminSubscriptionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminSubscriptionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminSubscriptionLogs.
     */
    distinct?: AdminSubscriptionLogScalarFieldEnum | AdminSubscriptionLogScalarFieldEnum[]
  }

  /**
   * AdminSubscriptionLog findMany
   */
  export type AdminSubscriptionLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminSubscriptionLogs to fetch.
     */
    where?: AdminSubscriptionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminSubscriptionLogs to fetch.
     */
    orderBy?: AdminSubscriptionLogOrderByWithRelationInput | AdminSubscriptionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminSubscriptionLogs.
     */
    cursor?: AdminSubscriptionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminSubscriptionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminSubscriptionLogs.
     */
    skip?: number
    distinct?: AdminSubscriptionLogScalarFieldEnum | AdminSubscriptionLogScalarFieldEnum[]
  }

  /**
   * AdminSubscriptionLog create
   */
  export type AdminSubscriptionLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminSubscriptionLog.
     */
    data: XOR<AdminSubscriptionLogCreateInput, AdminSubscriptionLogUncheckedCreateInput>
  }

  /**
   * AdminSubscriptionLog createMany
   */
  export type AdminSubscriptionLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminSubscriptionLogs.
     */
    data: AdminSubscriptionLogCreateManyInput | AdminSubscriptionLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminSubscriptionLog createManyAndReturn
   */
  export type AdminSubscriptionLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * The data used to create many AdminSubscriptionLogs.
     */
    data: AdminSubscriptionLogCreateManyInput | AdminSubscriptionLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminSubscriptionLog update
   */
  export type AdminSubscriptionLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminSubscriptionLog.
     */
    data: XOR<AdminSubscriptionLogUpdateInput, AdminSubscriptionLogUncheckedUpdateInput>
    /**
     * Choose, which AdminSubscriptionLog to update.
     */
    where: AdminSubscriptionLogWhereUniqueInput
  }

  /**
   * AdminSubscriptionLog updateMany
   */
  export type AdminSubscriptionLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminSubscriptionLogs.
     */
    data: XOR<AdminSubscriptionLogUpdateManyMutationInput, AdminSubscriptionLogUncheckedUpdateManyInput>
    /**
     * Filter which AdminSubscriptionLogs to update
     */
    where?: AdminSubscriptionLogWhereInput
    /**
     * Limit how many AdminSubscriptionLogs to update.
     */
    limit?: number
  }

  /**
   * AdminSubscriptionLog updateManyAndReturn
   */
  export type AdminSubscriptionLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * The data used to update AdminSubscriptionLogs.
     */
    data: XOR<AdminSubscriptionLogUpdateManyMutationInput, AdminSubscriptionLogUncheckedUpdateManyInput>
    /**
     * Filter which AdminSubscriptionLogs to update
     */
    where?: AdminSubscriptionLogWhereInput
    /**
     * Limit how many AdminSubscriptionLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminSubscriptionLog upsert
   */
  export type AdminSubscriptionLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminSubscriptionLog to update in case it exists.
     */
    where: AdminSubscriptionLogWhereUniqueInput
    /**
     * In case the AdminSubscriptionLog found by the `where` argument doesn't exist, create a new AdminSubscriptionLog with this data.
     */
    create: XOR<AdminSubscriptionLogCreateInput, AdminSubscriptionLogUncheckedCreateInput>
    /**
     * In case the AdminSubscriptionLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminSubscriptionLogUpdateInput, AdminSubscriptionLogUncheckedUpdateInput>
  }

  /**
   * AdminSubscriptionLog delete
   */
  export type AdminSubscriptionLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogInclude<ExtArgs> | null
    /**
     * Filter which AdminSubscriptionLog to delete.
     */
    where: AdminSubscriptionLogWhereUniqueInput
  }

  /**
   * AdminSubscriptionLog deleteMany
   */
  export type AdminSubscriptionLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminSubscriptionLogs to delete
     */
    where?: AdminSubscriptionLogWhereInput
    /**
     * Limit how many AdminSubscriptionLogs to delete.
     */
    limit?: number
  }

  /**
   * AdminSubscriptionLog.subscription
   */
  export type AdminSubscriptionLog$subscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSubscription
     */
    omit?: UserSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    where?: UserSubscriptionWhereInput
  }

  /**
   * AdminSubscriptionLog without action
   */
  export type AdminSubscriptionLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminSubscriptionLog
     */
    select?: AdminSubscriptionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminSubscriptionLog
     */
    omit?: AdminSubscriptionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminSubscriptionLogInclude<ExtArgs> | null
  }


  /**
   * Model EmailLog
   */

  export type AggregateEmailLog = {
    _count: EmailLogCountAggregateOutputType | null
    _avg: EmailLogAvgAggregateOutputType | null
    _sum: EmailLogSumAggregateOutputType | null
    _min: EmailLogMinAggregateOutputType | null
    _max: EmailLogMaxAggregateOutputType | null
  }

  export type EmailLogAvgAggregateOutputType = {
    retryCount: number | null
    maxRetries: number | null
  }

  export type EmailLogSumAggregateOutputType = {
    retryCount: number | null
    maxRetries: number | null
  }

  export type EmailLogMinAggregateOutputType = {
    id: string | null
    type: $Enums.EmailType | null
    status: $Enums.EmailStatus | null
    recipientEmail: string | null
    recipientName: string | null
    userId: string | null
    subject: string | null
    templateName: string | null
    htmlContent: string | null
    emailProvider: string | null
    providerEmailId: string | null
    sentAt: Date | null
    deliveredAt: Date | null
    openedAt: Date | null
    clickedAt: Date | null
    errorMessage: string | null
    errorCode: string | null
    retryCount: number | null
    maxRetries: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailLogMaxAggregateOutputType = {
    id: string | null
    type: $Enums.EmailType | null
    status: $Enums.EmailStatus | null
    recipientEmail: string | null
    recipientName: string | null
    userId: string | null
    subject: string | null
    templateName: string | null
    htmlContent: string | null
    emailProvider: string | null
    providerEmailId: string | null
    sentAt: Date | null
    deliveredAt: Date | null
    openedAt: Date | null
    clickedAt: Date | null
    errorMessage: string | null
    errorCode: string | null
    retryCount: number | null
    maxRetries: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailLogCountAggregateOutputType = {
    id: number
    type: number
    status: number
    recipientEmail: number
    recipientName: number
    userId: number
    subject: number
    templateName: number
    templateData: number
    htmlContent: number
    emailProvider: number
    providerEmailId: number
    sentAt: number
    deliveredAt: number
    openedAt: number
    clickedAt: number
    errorMessage: number
    errorCode: number
    retryCount: number
    maxRetries: number
    metadata: number
    tags: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailLogAvgAggregateInputType = {
    retryCount?: true
    maxRetries?: true
  }

  export type EmailLogSumAggregateInputType = {
    retryCount?: true
    maxRetries?: true
  }

  export type EmailLogMinAggregateInputType = {
    id?: true
    type?: true
    status?: true
    recipientEmail?: true
    recipientName?: true
    userId?: true
    subject?: true
    templateName?: true
    htmlContent?: true
    emailProvider?: true
    providerEmailId?: true
    sentAt?: true
    deliveredAt?: true
    openedAt?: true
    clickedAt?: true
    errorMessage?: true
    errorCode?: true
    retryCount?: true
    maxRetries?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailLogMaxAggregateInputType = {
    id?: true
    type?: true
    status?: true
    recipientEmail?: true
    recipientName?: true
    userId?: true
    subject?: true
    templateName?: true
    htmlContent?: true
    emailProvider?: true
    providerEmailId?: true
    sentAt?: true
    deliveredAt?: true
    openedAt?: true
    clickedAt?: true
    errorMessage?: true
    errorCode?: true
    retryCount?: true
    maxRetries?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailLogCountAggregateInputType = {
    id?: true
    type?: true
    status?: true
    recipientEmail?: true
    recipientName?: true
    userId?: true
    subject?: true
    templateName?: true
    templateData?: true
    htmlContent?: true
    emailProvider?: true
    providerEmailId?: true
    sentAt?: true
    deliveredAt?: true
    openedAt?: true
    clickedAt?: true
    errorMessage?: true
    errorCode?: true
    retryCount?: true
    maxRetries?: true
    metadata?: true
    tags?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailLog to aggregate.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailLogs
    **/
    _count?: true | EmailLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailLogMaxAggregateInputType
  }

  export type GetEmailLogAggregateType<T extends EmailLogAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailLog[P]>
      : GetScalarType<T[P], AggregateEmailLog[P]>
  }




  export type EmailLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailLogWhereInput
    orderBy?: EmailLogOrderByWithAggregationInput | EmailLogOrderByWithAggregationInput[]
    by: EmailLogScalarFieldEnum[] | EmailLogScalarFieldEnum
    having?: EmailLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailLogCountAggregateInputType | true
    _avg?: EmailLogAvgAggregateInputType
    _sum?: EmailLogSumAggregateInputType
    _min?: EmailLogMinAggregateInputType
    _max?: EmailLogMaxAggregateInputType
  }

  export type EmailLogGroupByOutputType = {
    id: string
    type: $Enums.EmailType
    status: $Enums.EmailStatus
    recipientEmail: string
    recipientName: string | null
    userId: string | null
    subject: string
    templateName: string
    templateData: JsonValue | null
    htmlContent: string | null
    emailProvider: string
    providerEmailId: string | null
    sentAt: Date | null
    deliveredAt: Date | null
    openedAt: Date | null
    clickedAt: Date | null
    errorMessage: string | null
    errorCode: string | null
    retryCount: number
    maxRetries: number
    metadata: JsonValue | null
    tags: string[]
    createdAt: Date
    updatedAt: Date
    _count: EmailLogCountAggregateOutputType | null
    _avg: EmailLogAvgAggregateOutputType | null
    _sum: EmailLogSumAggregateOutputType | null
    _min: EmailLogMinAggregateOutputType | null
    _max: EmailLogMaxAggregateOutputType | null
  }

  type GetEmailLogGroupByPayload<T extends EmailLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailLogGroupByOutputType[P]>
            : GetScalarType<T[P], EmailLogGroupByOutputType[P]>
        }
      >
    >


  export type EmailLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    status?: boolean
    recipientEmail?: boolean
    recipientName?: boolean
    userId?: boolean
    subject?: boolean
    templateName?: boolean
    templateData?: boolean
    htmlContent?: boolean
    emailProvider?: boolean
    providerEmailId?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    openedAt?: boolean
    clickedAt?: boolean
    errorMessage?: boolean
    errorCode?: boolean
    retryCount?: boolean
    maxRetries?: boolean
    metadata?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailLog"]>

  export type EmailLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    status?: boolean
    recipientEmail?: boolean
    recipientName?: boolean
    userId?: boolean
    subject?: boolean
    templateName?: boolean
    templateData?: boolean
    htmlContent?: boolean
    emailProvider?: boolean
    providerEmailId?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    openedAt?: boolean
    clickedAt?: boolean
    errorMessage?: boolean
    errorCode?: boolean
    retryCount?: boolean
    maxRetries?: boolean
    metadata?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailLog"]>

  export type EmailLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    status?: boolean
    recipientEmail?: boolean
    recipientName?: boolean
    userId?: boolean
    subject?: boolean
    templateName?: boolean
    templateData?: boolean
    htmlContent?: boolean
    emailProvider?: boolean
    providerEmailId?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    openedAt?: boolean
    clickedAt?: boolean
    errorMessage?: boolean
    errorCode?: boolean
    retryCount?: boolean
    maxRetries?: boolean
    metadata?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailLog"]>

  export type EmailLogSelectScalar = {
    id?: boolean
    type?: boolean
    status?: boolean
    recipientEmail?: boolean
    recipientName?: boolean
    userId?: boolean
    subject?: boolean
    templateName?: boolean
    templateData?: boolean
    htmlContent?: boolean
    emailProvider?: boolean
    providerEmailId?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    openedAt?: boolean
    clickedAt?: boolean
    errorMessage?: boolean
    errorCode?: boolean
    retryCount?: boolean
    maxRetries?: boolean
    metadata?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "status" | "recipientEmail" | "recipientName" | "userId" | "subject" | "templateName" | "templateData" | "htmlContent" | "emailProvider" | "providerEmailId" | "sentAt" | "deliveredAt" | "openedAt" | "clickedAt" | "errorMessage" | "errorCode" | "retryCount" | "maxRetries" | "metadata" | "tags" | "createdAt" | "updatedAt", ExtArgs["result"]["emailLog"]>

  export type $EmailLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.EmailType
      status: $Enums.EmailStatus
      recipientEmail: string
      recipientName: string | null
      userId: string | null
      subject: string
      templateName: string
      templateData: Prisma.JsonValue | null
      htmlContent: string | null
      emailProvider: string
      providerEmailId: string | null
      sentAt: Date | null
      deliveredAt: Date | null
      openedAt: Date | null
      clickedAt: Date | null
      errorMessage: string | null
      errorCode: string | null
      retryCount: number
      maxRetries: number
      metadata: Prisma.JsonValue | null
      tags: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailLog"]>
    composites: {}
  }

  type EmailLogGetPayload<S extends boolean | null | undefined | EmailLogDefaultArgs> = $Result.GetResult<Prisma.$EmailLogPayload, S>

  type EmailLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailLogCountAggregateInputType | true
    }

  export interface EmailLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailLog'], meta: { name: 'EmailLog' } }
    /**
     * Find zero or one EmailLog that matches the filter.
     * @param {EmailLogFindUniqueArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailLogFindUniqueArgs>(args: SelectSubset<T, EmailLogFindUniqueArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailLogFindUniqueOrThrowArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailLogFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogFindFirstArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailLogFindFirstArgs>(args?: SelectSubset<T, EmailLogFindFirstArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogFindFirstOrThrowArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailLogFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailLogs
     * const emailLogs = await prisma.emailLog.findMany()
     * 
     * // Get first 10 EmailLogs
     * const emailLogs = await prisma.emailLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailLogWithIdOnly = await prisma.emailLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailLogFindManyArgs>(args?: SelectSubset<T, EmailLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailLog.
     * @param {EmailLogCreateArgs} args - Arguments to create a EmailLog.
     * @example
     * // Create one EmailLog
     * const EmailLog = await prisma.emailLog.create({
     *   data: {
     *     // ... data to create a EmailLog
     *   }
     * })
     * 
     */
    create<T extends EmailLogCreateArgs>(args: SelectSubset<T, EmailLogCreateArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailLogs.
     * @param {EmailLogCreateManyArgs} args - Arguments to create many EmailLogs.
     * @example
     * // Create many EmailLogs
     * const emailLog = await prisma.emailLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailLogCreateManyArgs>(args?: SelectSubset<T, EmailLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailLogs and returns the data saved in the database.
     * @param {EmailLogCreateManyAndReturnArgs} args - Arguments to create many EmailLogs.
     * @example
     * // Create many EmailLogs
     * const emailLog = await prisma.emailLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailLogs and only return the `id`
     * const emailLogWithIdOnly = await prisma.emailLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailLogCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailLog.
     * @param {EmailLogDeleteArgs} args - Arguments to delete one EmailLog.
     * @example
     * // Delete one EmailLog
     * const EmailLog = await prisma.emailLog.delete({
     *   where: {
     *     // ... filter to delete one EmailLog
     *   }
     * })
     * 
     */
    delete<T extends EmailLogDeleteArgs>(args: SelectSubset<T, EmailLogDeleteArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailLog.
     * @param {EmailLogUpdateArgs} args - Arguments to update one EmailLog.
     * @example
     * // Update one EmailLog
     * const emailLog = await prisma.emailLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailLogUpdateArgs>(args: SelectSubset<T, EmailLogUpdateArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailLogs.
     * @param {EmailLogDeleteManyArgs} args - Arguments to filter EmailLogs to delete.
     * @example
     * // Delete a few EmailLogs
     * const { count } = await prisma.emailLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailLogDeleteManyArgs>(args?: SelectSubset<T, EmailLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailLogs
     * const emailLog = await prisma.emailLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailLogUpdateManyArgs>(args: SelectSubset<T, EmailLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailLogs and returns the data updated in the database.
     * @param {EmailLogUpdateManyAndReturnArgs} args - Arguments to update many EmailLogs.
     * @example
     * // Update many EmailLogs
     * const emailLog = await prisma.emailLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailLogs and only return the `id`
     * const emailLogWithIdOnly = await prisma.emailLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailLogUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailLog.
     * @param {EmailLogUpsertArgs} args - Arguments to update or create a EmailLog.
     * @example
     * // Update or create a EmailLog
     * const emailLog = await prisma.emailLog.upsert({
     *   create: {
     *     // ... data to create a EmailLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailLog we want to update
     *   }
     * })
     */
    upsert<T extends EmailLogUpsertArgs>(args: SelectSubset<T, EmailLogUpsertArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogCountArgs} args - Arguments to filter EmailLogs to count.
     * @example
     * // Count the number of EmailLogs
     * const count = await prisma.emailLog.count({
     *   where: {
     *     // ... the filter for the EmailLogs we want to count
     *   }
     * })
    **/
    count<T extends EmailLogCountArgs>(
      args?: Subset<T, EmailLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailLogAggregateArgs>(args: Subset<T, EmailLogAggregateArgs>): Prisma.PrismaPromise<GetEmailLogAggregateType<T>>

    /**
     * Group by EmailLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailLogGroupByArgs['orderBy'] }
        : { orderBy?: EmailLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailLog model
   */
  readonly fields: EmailLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailLog model
   */
  interface EmailLogFieldRefs {
    readonly id: FieldRef<"EmailLog", 'String'>
    readonly type: FieldRef<"EmailLog", 'EmailType'>
    readonly status: FieldRef<"EmailLog", 'EmailStatus'>
    readonly recipientEmail: FieldRef<"EmailLog", 'String'>
    readonly recipientName: FieldRef<"EmailLog", 'String'>
    readonly userId: FieldRef<"EmailLog", 'String'>
    readonly subject: FieldRef<"EmailLog", 'String'>
    readonly templateName: FieldRef<"EmailLog", 'String'>
    readonly templateData: FieldRef<"EmailLog", 'Json'>
    readonly htmlContent: FieldRef<"EmailLog", 'String'>
    readonly emailProvider: FieldRef<"EmailLog", 'String'>
    readonly providerEmailId: FieldRef<"EmailLog", 'String'>
    readonly sentAt: FieldRef<"EmailLog", 'DateTime'>
    readonly deliveredAt: FieldRef<"EmailLog", 'DateTime'>
    readonly openedAt: FieldRef<"EmailLog", 'DateTime'>
    readonly clickedAt: FieldRef<"EmailLog", 'DateTime'>
    readonly errorMessage: FieldRef<"EmailLog", 'String'>
    readonly errorCode: FieldRef<"EmailLog", 'String'>
    readonly retryCount: FieldRef<"EmailLog", 'Int'>
    readonly maxRetries: FieldRef<"EmailLog", 'Int'>
    readonly metadata: FieldRef<"EmailLog", 'Json'>
    readonly tags: FieldRef<"EmailLog", 'String[]'>
    readonly createdAt: FieldRef<"EmailLog", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailLog findUnique
   */
  export type EmailLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog findUniqueOrThrow
   */
  export type EmailLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog findFirst
   */
  export type EmailLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailLogs.
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailLogs.
     */
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * EmailLog findFirstOrThrow
   */
  export type EmailLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailLogs.
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailLogs.
     */
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * EmailLog findMany
   */
  export type EmailLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Filter, which EmailLogs to fetch.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailLogs.
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * EmailLog create
   */
  export type EmailLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * The data needed to create a EmailLog.
     */
    data: XOR<EmailLogCreateInput, EmailLogUncheckedCreateInput>
  }

  /**
   * EmailLog createMany
   */
  export type EmailLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailLogs.
     */
    data: EmailLogCreateManyInput | EmailLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailLog createManyAndReturn
   */
  export type EmailLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * The data used to create many EmailLogs.
     */
    data: EmailLogCreateManyInput | EmailLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailLog update
   */
  export type EmailLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * The data needed to update a EmailLog.
     */
    data: XOR<EmailLogUpdateInput, EmailLogUncheckedUpdateInput>
    /**
     * Choose, which EmailLog to update.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog updateMany
   */
  export type EmailLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailLogs.
     */
    data: XOR<EmailLogUpdateManyMutationInput, EmailLogUncheckedUpdateManyInput>
    /**
     * Filter which EmailLogs to update
     */
    where?: EmailLogWhereInput
    /**
     * Limit how many EmailLogs to update.
     */
    limit?: number
  }

  /**
   * EmailLog updateManyAndReturn
   */
  export type EmailLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * The data used to update EmailLogs.
     */
    data: XOR<EmailLogUpdateManyMutationInput, EmailLogUncheckedUpdateManyInput>
    /**
     * Filter which EmailLogs to update
     */
    where?: EmailLogWhereInput
    /**
     * Limit how many EmailLogs to update.
     */
    limit?: number
  }

  /**
   * EmailLog upsert
   */
  export type EmailLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * The filter to search for the EmailLog to update in case it exists.
     */
    where: EmailLogWhereUniqueInput
    /**
     * In case the EmailLog found by the `where` argument doesn't exist, create a new EmailLog with this data.
     */
    create: XOR<EmailLogCreateInput, EmailLogUncheckedCreateInput>
    /**
     * In case the EmailLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailLogUpdateInput, EmailLogUncheckedUpdateInput>
  }

  /**
   * EmailLog delete
   */
  export type EmailLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Filter which EmailLog to delete.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog deleteMany
   */
  export type EmailLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailLogs to delete
     */
    where?: EmailLogWhereInput
    /**
     * Limit how many EmailLogs to delete.
     */
    limit?: number
  }

  /**
   * EmailLog without action
   */
  export type EmailLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
  }


  /**
   * Model EmailTemplate
   */

  export type AggregateEmailTemplate = {
    _count: EmailTemplateCountAggregateOutputType | null
    _avg: EmailTemplateAvgAggregateOutputType | null
    _sum: EmailTemplateSumAggregateOutputType | null
    _min: EmailTemplateMinAggregateOutputType | null
    _max: EmailTemplateMaxAggregateOutputType | null
  }

  export type EmailTemplateAvgAggregateOutputType = {
    version: number | null
    usageCount: number | null
  }

  export type EmailTemplateSumAggregateOutputType = {
    version: number | null
    usageCount: number | null
  }

  export type EmailTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    displayName: string | null
    type: $Enums.EmailType | null
    subject: string | null
    description: string | null
    version: number | null
    isActive: boolean | null
    usageCount: number | null
    lastUsedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    displayName: string | null
    type: $Enums.EmailType | null
    subject: string | null
    description: string | null
    version: number | null
    isActive: boolean | null
    usageCount: number | null
    lastUsedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailTemplateCountAggregateOutputType = {
    id: number
    name: number
    displayName: number
    type: number
    subject: number
    description: number
    variables: number
    version: number
    isActive: number
    usageCount: number
    lastUsedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailTemplateAvgAggregateInputType = {
    version?: true
    usageCount?: true
  }

  export type EmailTemplateSumAggregateInputType = {
    version?: true
    usageCount?: true
  }

  export type EmailTemplateMinAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    type?: true
    subject?: true
    description?: true
    version?: true
    isActive?: true
    usageCount?: true
    lastUsedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    type?: true
    subject?: true
    description?: true
    version?: true
    isActive?: true
    usageCount?: true
    lastUsedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailTemplateCountAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    type?: true
    subject?: true
    description?: true
    variables?: true
    version?: true
    isActive?: true
    usageCount?: true
    lastUsedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailTemplate to aggregate.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailTemplates
    **/
    _count?: true | EmailTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailTemplateMaxAggregateInputType
  }

  export type GetEmailTemplateAggregateType<T extends EmailTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailTemplate[P]>
      : GetScalarType<T[P], AggregateEmailTemplate[P]>
  }




  export type EmailTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailTemplateWhereInput
    orderBy?: EmailTemplateOrderByWithAggregationInput | EmailTemplateOrderByWithAggregationInput[]
    by: EmailTemplateScalarFieldEnum[] | EmailTemplateScalarFieldEnum
    having?: EmailTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailTemplateCountAggregateInputType | true
    _avg?: EmailTemplateAvgAggregateInputType
    _sum?: EmailTemplateSumAggregateInputType
    _min?: EmailTemplateMinAggregateInputType
    _max?: EmailTemplateMaxAggregateInputType
  }

  export type EmailTemplateGroupByOutputType = {
    id: string
    name: string
    displayName: string
    type: $Enums.EmailType
    subject: string
    description: string | null
    variables: JsonValue
    version: number
    isActive: boolean
    usageCount: number
    lastUsedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: EmailTemplateCountAggregateOutputType | null
    _avg: EmailTemplateAvgAggregateOutputType | null
    _sum: EmailTemplateSumAggregateOutputType | null
    _min: EmailTemplateMinAggregateOutputType | null
    _max: EmailTemplateMaxAggregateOutputType | null
  }

  type GetEmailTemplateGroupByPayload<T extends EmailTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], EmailTemplateGroupByOutputType[P]>
        }
      >
    >


  export type EmailTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    displayName?: boolean
    type?: boolean
    subject?: boolean
    description?: boolean
    variables?: boolean
    version?: boolean
    isActive?: boolean
    usageCount?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailTemplate"]>

  export type EmailTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    displayName?: boolean
    type?: boolean
    subject?: boolean
    description?: boolean
    variables?: boolean
    version?: boolean
    isActive?: boolean
    usageCount?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailTemplate"]>

  export type EmailTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    displayName?: boolean
    type?: boolean
    subject?: boolean
    description?: boolean
    variables?: boolean
    version?: boolean
    isActive?: boolean
    usageCount?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailTemplate"]>

  export type EmailTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    displayName?: boolean
    type?: boolean
    subject?: boolean
    description?: boolean
    variables?: boolean
    version?: boolean
    isActive?: boolean
    usageCount?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "displayName" | "type" | "subject" | "description" | "variables" | "version" | "isActive" | "usageCount" | "lastUsedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["emailTemplate"]>

  export type $EmailTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailTemplate"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      displayName: string
      type: $Enums.EmailType
      subject: string
      description: string | null
      variables: Prisma.JsonValue
      version: number
      isActive: boolean
      usageCount: number
      lastUsedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailTemplate"]>
    composites: {}
  }

  type EmailTemplateGetPayload<S extends boolean | null | undefined | EmailTemplateDefaultArgs> = $Result.GetResult<Prisma.$EmailTemplatePayload, S>

  type EmailTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailTemplateCountAggregateInputType | true
    }

  export interface EmailTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailTemplate'], meta: { name: 'EmailTemplate' } }
    /**
     * Find zero or one EmailTemplate that matches the filter.
     * @param {EmailTemplateFindUniqueArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailTemplateFindUniqueArgs>(args: SelectSubset<T, EmailTemplateFindUniqueArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailTemplateFindUniqueOrThrowArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateFindFirstArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailTemplateFindFirstArgs>(args?: SelectSubset<T, EmailTemplateFindFirstArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateFindFirstOrThrowArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailTemplates
     * const emailTemplates = await prisma.emailTemplate.findMany()
     * 
     * // Get first 10 EmailTemplates
     * const emailTemplates = await prisma.emailTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailTemplateWithIdOnly = await prisma.emailTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailTemplateFindManyArgs>(args?: SelectSubset<T, EmailTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailTemplate.
     * @param {EmailTemplateCreateArgs} args - Arguments to create a EmailTemplate.
     * @example
     * // Create one EmailTemplate
     * const EmailTemplate = await prisma.emailTemplate.create({
     *   data: {
     *     // ... data to create a EmailTemplate
     *   }
     * })
     * 
     */
    create<T extends EmailTemplateCreateArgs>(args: SelectSubset<T, EmailTemplateCreateArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailTemplates.
     * @param {EmailTemplateCreateManyArgs} args - Arguments to create many EmailTemplates.
     * @example
     * // Create many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailTemplateCreateManyArgs>(args?: SelectSubset<T, EmailTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailTemplates and returns the data saved in the database.
     * @param {EmailTemplateCreateManyAndReturnArgs} args - Arguments to create many EmailTemplates.
     * @example
     * // Create many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailTemplates and only return the `id`
     * const emailTemplateWithIdOnly = await prisma.emailTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailTemplate.
     * @param {EmailTemplateDeleteArgs} args - Arguments to delete one EmailTemplate.
     * @example
     * // Delete one EmailTemplate
     * const EmailTemplate = await prisma.emailTemplate.delete({
     *   where: {
     *     // ... filter to delete one EmailTemplate
     *   }
     * })
     * 
     */
    delete<T extends EmailTemplateDeleteArgs>(args: SelectSubset<T, EmailTemplateDeleteArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailTemplate.
     * @param {EmailTemplateUpdateArgs} args - Arguments to update one EmailTemplate.
     * @example
     * // Update one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailTemplateUpdateArgs>(args: SelectSubset<T, EmailTemplateUpdateArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailTemplates.
     * @param {EmailTemplateDeleteManyArgs} args - Arguments to filter EmailTemplates to delete.
     * @example
     * // Delete a few EmailTemplates
     * const { count } = await prisma.emailTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailTemplateDeleteManyArgs>(args?: SelectSubset<T, EmailTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailTemplateUpdateManyArgs>(args: SelectSubset<T, EmailTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailTemplates and returns the data updated in the database.
     * @param {EmailTemplateUpdateManyAndReturnArgs} args - Arguments to update many EmailTemplates.
     * @example
     * // Update many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailTemplates and only return the `id`
     * const emailTemplateWithIdOnly = await prisma.emailTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailTemplate.
     * @param {EmailTemplateUpsertArgs} args - Arguments to update or create a EmailTemplate.
     * @example
     * // Update or create a EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.upsert({
     *   create: {
     *     // ... data to create a EmailTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailTemplate we want to update
     *   }
     * })
     */
    upsert<T extends EmailTemplateUpsertArgs>(args: SelectSubset<T, EmailTemplateUpsertArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateCountArgs} args - Arguments to filter EmailTemplates to count.
     * @example
     * // Count the number of EmailTemplates
     * const count = await prisma.emailTemplate.count({
     *   where: {
     *     // ... the filter for the EmailTemplates we want to count
     *   }
     * })
    **/
    count<T extends EmailTemplateCountArgs>(
      args?: Subset<T, EmailTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailTemplateAggregateArgs>(args: Subset<T, EmailTemplateAggregateArgs>): Prisma.PrismaPromise<GetEmailTemplateAggregateType<T>>

    /**
     * Group by EmailTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailTemplateGroupByArgs['orderBy'] }
        : { orderBy?: EmailTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailTemplate model
   */
  readonly fields: EmailTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailTemplate model
   */
  interface EmailTemplateFieldRefs {
    readonly id: FieldRef<"EmailTemplate", 'String'>
    readonly name: FieldRef<"EmailTemplate", 'String'>
    readonly displayName: FieldRef<"EmailTemplate", 'String'>
    readonly type: FieldRef<"EmailTemplate", 'EmailType'>
    readonly subject: FieldRef<"EmailTemplate", 'String'>
    readonly description: FieldRef<"EmailTemplate", 'String'>
    readonly variables: FieldRef<"EmailTemplate", 'Json'>
    readonly version: FieldRef<"EmailTemplate", 'Int'>
    readonly isActive: FieldRef<"EmailTemplate", 'Boolean'>
    readonly usageCount: FieldRef<"EmailTemplate", 'Int'>
    readonly lastUsedAt: FieldRef<"EmailTemplate", 'DateTime'>
    readonly createdAt: FieldRef<"EmailTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailTemplate findUnique
   */
  export type EmailTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate findUniqueOrThrow
   */
  export type EmailTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate findFirst
   */
  export type EmailTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailTemplates.
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailTemplates.
     */
    distinct?: EmailTemplateScalarFieldEnum | EmailTemplateScalarFieldEnum[]
  }

  /**
   * EmailTemplate findFirstOrThrow
   */
  export type EmailTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailTemplates.
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailTemplates.
     */
    distinct?: EmailTemplateScalarFieldEnum | EmailTemplateScalarFieldEnum[]
  }

  /**
   * EmailTemplate findMany
   */
  export type EmailTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Filter, which EmailTemplates to fetch.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailTemplates.
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    distinct?: EmailTemplateScalarFieldEnum | EmailTemplateScalarFieldEnum[]
  }

  /**
   * EmailTemplate create
   */
  export type EmailTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * The data needed to create a EmailTemplate.
     */
    data: XOR<EmailTemplateCreateInput, EmailTemplateUncheckedCreateInput>
  }

  /**
   * EmailTemplate createMany
   */
  export type EmailTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailTemplates.
     */
    data: EmailTemplateCreateManyInput | EmailTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailTemplate createManyAndReturn
   */
  export type EmailTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many EmailTemplates.
     */
    data: EmailTemplateCreateManyInput | EmailTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailTemplate update
   */
  export type EmailTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * The data needed to update a EmailTemplate.
     */
    data: XOR<EmailTemplateUpdateInput, EmailTemplateUncheckedUpdateInput>
    /**
     * Choose, which EmailTemplate to update.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate updateMany
   */
  export type EmailTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailTemplates.
     */
    data: XOR<EmailTemplateUpdateManyMutationInput, EmailTemplateUncheckedUpdateManyInput>
    /**
     * Filter which EmailTemplates to update
     */
    where?: EmailTemplateWhereInput
    /**
     * Limit how many EmailTemplates to update.
     */
    limit?: number
  }

  /**
   * EmailTemplate updateManyAndReturn
   */
  export type EmailTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * The data used to update EmailTemplates.
     */
    data: XOR<EmailTemplateUpdateManyMutationInput, EmailTemplateUncheckedUpdateManyInput>
    /**
     * Filter which EmailTemplates to update
     */
    where?: EmailTemplateWhereInput
    /**
     * Limit how many EmailTemplates to update.
     */
    limit?: number
  }

  /**
   * EmailTemplate upsert
   */
  export type EmailTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * The filter to search for the EmailTemplate to update in case it exists.
     */
    where: EmailTemplateWhereUniqueInput
    /**
     * In case the EmailTemplate found by the `where` argument doesn't exist, create a new EmailTemplate with this data.
     */
    create: XOR<EmailTemplateCreateInput, EmailTemplateUncheckedCreateInput>
    /**
     * In case the EmailTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailTemplateUpdateInput, EmailTemplateUncheckedUpdateInput>
  }

  /**
   * EmailTemplate delete
   */
  export type EmailTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Filter which EmailTemplate to delete.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate deleteMany
   */
  export type EmailTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailTemplates to delete
     */
    where?: EmailTemplateWhereInput
    /**
     * Limit how many EmailTemplates to delete.
     */
    limit?: number
  }

  /**
   * EmailTemplate without action
   */
  export type EmailTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
  }


  /**
   * Model UserEmailPreference
   */

  export type AggregateUserEmailPreference = {
    _count: UserEmailPreferenceCountAggregateOutputType | null
    _avg: UserEmailPreferenceAvgAggregateOutputType | null
    _sum: UserEmailPreferenceSumAggregateOutputType | null
    _min: UserEmailPreferenceMinAggregateOutputType | null
    _max: UserEmailPreferenceMaxAggregateOutputType | null
  }

  export type UserEmailPreferenceAvgAggregateOutputType = {
    weeklyReportDay: number | null
  }

  export type UserEmailPreferenceSumAggregateOutputType = {
    weeklyReportDay: number | null
  }

  export type UserEmailPreferenceMinAggregateOutputType = {
    id: string | null
    userId: string | null
    receiveSecurityAlerts: boolean | null
    receiveSystemNotify: boolean | null
    receiveWeeklyReport: boolean | null
    receiveFeatureNews: boolean | null
    receivePromotional: boolean | null
    weeklyReportDay: number | null
    promotionalFrequency: string | null
    globalUnsubscribe: boolean | null
    unsubscribeToken: string | null
    unsubscribedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserEmailPreferenceMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    receiveSecurityAlerts: boolean | null
    receiveSystemNotify: boolean | null
    receiveWeeklyReport: boolean | null
    receiveFeatureNews: boolean | null
    receivePromotional: boolean | null
    weeklyReportDay: number | null
    promotionalFrequency: string | null
    globalUnsubscribe: boolean | null
    unsubscribeToken: string | null
    unsubscribedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserEmailPreferenceCountAggregateOutputType = {
    id: number
    userId: number
    receiveSecurityAlerts: number
    receiveSystemNotify: number
    receiveWeeklyReport: number
    receiveFeatureNews: number
    receivePromotional: number
    weeklyReportDay: number
    promotionalFrequency: number
    globalUnsubscribe: number
    unsubscribeToken: number
    unsubscribedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserEmailPreferenceAvgAggregateInputType = {
    weeklyReportDay?: true
  }

  export type UserEmailPreferenceSumAggregateInputType = {
    weeklyReportDay?: true
  }

  export type UserEmailPreferenceMinAggregateInputType = {
    id?: true
    userId?: true
    receiveSecurityAlerts?: true
    receiveSystemNotify?: true
    receiveWeeklyReport?: true
    receiveFeatureNews?: true
    receivePromotional?: true
    weeklyReportDay?: true
    promotionalFrequency?: true
    globalUnsubscribe?: true
    unsubscribeToken?: true
    unsubscribedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserEmailPreferenceMaxAggregateInputType = {
    id?: true
    userId?: true
    receiveSecurityAlerts?: true
    receiveSystemNotify?: true
    receiveWeeklyReport?: true
    receiveFeatureNews?: true
    receivePromotional?: true
    weeklyReportDay?: true
    promotionalFrequency?: true
    globalUnsubscribe?: true
    unsubscribeToken?: true
    unsubscribedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserEmailPreferenceCountAggregateInputType = {
    id?: true
    userId?: true
    receiveSecurityAlerts?: true
    receiveSystemNotify?: true
    receiveWeeklyReport?: true
    receiveFeatureNews?: true
    receivePromotional?: true
    weeklyReportDay?: true
    promotionalFrequency?: true
    globalUnsubscribe?: true
    unsubscribeToken?: true
    unsubscribedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserEmailPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserEmailPreference to aggregate.
     */
    where?: UserEmailPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserEmailPreferences to fetch.
     */
    orderBy?: UserEmailPreferenceOrderByWithRelationInput | UserEmailPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserEmailPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserEmailPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserEmailPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserEmailPreferences
    **/
    _count?: true | UserEmailPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserEmailPreferenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserEmailPreferenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserEmailPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserEmailPreferenceMaxAggregateInputType
  }

  export type GetUserEmailPreferenceAggregateType<T extends UserEmailPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateUserEmailPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserEmailPreference[P]>
      : GetScalarType<T[P], AggregateUserEmailPreference[P]>
  }




  export type UserEmailPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserEmailPreferenceWhereInput
    orderBy?: UserEmailPreferenceOrderByWithAggregationInput | UserEmailPreferenceOrderByWithAggregationInput[]
    by: UserEmailPreferenceScalarFieldEnum[] | UserEmailPreferenceScalarFieldEnum
    having?: UserEmailPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserEmailPreferenceCountAggregateInputType | true
    _avg?: UserEmailPreferenceAvgAggregateInputType
    _sum?: UserEmailPreferenceSumAggregateInputType
    _min?: UserEmailPreferenceMinAggregateInputType
    _max?: UserEmailPreferenceMaxAggregateInputType
  }

  export type UserEmailPreferenceGroupByOutputType = {
    id: string
    userId: string
    receiveSecurityAlerts: boolean
    receiveSystemNotify: boolean
    receiveWeeklyReport: boolean
    receiveFeatureNews: boolean
    receivePromotional: boolean
    weeklyReportDay: number
    promotionalFrequency: string
    globalUnsubscribe: boolean
    unsubscribeToken: string | null
    unsubscribedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserEmailPreferenceCountAggregateOutputType | null
    _avg: UserEmailPreferenceAvgAggregateOutputType | null
    _sum: UserEmailPreferenceSumAggregateOutputType | null
    _min: UserEmailPreferenceMinAggregateOutputType | null
    _max: UserEmailPreferenceMaxAggregateOutputType | null
  }

  type GetUserEmailPreferenceGroupByPayload<T extends UserEmailPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserEmailPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserEmailPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserEmailPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], UserEmailPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type UserEmailPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    receiveSecurityAlerts?: boolean
    receiveSystemNotify?: boolean
    receiveWeeklyReport?: boolean
    receiveFeatureNews?: boolean
    receivePromotional?: boolean
    weeklyReportDay?: boolean
    promotionalFrequency?: boolean
    globalUnsubscribe?: boolean
    unsubscribeToken?: boolean
    unsubscribedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["userEmailPreference"]>

  export type UserEmailPreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    receiveSecurityAlerts?: boolean
    receiveSystemNotify?: boolean
    receiveWeeklyReport?: boolean
    receiveFeatureNews?: boolean
    receivePromotional?: boolean
    weeklyReportDay?: boolean
    promotionalFrequency?: boolean
    globalUnsubscribe?: boolean
    unsubscribeToken?: boolean
    unsubscribedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["userEmailPreference"]>

  export type UserEmailPreferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    receiveSecurityAlerts?: boolean
    receiveSystemNotify?: boolean
    receiveWeeklyReport?: boolean
    receiveFeatureNews?: boolean
    receivePromotional?: boolean
    weeklyReportDay?: boolean
    promotionalFrequency?: boolean
    globalUnsubscribe?: boolean
    unsubscribeToken?: boolean
    unsubscribedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["userEmailPreference"]>

  export type UserEmailPreferenceSelectScalar = {
    id?: boolean
    userId?: boolean
    receiveSecurityAlerts?: boolean
    receiveSystemNotify?: boolean
    receiveWeeklyReport?: boolean
    receiveFeatureNews?: boolean
    receivePromotional?: boolean
    weeklyReportDay?: boolean
    promotionalFrequency?: boolean
    globalUnsubscribe?: boolean
    unsubscribeToken?: boolean
    unsubscribedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserEmailPreferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "receiveSecurityAlerts" | "receiveSystemNotify" | "receiveWeeklyReport" | "receiveFeatureNews" | "receivePromotional" | "weeklyReportDay" | "promotionalFrequency" | "globalUnsubscribe" | "unsubscribeToken" | "unsubscribedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["userEmailPreference"]>

  export type $UserEmailPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserEmailPreference"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      receiveSecurityAlerts: boolean
      receiveSystemNotify: boolean
      receiveWeeklyReport: boolean
      receiveFeatureNews: boolean
      receivePromotional: boolean
      weeklyReportDay: number
      promotionalFrequency: string
      globalUnsubscribe: boolean
      unsubscribeToken: string | null
      unsubscribedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userEmailPreference"]>
    composites: {}
  }

  type UserEmailPreferenceGetPayload<S extends boolean | null | undefined | UserEmailPreferenceDefaultArgs> = $Result.GetResult<Prisma.$UserEmailPreferencePayload, S>

  type UserEmailPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserEmailPreferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserEmailPreferenceCountAggregateInputType | true
    }

  export interface UserEmailPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserEmailPreference'], meta: { name: 'UserEmailPreference' } }
    /**
     * Find zero or one UserEmailPreference that matches the filter.
     * @param {UserEmailPreferenceFindUniqueArgs} args - Arguments to find a UserEmailPreference
     * @example
     * // Get one UserEmailPreference
     * const userEmailPreference = await prisma.userEmailPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserEmailPreferenceFindUniqueArgs>(args: SelectSubset<T, UserEmailPreferenceFindUniqueArgs<ExtArgs>>): Prisma__UserEmailPreferenceClient<$Result.GetResult<Prisma.$UserEmailPreferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserEmailPreference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserEmailPreferenceFindUniqueOrThrowArgs} args - Arguments to find a UserEmailPreference
     * @example
     * // Get one UserEmailPreference
     * const userEmailPreference = await prisma.userEmailPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserEmailPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, UserEmailPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserEmailPreferenceClient<$Result.GetResult<Prisma.$UserEmailPreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserEmailPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserEmailPreferenceFindFirstArgs} args - Arguments to find a UserEmailPreference
     * @example
     * // Get one UserEmailPreference
     * const userEmailPreference = await prisma.userEmailPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserEmailPreferenceFindFirstArgs>(args?: SelectSubset<T, UserEmailPreferenceFindFirstArgs<ExtArgs>>): Prisma__UserEmailPreferenceClient<$Result.GetResult<Prisma.$UserEmailPreferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserEmailPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserEmailPreferenceFindFirstOrThrowArgs} args - Arguments to find a UserEmailPreference
     * @example
     * // Get one UserEmailPreference
     * const userEmailPreference = await prisma.userEmailPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserEmailPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, UserEmailPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserEmailPreferenceClient<$Result.GetResult<Prisma.$UserEmailPreferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserEmailPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserEmailPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserEmailPreferences
     * const userEmailPreferences = await prisma.userEmailPreference.findMany()
     * 
     * // Get first 10 UserEmailPreferences
     * const userEmailPreferences = await prisma.userEmailPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userEmailPreferenceWithIdOnly = await prisma.userEmailPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserEmailPreferenceFindManyArgs>(args?: SelectSubset<T, UserEmailPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserEmailPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserEmailPreference.
     * @param {UserEmailPreferenceCreateArgs} args - Arguments to create a UserEmailPreference.
     * @example
     * // Create one UserEmailPreference
     * const UserEmailPreference = await prisma.userEmailPreference.create({
     *   data: {
     *     // ... data to create a UserEmailPreference
     *   }
     * })
     * 
     */
    create<T extends UserEmailPreferenceCreateArgs>(args: SelectSubset<T, UserEmailPreferenceCreateArgs<ExtArgs>>): Prisma__UserEmailPreferenceClient<$Result.GetResult<Prisma.$UserEmailPreferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserEmailPreferences.
     * @param {UserEmailPreferenceCreateManyArgs} args - Arguments to create many UserEmailPreferences.
     * @example
     * // Create many UserEmailPreferences
     * const userEmailPreference = await prisma.userEmailPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserEmailPreferenceCreateManyArgs>(args?: SelectSubset<T, UserEmailPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserEmailPreferences and returns the data saved in the database.
     * @param {UserEmailPreferenceCreateManyAndReturnArgs} args - Arguments to create many UserEmailPreferences.
     * @example
     * // Create many UserEmailPreferences
     * const userEmailPreference = await prisma.userEmailPreference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserEmailPreferences and only return the `id`
     * const userEmailPreferenceWithIdOnly = await prisma.userEmailPreference.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserEmailPreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, UserEmailPreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserEmailPreferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserEmailPreference.
     * @param {UserEmailPreferenceDeleteArgs} args - Arguments to delete one UserEmailPreference.
     * @example
     * // Delete one UserEmailPreference
     * const UserEmailPreference = await prisma.userEmailPreference.delete({
     *   where: {
     *     // ... filter to delete one UserEmailPreference
     *   }
     * })
     * 
     */
    delete<T extends UserEmailPreferenceDeleteArgs>(args: SelectSubset<T, UserEmailPreferenceDeleteArgs<ExtArgs>>): Prisma__UserEmailPreferenceClient<$Result.GetResult<Prisma.$UserEmailPreferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserEmailPreference.
     * @param {UserEmailPreferenceUpdateArgs} args - Arguments to update one UserEmailPreference.
     * @example
     * // Update one UserEmailPreference
     * const userEmailPreference = await prisma.userEmailPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserEmailPreferenceUpdateArgs>(args: SelectSubset<T, UserEmailPreferenceUpdateArgs<ExtArgs>>): Prisma__UserEmailPreferenceClient<$Result.GetResult<Prisma.$UserEmailPreferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserEmailPreferences.
     * @param {UserEmailPreferenceDeleteManyArgs} args - Arguments to filter UserEmailPreferences to delete.
     * @example
     * // Delete a few UserEmailPreferences
     * const { count } = await prisma.userEmailPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserEmailPreferenceDeleteManyArgs>(args?: SelectSubset<T, UserEmailPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserEmailPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserEmailPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserEmailPreferences
     * const userEmailPreference = await prisma.userEmailPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserEmailPreferenceUpdateManyArgs>(args: SelectSubset<T, UserEmailPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserEmailPreferences and returns the data updated in the database.
     * @param {UserEmailPreferenceUpdateManyAndReturnArgs} args - Arguments to update many UserEmailPreferences.
     * @example
     * // Update many UserEmailPreferences
     * const userEmailPreference = await prisma.userEmailPreference.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserEmailPreferences and only return the `id`
     * const userEmailPreferenceWithIdOnly = await prisma.userEmailPreference.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserEmailPreferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, UserEmailPreferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserEmailPreferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserEmailPreference.
     * @param {UserEmailPreferenceUpsertArgs} args - Arguments to update or create a UserEmailPreference.
     * @example
     * // Update or create a UserEmailPreference
     * const userEmailPreference = await prisma.userEmailPreference.upsert({
     *   create: {
     *     // ... data to create a UserEmailPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserEmailPreference we want to update
     *   }
     * })
     */
    upsert<T extends UserEmailPreferenceUpsertArgs>(args: SelectSubset<T, UserEmailPreferenceUpsertArgs<ExtArgs>>): Prisma__UserEmailPreferenceClient<$Result.GetResult<Prisma.$UserEmailPreferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserEmailPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserEmailPreferenceCountArgs} args - Arguments to filter UserEmailPreferences to count.
     * @example
     * // Count the number of UserEmailPreferences
     * const count = await prisma.userEmailPreference.count({
     *   where: {
     *     // ... the filter for the UserEmailPreferences we want to count
     *   }
     * })
    **/
    count<T extends UserEmailPreferenceCountArgs>(
      args?: Subset<T, UserEmailPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserEmailPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserEmailPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserEmailPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserEmailPreferenceAggregateArgs>(args: Subset<T, UserEmailPreferenceAggregateArgs>): Prisma.PrismaPromise<GetUserEmailPreferenceAggregateType<T>>

    /**
     * Group by UserEmailPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserEmailPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserEmailPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserEmailPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: UserEmailPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserEmailPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserEmailPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserEmailPreference model
   */
  readonly fields: UserEmailPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserEmailPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserEmailPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserEmailPreference model
   */
  interface UserEmailPreferenceFieldRefs {
    readonly id: FieldRef<"UserEmailPreference", 'String'>
    readonly userId: FieldRef<"UserEmailPreference", 'String'>
    readonly receiveSecurityAlerts: FieldRef<"UserEmailPreference", 'Boolean'>
    readonly receiveSystemNotify: FieldRef<"UserEmailPreference", 'Boolean'>
    readonly receiveWeeklyReport: FieldRef<"UserEmailPreference", 'Boolean'>
    readonly receiveFeatureNews: FieldRef<"UserEmailPreference", 'Boolean'>
    readonly receivePromotional: FieldRef<"UserEmailPreference", 'Boolean'>
    readonly weeklyReportDay: FieldRef<"UserEmailPreference", 'Int'>
    readonly promotionalFrequency: FieldRef<"UserEmailPreference", 'String'>
    readonly globalUnsubscribe: FieldRef<"UserEmailPreference", 'Boolean'>
    readonly unsubscribeToken: FieldRef<"UserEmailPreference", 'String'>
    readonly unsubscribedAt: FieldRef<"UserEmailPreference", 'DateTime'>
    readonly createdAt: FieldRef<"UserEmailPreference", 'DateTime'>
    readonly updatedAt: FieldRef<"UserEmailPreference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserEmailPreference findUnique
   */
  export type UserEmailPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEmailPreference
     */
    select?: UserEmailPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEmailPreference
     */
    omit?: UserEmailPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which UserEmailPreference to fetch.
     */
    where: UserEmailPreferenceWhereUniqueInput
  }

  /**
   * UserEmailPreference findUniqueOrThrow
   */
  export type UserEmailPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEmailPreference
     */
    select?: UserEmailPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEmailPreference
     */
    omit?: UserEmailPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which UserEmailPreference to fetch.
     */
    where: UserEmailPreferenceWhereUniqueInput
  }

  /**
   * UserEmailPreference findFirst
   */
  export type UserEmailPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEmailPreference
     */
    select?: UserEmailPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEmailPreference
     */
    omit?: UserEmailPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which UserEmailPreference to fetch.
     */
    where?: UserEmailPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserEmailPreferences to fetch.
     */
    orderBy?: UserEmailPreferenceOrderByWithRelationInput | UserEmailPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserEmailPreferences.
     */
    cursor?: UserEmailPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserEmailPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserEmailPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserEmailPreferences.
     */
    distinct?: UserEmailPreferenceScalarFieldEnum | UserEmailPreferenceScalarFieldEnum[]
  }

  /**
   * UserEmailPreference findFirstOrThrow
   */
  export type UserEmailPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEmailPreference
     */
    select?: UserEmailPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEmailPreference
     */
    omit?: UserEmailPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which UserEmailPreference to fetch.
     */
    where?: UserEmailPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserEmailPreferences to fetch.
     */
    orderBy?: UserEmailPreferenceOrderByWithRelationInput | UserEmailPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserEmailPreferences.
     */
    cursor?: UserEmailPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserEmailPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserEmailPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserEmailPreferences.
     */
    distinct?: UserEmailPreferenceScalarFieldEnum | UserEmailPreferenceScalarFieldEnum[]
  }

  /**
   * UserEmailPreference findMany
   */
  export type UserEmailPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEmailPreference
     */
    select?: UserEmailPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEmailPreference
     */
    omit?: UserEmailPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which UserEmailPreferences to fetch.
     */
    where?: UserEmailPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserEmailPreferences to fetch.
     */
    orderBy?: UserEmailPreferenceOrderByWithRelationInput | UserEmailPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserEmailPreferences.
     */
    cursor?: UserEmailPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserEmailPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserEmailPreferences.
     */
    skip?: number
    distinct?: UserEmailPreferenceScalarFieldEnum | UserEmailPreferenceScalarFieldEnum[]
  }

  /**
   * UserEmailPreference create
   */
  export type UserEmailPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEmailPreference
     */
    select?: UserEmailPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEmailPreference
     */
    omit?: UserEmailPreferenceOmit<ExtArgs> | null
    /**
     * The data needed to create a UserEmailPreference.
     */
    data: XOR<UserEmailPreferenceCreateInput, UserEmailPreferenceUncheckedCreateInput>
  }

  /**
   * UserEmailPreference createMany
   */
  export type UserEmailPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserEmailPreferences.
     */
    data: UserEmailPreferenceCreateManyInput | UserEmailPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserEmailPreference createManyAndReturn
   */
  export type UserEmailPreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEmailPreference
     */
    select?: UserEmailPreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserEmailPreference
     */
    omit?: UserEmailPreferenceOmit<ExtArgs> | null
    /**
     * The data used to create many UserEmailPreferences.
     */
    data: UserEmailPreferenceCreateManyInput | UserEmailPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserEmailPreference update
   */
  export type UserEmailPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEmailPreference
     */
    select?: UserEmailPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEmailPreference
     */
    omit?: UserEmailPreferenceOmit<ExtArgs> | null
    /**
     * The data needed to update a UserEmailPreference.
     */
    data: XOR<UserEmailPreferenceUpdateInput, UserEmailPreferenceUncheckedUpdateInput>
    /**
     * Choose, which UserEmailPreference to update.
     */
    where: UserEmailPreferenceWhereUniqueInput
  }

  /**
   * UserEmailPreference updateMany
   */
  export type UserEmailPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserEmailPreferences.
     */
    data: XOR<UserEmailPreferenceUpdateManyMutationInput, UserEmailPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which UserEmailPreferences to update
     */
    where?: UserEmailPreferenceWhereInput
    /**
     * Limit how many UserEmailPreferences to update.
     */
    limit?: number
  }

  /**
   * UserEmailPreference updateManyAndReturn
   */
  export type UserEmailPreferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEmailPreference
     */
    select?: UserEmailPreferenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserEmailPreference
     */
    omit?: UserEmailPreferenceOmit<ExtArgs> | null
    /**
     * The data used to update UserEmailPreferences.
     */
    data: XOR<UserEmailPreferenceUpdateManyMutationInput, UserEmailPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which UserEmailPreferences to update
     */
    where?: UserEmailPreferenceWhereInput
    /**
     * Limit how many UserEmailPreferences to update.
     */
    limit?: number
  }

  /**
   * UserEmailPreference upsert
   */
  export type UserEmailPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEmailPreference
     */
    select?: UserEmailPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEmailPreference
     */
    omit?: UserEmailPreferenceOmit<ExtArgs> | null
    /**
     * The filter to search for the UserEmailPreference to update in case it exists.
     */
    where: UserEmailPreferenceWhereUniqueInput
    /**
     * In case the UserEmailPreference found by the `where` argument doesn't exist, create a new UserEmailPreference with this data.
     */
    create: XOR<UserEmailPreferenceCreateInput, UserEmailPreferenceUncheckedCreateInput>
    /**
     * In case the UserEmailPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserEmailPreferenceUpdateInput, UserEmailPreferenceUncheckedUpdateInput>
  }

  /**
   * UserEmailPreference delete
   */
  export type UserEmailPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEmailPreference
     */
    select?: UserEmailPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEmailPreference
     */
    omit?: UserEmailPreferenceOmit<ExtArgs> | null
    /**
     * Filter which UserEmailPreference to delete.
     */
    where: UserEmailPreferenceWhereUniqueInput
  }

  /**
   * UserEmailPreference deleteMany
   */
  export type UserEmailPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserEmailPreferences to delete
     */
    where?: UserEmailPreferenceWhereInput
    /**
     * Limit how many UserEmailPreferences to delete.
     */
    limit?: number
  }

  /**
   * UserEmailPreference without action
   */
  export type UserEmailPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEmailPreference
     */
    select?: UserEmailPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEmailPreference
     */
    omit?: UserEmailPreferenceOmit<ExtArgs> | null
  }


  /**
   * Model EmailStats
   */

  export type AggregateEmailStats = {
    _count: EmailStatsCountAggregateOutputType | null
    _avg: EmailStatsAvgAggregateOutputType | null
    _sum: EmailStatsSumAggregateOutputType | null
    _min: EmailStatsMinAggregateOutputType | null
    _max: EmailStatsMaxAggregateOutputType | null
  }

  export type EmailStatsAvgAggregateOutputType = {
    totalSent: number | null
    totalDelivered: number | null
    totalFailed: number | null
    totalBounced: number | null
    totalOpened: number | null
    totalClicked: number | null
    totalUnsubscribed: number | null
    totalComplaints: number | null
    verificationEmails: number | null
    notificationEmails: number | null
    marketingEmails: number | null
    openRate: number | null
    clickRate: number | null
    deliveryRate: number | null
  }

  export type EmailStatsSumAggregateOutputType = {
    totalSent: number | null
    totalDelivered: number | null
    totalFailed: number | null
    totalBounced: number | null
    totalOpened: number | null
    totalClicked: number | null
    totalUnsubscribed: number | null
    totalComplaints: number | null
    verificationEmails: number | null
    notificationEmails: number | null
    marketingEmails: number | null
    openRate: number | null
    clickRate: number | null
    deliveryRate: number | null
  }

  export type EmailStatsMinAggregateOutputType = {
    id: string | null
    date: Date | null
    totalSent: number | null
    totalDelivered: number | null
    totalFailed: number | null
    totalBounced: number | null
    totalOpened: number | null
    totalClicked: number | null
    totalUnsubscribed: number | null
    totalComplaints: number | null
    verificationEmails: number | null
    notificationEmails: number | null
    marketingEmails: number | null
    openRate: number | null
    clickRate: number | null
    deliveryRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailStatsMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    totalSent: number | null
    totalDelivered: number | null
    totalFailed: number | null
    totalBounced: number | null
    totalOpened: number | null
    totalClicked: number | null
    totalUnsubscribed: number | null
    totalComplaints: number | null
    verificationEmails: number | null
    notificationEmails: number | null
    marketingEmails: number | null
    openRate: number | null
    clickRate: number | null
    deliveryRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailStatsCountAggregateOutputType = {
    id: number
    date: number
    totalSent: number
    totalDelivered: number
    totalFailed: number
    totalBounced: number
    totalOpened: number
    totalClicked: number
    totalUnsubscribed: number
    totalComplaints: number
    verificationEmails: number
    notificationEmails: number
    marketingEmails: number
    openRate: number
    clickRate: number
    deliveryRate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailStatsAvgAggregateInputType = {
    totalSent?: true
    totalDelivered?: true
    totalFailed?: true
    totalBounced?: true
    totalOpened?: true
    totalClicked?: true
    totalUnsubscribed?: true
    totalComplaints?: true
    verificationEmails?: true
    notificationEmails?: true
    marketingEmails?: true
    openRate?: true
    clickRate?: true
    deliveryRate?: true
  }

  export type EmailStatsSumAggregateInputType = {
    totalSent?: true
    totalDelivered?: true
    totalFailed?: true
    totalBounced?: true
    totalOpened?: true
    totalClicked?: true
    totalUnsubscribed?: true
    totalComplaints?: true
    verificationEmails?: true
    notificationEmails?: true
    marketingEmails?: true
    openRate?: true
    clickRate?: true
    deliveryRate?: true
  }

  export type EmailStatsMinAggregateInputType = {
    id?: true
    date?: true
    totalSent?: true
    totalDelivered?: true
    totalFailed?: true
    totalBounced?: true
    totalOpened?: true
    totalClicked?: true
    totalUnsubscribed?: true
    totalComplaints?: true
    verificationEmails?: true
    notificationEmails?: true
    marketingEmails?: true
    openRate?: true
    clickRate?: true
    deliveryRate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailStatsMaxAggregateInputType = {
    id?: true
    date?: true
    totalSent?: true
    totalDelivered?: true
    totalFailed?: true
    totalBounced?: true
    totalOpened?: true
    totalClicked?: true
    totalUnsubscribed?: true
    totalComplaints?: true
    verificationEmails?: true
    notificationEmails?: true
    marketingEmails?: true
    openRate?: true
    clickRate?: true
    deliveryRate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailStatsCountAggregateInputType = {
    id?: true
    date?: true
    totalSent?: true
    totalDelivered?: true
    totalFailed?: true
    totalBounced?: true
    totalOpened?: true
    totalClicked?: true
    totalUnsubscribed?: true
    totalComplaints?: true
    verificationEmails?: true
    notificationEmails?: true
    marketingEmails?: true
    openRate?: true
    clickRate?: true
    deliveryRate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailStats to aggregate.
     */
    where?: EmailStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailStats to fetch.
     */
    orderBy?: EmailStatsOrderByWithRelationInput | EmailStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailStats
    **/
    _count?: true | EmailStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailStatsMaxAggregateInputType
  }

  export type GetEmailStatsAggregateType<T extends EmailStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailStats[P]>
      : GetScalarType<T[P], AggregateEmailStats[P]>
  }




  export type EmailStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailStatsWhereInput
    orderBy?: EmailStatsOrderByWithAggregationInput | EmailStatsOrderByWithAggregationInput[]
    by: EmailStatsScalarFieldEnum[] | EmailStatsScalarFieldEnum
    having?: EmailStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailStatsCountAggregateInputType | true
    _avg?: EmailStatsAvgAggregateInputType
    _sum?: EmailStatsSumAggregateInputType
    _min?: EmailStatsMinAggregateInputType
    _max?: EmailStatsMaxAggregateInputType
  }

  export type EmailStatsGroupByOutputType = {
    id: string
    date: Date
    totalSent: number
    totalDelivered: number
    totalFailed: number
    totalBounced: number
    totalOpened: number
    totalClicked: number
    totalUnsubscribed: number
    totalComplaints: number
    verificationEmails: number
    notificationEmails: number
    marketingEmails: number
    openRate: number | null
    clickRate: number | null
    deliveryRate: number | null
    createdAt: Date
    updatedAt: Date
    _count: EmailStatsCountAggregateOutputType | null
    _avg: EmailStatsAvgAggregateOutputType | null
    _sum: EmailStatsSumAggregateOutputType | null
    _min: EmailStatsMinAggregateOutputType | null
    _max: EmailStatsMaxAggregateOutputType | null
  }

  type GetEmailStatsGroupByPayload<T extends EmailStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailStatsGroupByOutputType[P]>
            : GetScalarType<T[P], EmailStatsGroupByOutputType[P]>
        }
      >
    >


  export type EmailStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    totalSent?: boolean
    totalDelivered?: boolean
    totalFailed?: boolean
    totalBounced?: boolean
    totalOpened?: boolean
    totalClicked?: boolean
    totalUnsubscribed?: boolean
    totalComplaints?: boolean
    verificationEmails?: boolean
    notificationEmails?: boolean
    marketingEmails?: boolean
    openRate?: boolean
    clickRate?: boolean
    deliveryRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailStats"]>

  export type EmailStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    totalSent?: boolean
    totalDelivered?: boolean
    totalFailed?: boolean
    totalBounced?: boolean
    totalOpened?: boolean
    totalClicked?: boolean
    totalUnsubscribed?: boolean
    totalComplaints?: boolean
    verificationEmails?: boolean
    notificationEmails?: boolean
    marketingEmails?: boolean
    openRate?: boolean
    clickRate?: boolean
    deliveryRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailStats"]>

  export type EmailStatsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    totalSent?: boolean
    totalDelivered?: boolean
    totalFailed?: boolean
    totalBounced?: boolean
    totalOpened?: boolean
    totalClicked?: boolean
    totalUnsubscribed?: boolean
    totalComplaints?: boolean
    verificationEmails?: boolean
    notificationEmails?: boolean
    marketingEmails?: boolean
    openRate?: boolean
    clickRate?: boolean
    deliveryRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailStats"]>

  export type EmailStatsSelectScalar = {
    id?: boolean
    date?: boolean
    totalSent?: boolean
    totalDelivered?: boolean
    totalFailed?: boolean
    totalBounced?: boolean
    totalOpened?: boolean
    totalClicked?: boolean
    totalUnsubscribed?: boolean
    totalComplaints?: boolean
    verificationEmails?: boolean
    notificationEmails?: boolean
    marketingEmails?: boolean
    openRate?: boolean
    clickRate?: boolean
    deliveryRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailStatsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "totalSent" | "totalDelivered" | "totalFailed" | "totalBounced" | "totalOpened" | "totalClicked" | "totalUnsubscribed" | "totalComplaints" | "verificationEmails" | "notificationEmails" | "marketingEmails" | "openRate" | "clickRate" | "deliveryRate" | "createdAt" | "updatedAt", ExtArgs["result"]["emailStats"]>

  export type $EmailStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailStats"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      totalSent: number
      totalDelivered: number
      totalFailed: number
      totalBounced: number
      totalOpened: number
      totalClicked: number
      totalUnsubscribed: number
      totalComplaints: number
      verificationEmails: number
      notificationEmails: number
      marketingEmails: number
      openRate: number | null
      clickRate: number | null
      deliveryRate: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailStats"]>
    composites: {}
  }

  type EmailStatsGetPayload<S extends boolean | null | undefined | EmailStatsDefaultArgs> = $Result.GetResult<Prisma.$EmailStatsPayload, S>

  type EmailStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailStatsCountAggregateInputType | true
    }

  export interface EmailStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailStats'], meta: { name: 'EmailStats' } }
    /**
     * Find zero or one EmailStats that matches the filter.
     * @param {EmailStatsFindUniqueArgs} args - Arguments to find a EmailStats
     * @example
     * // Get one EmailStats
     * const emailStats = await prisma.emailStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailStatsFindUniqueArgs>(args: SelectSubset<T, EmailStatsFindUniqueArgs<ExtArgs>>): Prisma__EmailStatsClient<$Result.GetResult<Prisma.$EmailStatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailStats that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailStatsFindUniqueOrThrowArgs} args - Arguments to find a EmailStats
     * @example
     * // Get one EmailStats
     * const emailStats = await prisma.emailStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailStatsClient<$Result.GetResult<Prisma.$EmailStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailStatsFindFirstArgs} args - Arguments to find a EmailStats
     * @example
     * // Get one EmailStats
     * const emailStats = await prisma.emailStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailStatsFindFirstArgs>(args?: SelectSubset<T, EmailStatsFindFirstArgs<ExtArgs>>): Prisma__EmailStatsClient<$Result.GetResult<Prisma.$EmailStatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailStatsFindFirstOrThrowArgs} args - Arguments to find a EmailStats
     * @example
     * // Get one EmailStats
     * const emailStats = await prisma.emailStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailStatsClient<$Result.GetResult<Prisma.$EmailStatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailStats
     * const emailStats = await prisma.emailStats.findMany()
     * 
     * // Get first 10 EmailStats
     * const emailStats = await prisma.emailStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailStatsWithIdOnly = await prisma.emailStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailStatsFindManyArgs>(args?: SelectSubset<T, EmailStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailStats.
     * @param {EmailStatsCreateArgs} args - Arguments to create a EmailStats.
     * @example
     * // Create one EmailStats
     * const EmailStats = await prisma.emailStats.create({
     *   data: {
     *     // ... data to create a EmailStats
     *   }
     * })
     * 
     */
    create<T extends EmailStatsCreateArgs>(args: SelectSubset<T, EmailStatsCreateArgs<ExtArgs>>): Prisma__EmailStatsClient<$Result.GetResult<Prisma.$EmailStatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailStats.
     * @param {EmailStatsCreateManyArgs} args - Arguments to create many EmailStats.
     * @example
     * // Create many EmailStats
     * const emailStats = await prisma.emailStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailStatsCreateManyArgs>(args?: SelectSubset<T, EmailStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailStats and returns the data saved in the database.
     * @param {EmailStatsCreateManyAndReturnArgs} args - Arguments to create many EmailStats.
     * @example
     * // Create many EmailStats
     * const emailStats = await prisma.emailStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailStats and only return the `id`
     * const emailStatsWithIdOnly = await prisma.emailStats.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailStatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailStats.
     * @param {EmailStatsDeleteArgs} args - Arguments to delete one EmailStats.
     * @example
     * // Delete one EmailStats
     * const EmailStats = await prisma.emailStats.delete({
     *   where: {
     *     // ... filter to delete one EmailStats
     *   }
     * })
     * 
     */
    delete<T extends EmailStatsDeleteArgs>(args: SelectSubset<T, EmailStatsDeleteArgs<ExtArgs>>): Prisma__EmailStatsClient<$Result.GetResult<Prisma.$EmailStatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailStats.
     * @param {EmailStatsUpdateArgs} args - Arguments to update one EmailStats.
     * @example
     * // Update one EmailStats
     * const emailStats = await prisma.emailStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailStatsUpdateArgs>(args: SelectSubset<T, EmailStatsUpdateArgs<ExtArgs>>): Prisma__EmailStatsClient<$Result.GetResult<Prisma.$EmailStatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailStats.
     * @param {EmailStatsDeleteManyArgs} args - Arguments to filter EmailStats to delete.
     * @example
     * // Delete a few EmailStats
     * const { count } = await prisma.emailStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailStatsDeleteManyArgs>(args?: SelectSubset<T, EmailStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailStats
     * const emailStats = await prisma.emailStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailStatsUpdateManyArgs>(args: SelectSubset<T, EmailStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailStats and returns the data updated in the database.
     * @param {EmailStatsUpdateManyAndReturnArgs} args - Arguments to update many EmailStats.
     * @example
     * // Update many EmailStats
     * const emailStats = await prisma.emailStats.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailStats and only return the `id`
     * const emailStatsWithIdOnly = await prisma.emailStats.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailStatsUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailStatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailStatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailStats.
     * @param {EmailStatsUpsertArgs} args - Arguments to update or create a EmailStats.
     * @example
     * // Update or create a EmailStats
     * const emailStats = await prisma.emailStats.upsert({
     *   create: {
     *     // ... data to create a EmailStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailStats we want to update
     *   }
     * })
     */
    upsert<T extends EmailStatsUpsertArgs>(args: SelectSubset<T, EmailStatsUpsertArgs<ExtArgs>>): Prisma__EmailStatsClient<$Result.GetResult<Prisma.$EmailStatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailStatsCountArgs} args - Arguments to filter EmailStats to count.
     * @example
     * // Count the number of EmailStats
     * const count = await prisma.emailStats.count({
     *   where: {
     *     // ... the filter for the EmailStats we want to count
     *   }
     * })
    **/
    count<T extends EmailStatsCountArgs>(
      args?: Subset<T, EmailStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailStatsAggregateArgs>(args: Subset<T, EmailStatsAggregateArgs>): Prisma.PrismaPromise<GetEmailStatsAggregateType<T>>

    /**
     * Group by EmailStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailStatsGroupByArgs['orderBy'] }
        : { orderBy?: EmailStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailStats model
   */
  readonly fields: EmailStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailStats model
   */
  interface EmailStatsFieldRefs {
    readonly id: FieldRef<"EmailStats", 'String'>
    readonly date: FieldRef<"EmailStats", 'DateTime'>
    readonly totalSent: FieldRef<"EmailStats", 'Int'>
    readonly totalDelivered: FieldRef<"EmailStats", 'Int'>
    readonly totalFailed: FieldRef<"EmailStats", 'Int'>
    readonly totalBounced: FieldRef<"EmailStats", 'Int'>
    readonly totalOpened: FieldRef<"EmailStats", 'Int'>
    readonly totalClicked: FieldRef<"EmailStats", 'Int'>
    readonly totalUnsubscribed: FieldRef<"EmailStats", 'Int'>
    readonly totalComplaints: FieldRef<"EmailStats", 'Int'>
    readonly verificationEmails: FieldRef<"EmailStats", 'Int'>
    readonly notificationEmails: FieldRef<"EmailStats", 'Int'>
    readonly marketingEmails: FieldRef<"EmailStats", 'Int'>
    readonly openRate: FieldRef<"EmailStats", 'Float'>
    readonly clickRate: FieldRef<"EmailStats", 'Float'>
    readonly deliveryRate: FieldRef<"EmailStats", 'Float'>
    readonly createdAt: FieldRef<"EmailStats", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailStats", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailStats findUnique
   */
  export type EmailStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStats
     */
    select?: EmailStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStats
     */
    omit?: EmailStatsOmit<ExtArgs> | null
    /**
     * Filter, which EmailStats to fetch.
     */
    where: EmailStatsWhereUniqueInput
  }

  /**
   * EmailStats findUniqueOrThrow
   */
  export type EmailStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStats
     */
    select?: EmailStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStats
     */
    omit?: EmailStatsOmit<ExtArgs> | null
    /**
     * Filter, which EmailStats to fetch.
     */
    where: EmailStatsWhereUniqueInput
  }

  /**
   * EmailStats findFirst
   */
  export type EmailStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStats
     */
    select?: EmailStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStats
     */
    omit?: EmailStatsOmit<ExtArgs> | null
    /**
     * Filter, which EmailStats to fetch.
     */
    where?: EmailStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailStats to fetch.
     */
    orderBy?: EmailStatsOrderByWithRelationInput | EmailStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailStats.
     */
    cursor?: EmailStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailStats.
     */
    distinct?: EmailStatsScalarFieldEnum | EmailStatsScalarFieldEnum[]
  }

  /**
   * EmailStats findFirstOrThrow
   */
  export type EmailStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStats
     */
    select?: EmailStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStats
     */
    omit?: EmailStatsOmit<ExtArgs> | null
    /**
     * Filter, which EmailStats to fetch.
     */
    where?: EmailStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailStats to fetch.
     */
    orderBy?: EmailStatsOrderByWithRelationInput | EmailStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailStats.
     */
    cursor?: EmailStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailStats.
     */
    distinct?: EmailStatsScalarFieldEnum | EmailStatsScalarFieldEnum[]
  }

  /**
   * EmailStats findMany
   */
  export type EmailStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStats
     */
    select?: EmailStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStats
     */
    omit?: EmailStatsOmit<ExtArgs> | null
    /**
     * Filter, which EmailStats to fetch.
     */
    where?: EmailStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailStats to fetch.
     */
    orderBy?: EmailStatsOrderByWithRelationInput | EmailStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailStats.
     */
    cursor?: EmailStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailStats.
     */
    skip?: number
    distinct?: EmailStatsScalarFieldEnum | EmailStatsScalarFieldEnum[]
  }

  /**
   * EmailStats create
   */
  export type EmailStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStats
     */
    select?: EmailStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStats
     */
    omit?: EmailStatsOmit<ExtArgs> | null
    /**
     * The data needed to create a EmailStats.
     */
    data: XOR<EmailStatsCreateInput, EmailStatsUncheckedCreateInput>
  }

  /**
   * EmailStats createMany
   */
  export type EmailStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailStats.
     */
    data: EmailStatsCreateManyInput | EmailStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailStats createManyAndReturn
   */
  export type EmailStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStats
     */
    select?: EmailStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStats
     */
    omit?: EmailStatsOmit<ExtArgs> | null
    /**
     * The data used to create many EmailStats.
     */
    data: EmailStatsCreateManyInput | EmailStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailStats update
   */
  export type EmailStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStats
     */
    select?: EmailStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStats
     */
    omit?: EmailStatsOmit<ExtArgs> | null
    /**
     * The data needed to update a EmailStats.
     */
    data: XOR<EmailStatsUpdateInput, EmailStatsUncheckedUpdateInput>
    /**
     * Choose, which EmailStats to update.
     */
    where: EmailStatsWhereUniqueInput
  }

  /**
   * EmailStats updateMany
   */
  export type EmailStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailStats.
     */
    data: XOR<EmailStatsUpdateManyMutationInput, EmailStatsUncheckedUpdateManyInput>
    /**
     * Filter which EmailStats to update
     */
    where?: EmailStatsWhereInput
    /**
     * Limit how many EmailStats to update.
     */
    limit?: number
  }

  /**
   * EmailStats updateManyAndReturn
   */
  export type EmailStatsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStats
     */
    select?: EmailStatsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStats
     */
    omit?: EmailStatsOmit<ExtArgs> | null
    /**
     * The data used to update EmailStats.
     */
    data: XOR<EmailStatsUpdateManyMutationInput, EmailStatsUncheckedUpdateManyInput>
    /**
     * Filter which EmailStats to update
     */
    where?: EmailStatsWhereInput
    /**
     * Limit how many EmailStats to update.
     */
    limit?: number
  }

  /**
   * EmailStats upsert
   */
  export type EmailStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStats
     */
    select?: EmailStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStats
     */
    omit?: EmailStatsOmit<ExtArgs> | null
    /**
     * The filter to search for the EmailStats to update in case it exists.
     */
    where: EmailStatsWhereUniqueInput
    /**
     * In case the EmailStats found by the `where` argument doesn't exist, create a new EmailStats with this data.
     */
    create: XOR<EmailStatsCreateInput, EmailStatsUncheckedCreateInput>
    /**
     * In case the EmailStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailStatsUpdateInput, EmailStatsUncheckedUpdateInput>
  }

  /**
   * EmailStats delete
   */
  export type EmailStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStats
     */
    select?: EmailStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStats
     */
    omit?: EmailStatsOmit<ExtArgs> | null
    /**
     * Filter which EmailStats to delete.
     */
    where: EmailStatsWhereUniqueInput
  }

  /**
   * EmailStats deleteMany
   */
  export type EmailStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailStats to delete
     */
    where?: EmailStatsWhereInput
    /**
     * Limit how many EmailStats to delete.
     */
    limit?: number
  }

  /**
   * EmailStats without action
   */
  export type EmailStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailStats
     */
    select?: EmailStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailStats
     */
    omit?: EmailStatsOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    avatar: 'avatar',
    role: 'role',
    googleId: 'googleId',
    emailVerified: 'emailVerified',
    preferredLanguage: 'preferredLanguage',
    isActive: 'isActive',
    settings: 'settings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLoginAt: 'lastLoginAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    difficulty: 'difficulty',
    source: 'source',
    status: 'status',
    content: 'content',
    correctAnswer: 'correctAnswer',
    explanation: 'explanation',
    audioUrl: 'audioUrl',
    audioScript: 'audioScript',
    qualityScore: 'qualityScore',
    difficultyScore: 'difficultyScore',
    averageTime: 'averageTime',
    successRate: 'successRate',
    usageCount: 'usageCount',
    ratingCount: 'ratingCount',
    lastUsedAt: 'lastUsedAt',
    createdBy: 'createdBy',
    aiGeneratedData: 'aiGeneratedData',
    reviewedBy: 'reviewedBy',
    reviewedAt: 'reviewedAt',
    reviewNotes: 'reviewNotes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const PracticeAnswerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    questionId: 'questionId',
    userAnswer: 'userAnswer',
    isCorrect: 'isCorrect',
    timeSpent: 'timeSpent',
    practiceRecordId: 'practiceRecordId',
    createdAt: 'createdAt'
  };

  export type PracticeAnswerScalarFieldEnum = (typeof PracticeAnswerScalarFieldEnum)[keyof typeof PracticeAnswerScalarFieldEnum]


  export const QuestionRatingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    questionId: 'questionId',
    rating: 'rating',
    comment: 'comment',
    clarity: 'clarity',
    difficulty: 'difficulty',
    quality: 'quality',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionRatingScalarFieldEnum = (typeof QuestionRatingScalarFieldEnum)[keyof typeof QuestionRatingScalarFieldEnum]


  export const PracticeRecordScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    sessionId: 'sessionId',
    questionType: 'questionType',
    difficulty: 'difficulty',
    questionsCount: 'questionsCount',
    correctAnswers: 'correctAnswers',
    totalTime: 'totalTime',
    score: 'score',
    realQuestions: 'realQuestions',
    aiPoolQuestions: 'aiPoolQuestions',
    realtimeQuestions: 'realtimeQuestions',
    questions: 'questions',
    completedAt: 'completedAt'
  };

  export type PracticeRecordScalarFieldEnum = (typeof PracticeRecordScalarFieldEnum)[keyof typeof PracticeRecordScalarFieldEnum]


  export const ChatSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    questionId: 'questionId',
    questionData: 'questionData',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChatSessionScalarFieldEnum = (typeof ChatSessionScalarFieldEnum)[keyof typeof ChatSessionScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    role: 'role',
    content: 'content',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const VocabularyItemScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    word: 'word',
    definition: 'definition',
    phonetic: 'phonetic',
    audioUrl: 'audioUrl',
    context: 'context',
    meanings: 'meanings',
    language: 'language',
    reading: 'reading',
    jlpt: 'jlpt',
    commonality: 'commonality',
    sourceType: 'sourceType',
    sourceId: 'sourceId',
    notes: 'notes',
    mastered: 'mastered',
    tags: 'tags',
    definitionLoading: 'definitionLoading',
    definitionError: 'definitionError',
    nextReviewDate: 'nextReviewDate',
    reviewCount: 'reviewCount',
    correctCount: 'correctCount',
    incorrectCount: 'incorrectCount',
    easeFactor: 'easeFactor',
    interval: 'interval',
    addedAt: 'addedAt',
    lastReviewedAt: 'lastReviewedAt',
    updatedAt: 'updatedAt'
  };

  export type VocabularyItemScalarFieldEnum = (typeof VocabularyItemScalarFieldEnum)[keyof typeof VocabularyItemScalarFieldEnum]


  export const StudyProgressScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    questionType: 'questionType',
    difficulty: 'difficulty',
    totalQuestions: 'totalQuestions',
    correctAnswers: 'correctAnswers',
    averageTime: 'averageTime',
    bestScore: 'bestScore',
    lastPracticeAt: 'lastPracticeAt',
    updatedAt: 'updatedAt'
  };

  export type StudyProgressScalarFieldEnum = (typeof StudyProgressScalarFieldEnum)[keyof typeof StudyProgressScalarFieldEnum]


  export const SubscriptionPlanScalarFieldEnum: {
    id: 'id',
    name: 'name',
    nameJp: 'nameJp',
    priceCents: 'priceCents',
    currency: 'currency',
    interval: 'interval',
    intervalCount: 'intervalCount',
    stripePriceId: 'stripePriceId',
    stripeProductId: 'stripeProductId',
    features: 'features',
    dailyPracticeLimit: 'dailyPracticeLimit',
    dailyAiChatLimit: 'dailyAiChatLimit',
    maxVocabularyWords: 'maxVocabularyWords',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubscriptionPlanScalarFieldEnum = (typeof SubscriptionPlanScalarFieldEnum)[keyof typeof SubscriptionPlanScalarFieldEnum]


  export const UserSubscriptionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    planId: 'planId',
    stripeCustomerId: 'stripeCustomerId',
    stripeSubscriptionId: 'stripeSubscriptionId',
    stripeSessionId: 'stripeSessionId',
    status: 'status',
    trialStart: 'trialStart',
    trialEnd: 'trialEnd',
    currentPeriodStart: 'currentPeriodStart',
    currentPeriodEnd: 'currentPeriodEnd',
    cancelAtPeriodEnd: 'cancelAtPeriodEnd',
    canceledAt: 'canceledAt',
    lastPaymentAt: 'lastPaymentAt',
    nextPaymentAt: 'nextPaymentAt',
    isTestAccount: 'isTestAccount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserSubscriptionScalarFieldEnum = (typeof UserSubscriptionScalarFieldEnum)[keyof typeof UserSubscriptionScalarFieldEnum]


  export const UsageQuotaScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    resourceType: 'resourceType',
    usedCount: 'usedCount',
    limitCount: 'limitCount',
    periodStart: 'periodStart',
    periodEnd: 'periodEnd',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UsageQuotaScalarFieldEnum = (typeof UsageQuotaScalarFieldEnum)[keyof typeof UsageQuotaScalarFieldEnum]


  export const PaymentTransactionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    stripeSessionId: 'stripeSessionId',
    stripePaymentId: 'stripePaymentId',
    amount: 'amount',
    currency: 'currency',
    status: 'status',
    subscriptionId: 'subscriptionId',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentTransactionScalarFieldEnum = (typeof PaymentTransactionScalarFieldEnum)[keyof typeof PaymentTransactionScalarFieldEnum]


  export const APIUsageScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    endpoint: 'endpoint',
    method: 'method',
    statusCode: 'statusCode',
    responseTime: 'responseTime',
    userAgent: 'userAgent',
    ipAddress: 'ipAddress',
    createdAt: 'createdAt'
  };

  export type APIUsageScalarFieldEnum = (typeof APIUsageScalarFieldEnum)[keyof typeof APIUsageScalarFieldEnum]


  export const TokenBlacklistScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tokenId: 'tokenId',
    reason: 'reason',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type TokenBlacklistScalarFieldEnum = (typeof TokenBlacklistScalarFieldEnum)[keyof typeof TokenBlacklistScalarFieldEnum]


  export const AdminSubscriptionLogScalarFieldEnum: {
    id: 'id',
    adminUserId: 'adminUserId',
    targetUserId: 'targetUserId',
    subscriptionId: 'subscriptionId',
    operationType: 'operationType',
    oldStatus: 'oldStatus',
    newStatus: 'newStatus',
    oldTestAccount: 'oldTestAccount',
    newTestAccount: 'newTestAccount',
    metadata: 'metadata',
    reason: 'reason',
    createdAt: 'createdAt'
  };

  export type AdminSubscriptionLogScalarFieldEnum = (typeof AdminSubscriptionLogScalarFieldEnum)[keyof typeof AdminSubscriptionLogScalarFieldEnum]


  export const EmailLogScalarFieldEnum: {
    id: 'id',
    type: 'type',
    status: 'status',
    recipientEmail: 'recipientEmail',
    recipientName: 'recipientName',
    userId: 'userId',
    subject: 'subject',
    templateName: 'templateName',
    templateData: 'templateData',
    htmlContent: 'htmlContent',
    emailProvider: 'emailProvider',
    providerEmailId: 'providerEmailId',
    sentAt: 'sentAt',
    deliveredAt: 'deliveredAt',
    openedAt: 'openedAt',
    clickedAt: 'clickedAt',
    errorMessage: 'errorMessage',
    errorCode: 'errorCode',
    retryCount: 'retryCount',
    maxRetries: 'maxRetries',
    metadata: 'metadata',
    tags: 'tags',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailLogScalarFieldEnum = (typeof EmailLogScalarFieldEnum)[keyof typeof EmailLogScalarFieldEnum]


  export const EmailTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    displayName: 'displayName',
    type: 'type',
    subject: 'subject',
    description: 'description',
    variables: 'variables',
    version: 'version',
    isActive: 'isActive',
    usageCount: 'usageCount',
    lastUsedAt: 'lastUsedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailTemplateScalarFieldEnum = (typeof EmailTemplateScalarFieldEnum)[keyof typeof EmailTemplateScalarFieldEnum]


  export const UserEmailPreferenceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    receiveSecurityAlerts: 'receiveSecurityAlerts',
    receiveSystemNotify: 'receiveSystemNotify',
    receiveWeeklyReport: 'receiveWeeklyReport',
    receiveFeatureNews: 'receiveFeatureNews',
    receivePromotional: 'receivePromotional',
    weeklyReportDay: 'weeklyReportDay',
    promotionalFrequency: 'promotionalFrequency',
    globalUnsubscribe: 'globalUnsubscribe',
    unsubscribeToken: 'unsubscribeToken',
    unsubscribedAt: 'unsubscribedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserEmailPreferenceScalarFieldEnum = (typeof UserEmailPreferenceScalarFieldEnum)[keyof typeof UserEmailPreferenceScalarFieldEnum]


  export const EmailStatsScalarFieldEnum: {
    id: 'id',
    date: 'date',
    totalSent: 'totalSent',
    totalDelivered: 'totalDelivered',
    totalFailed: 'totalFailed',
    totalBounced: 'totalBounced',
    totalOpened: 'totalOpened',
    totalClicked: 'totalClicked',
    totalUnsubscribed: 'totalUnsubscribed',
    totalComplaints: 'totalComplaints',
    verificationEmails: 'verificationEmails',
    notificationEmails: 'notificationEmails',
    marketingEmails: 'marketingEmails',
    openRate: 'openRate',
    clickRate: 'clickRate',
    deliveryRate: 'deliveryRate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailStatsScalarFieldEnum = (typeof EmailStatsScalarFieldEnum)[keyof typeof EmailStatsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'QuestionType'
   */
  export type EnumQuestionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionType'>
    


  /**
   * Reference to a field of type 'QuestionType[]'
   */
  export type ListEnumQuestionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionType[]'>
    


  /**
   * Reference to a field of type 'DifficultyLevel'
   */
  export type EnumDifficultyLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DifficultyLevel'>
    


  /**
   * Reference to a field of type 'DifficultyLevel[]'
   */
  export type ListEnumDifficultyLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DifficultyLevel[]'>
    


  /**
   * Reference to a field of type 'QuestionSource'
   */
  export type EnumQuestionSourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionSource'>
    


  /**
   * Reference to a field of type 'QuestionSource[]'
   */
  export type ListEnumQuestionSourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionSource[]'>
    


  /**
   * Reference to a field of type 'QuestionStatus'
   */
  export type EnumQuestionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionStatus'>
    


  /**
   * Reference to a field of type 'QuestionStatus[]'
   */
  export type ListEnumQuestionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'EmailType'
   */
  export type EnumEmailTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmailType'>
    


  /**
   * Reference to a field of type 'EmailType[]'
   */
  export type ListEnumEmailTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmailType[]'>
    


  /**
   * Reference to a field of type 'EmailStatus'
   */
  export type EnumEmailStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmailStatus'>
    


  /**
   * Reference to a field of type 'EmailStatus[]'
   */
  export type ListEnumEmailStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmailStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    googleId?: StringNullableFilter<"User"> | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    preferredLanguage?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    settings?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    practiceRecords?: PracticeRecordListRelationFilter
    chatSessions?: ChatSessionListRelationFilter
    vocabularyItems?: VocabularyItemListRelationFilter
    studyProgress?: StudyProgressListRelationFilter
    subscription?: XOR<UserSubscriptionNullableScalarRelationFilter, UserSubscriptionWhereInput> | null
    usageQuotas?: UsageQuotaListRelationFilter
    paymentTransactions?: PaymentTransactionListRelationFilter
    questionRatings?: QuestionRatingListRelationFilter
    createdQuestions?: QuestionListRelationFilter
    adminSubscriptionLogs?: AdminSubscriptionLogListRelationFilter
    targetAdminLogs?: AdminSubscriptionLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    role?: SortOrder
    googleId?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    preferredLanguage?: SortOrder
    isActive?: SortOrder
    settings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    practiceRecords?: PracticeRecordOrderByRelationAggregateInput
    chatSessions?: ChatSessionOrderByRelationAggregateInput
    vocabularyItems?: VocabularyItemOrderByRelationAggregateInput
    studyProgress?: StudyProgressOrderByRelationAggregateInput
    subscription?: UserSubscriptionOrderByWithRelationInput
    usageQuotas?: UsageQuotaOrderByRelationAggregateInput
    paymentTransactions?: PaymentTransactionOrderByRelationAggregateInput
    questionRatings?: QuestionRatingOrderByRelationAggregateInput
    createdQuestions?: QuestionOrderByRelationAggregateInput
    adminSubscriptionLogs?: AdminSubscriptionLogOrderByRelationAggregateInput
    targetAdminLogs?: AdminSubscriptionLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    googleId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    emailVerified?: BoolFilter<"User"> | boolean
    preferredLanguage?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    settings?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    practiceRecords?: PracticeRecordListRelationFilter
    chatSessions?: ChatSessionListRelationFilter
    vocabularyItems?: VocabularyItemListRelationFilter
    studyProgress?: StudyProgressListRelationFilter
    subscription?: XOR<UserSubscriptionNullableScalarRelationFilter, UserSubscriptionWhereInput> | null
    usageQuotas?: UsageQuotaListRelationFilter
    paymentTransactions?: PaymentTransactionListRelationFilter
    questionRatings?: QuestionRatingListRelationFilter
    createdQuestions?: QuestionListRelationFilter
    adminSubscriptionLogs?: AdminSubscriptionLogListRelationFilter
    targetAdminLogs?: AdminSubscriptionLogListRelationFilter
  }, "id" | "email" | "googleId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    role?: SortOrder
    googleId?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    preferredLanguage?: SortOrder
    isActive?: SortOrder
    settings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    googleId?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    preferredLanguage?: StringWithAggregatesFilter<"User"> | string
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    settings?: JsonNullableWithAggregatesFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: StringFilter<"Question"> | string
    type?: EnumQuestionTypeFilter<"Question"> | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFilter<"Question"> | $Enums.DifficultyLevel
    source?: EnumQuestionSourceFilter<"Question"> | $Enums.QuestionSource
    status?: EnumQuestionStatusFilter<"Question"> | $Enums.QuestionStatus
    content?: JsonFilter<"Question">
    correctAnswer?: StringFilter<"Question"> | string
    explanation?: StringNullableFilter<"Question"> | string | null
    audioUrl?: StringNullableFilter<"Question"> | string | null
    audioScript?: StringNullableFilter<"Question"> | string | null
    qualityScore?: FloatFilter<"Question"> | number
    difficultyScore?: FloatNullableFilter<"Question"> | number | null
    averageTime?: IntNullableFilter<"Question"> | number | null
    successRate?: FloatNullableFilter<"Question"> | number | null
    usageCount?: IntFilter<"Question"> | number
    ratingCount?: IntFilter<"Question"> | number
    lastUsedAt?: DateTimeNullableFilter<"Question"> | Date | string | null
    createdBy?: StringNullableFilter<"Question"> | string | null
    aiGeneratedData?: JsonNullableFilter<"Question">
    reviewedBy?: StringNullableFilter<"Question"> | string | null
    reviewedAt?: DateTimeNullableFilter<"Question"> | Date | string | null
    reviewNotes?: StringNullableFilter<"Question"> | string | null
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    practiceAnswers?: PracticeAnswerListRelationFilter
    ratings?: QuestionRatingListRelationFilter
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    difficulty?: SortOrder
    source?: SortOrder
    status?: SortOrder
    content?: SortOrder
    correctAnswer?: SortOrder
    explanation?: SortOrderInput | SortOrder
    audioUrl?: SortOrderInput | SortOrder
    audioScript?: SortOrderInput | SortOrder
    qualityScore?: SortOrder
    difficultyScore?: SortOrderInput | SortOrder
    averageTime?: SortOrderInput | SortOrder
    successRate?: SortOrderInput | SortOrder
    usageCount?: SortOrder
    ratingCount?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    aiGeneratedData?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creator?: UserOrderByWithRelationInput
    practiceAnswers?: PracticeAnswerOrderByRelationAggregateInput
    ratings?: QuestionRatingOrderByRelationAggregateInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    type?: EnumQuestionTypeFilter<"Question"> | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFilter<"Question"> | $Enums.DifficultyLevel
    source?: EnumQuestionSourceFilter<"Question"> | $Enums.QuestionSource
    status?: EnumQuestionStatusFilter<"Question"> | $Enums.QuestionStatus
    content?: JsonFilter<"Question">
    correctAnswer?: StringFilter<"Question"> | string
    explanation?: StringNullableFilter<"Question"> | string | null
    audioUrl?: StringNullableFilter<"Question"> | string | null
    audioScript?: StringNullableFilter<"Question"> | string | null
    qualityScore?: FloatFilter<"Question"> | number
    difficultyScore?: FloatNullableFilter<"Question"> | number | null
    averageTime?: IntNullableFilter<"Question"> | number | null
    successRate?: FloatNullableFilter<"Question"> | number | null
    usageCount?: IntFilter<"Question"> | number
    ratingCount?: IntFilter<"Question"> | number
    lastUsedAt?: DateTimeNullableFilter<"Question"> | Date | string | null
    createdBy?: StringNullableFilter<"Question"> | string | null
    aiGeneratedData?: JsonNullableFilter<"Question">
    reviewedBy?: StringNullableFilter<"Question"> | string | null
    reviewedAt?: DateTimeNullableFilter<"Question"> | Date | string | null
    reviewNotes?: StringNullableFilter<"Question"> | string | null
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    practiceAnswers?: PracticeAnswerListRelationFilter
    ratings?: QuestionRatingListRelationFilter
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    difficulty?: SortOrder
    source?: SortOrder
    status?: SortOrder
    content?: SortOrder
    correctAnswer?: SortOrder
    explanation?: SortOrderInput | SortOrder
    audioUrl?: SortOrderInput | SortOrder
    audioScript?: SortOrderInput | SortOrder
    qualityScore?: SortOrder
    difficultyScore?: SortOrderInput | SortOrder
    averageTime?: SortOrderInput | SortOrder
    successRate?: SortOrderInput | SortOrder
    usageCount?: SortOrder
    ratingCount?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    aiGeneratedData?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Question"> | string
    type?: EnumQuestionTypeWithAggregatesFilter<"Question"> | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelWithAggregatesFilter<"Question"> | $Enums.DifficultyLevel
    source?: EnumQuestionSourceWithAggregatesFilter<"Question"> | $Enums.QuestionSource
    status?: EnumQuestionStatusWithAggregatesFilter<"Question"> | $Enums.QuestionStatus
    content?: JsonWithAggregatesFilter<"Question">
    correctAnswer?: StringWithAggregatesFilter<"Question"> | string
    explanation?: StringNullableWithAggregatesFilter<"Question"> | string | null
    audioUrl?: StringNullableWithAggregatesFilter<"Question"> | string | null
    audioScript?: StringNullableWithAggregatesFilter<"Question"> | string | null
    qualityScore?: FloatWithAggregatesFilter<"Question"> | number
    difficultyScore?: FloatNullableWithAggregatesFilter<"Question"> | number | null
    averageTime?: IntNullableWithAggregatesFilter<"Question"> | number | null
    successRate?: FloatNullableWithAggregatesFilter<"Question"> | number | null
    usageCount?: IntWithAggregatesFilter<"Question"> | number
    ratingCount?: IntWithAggregatesFilter<"Question"> | number
    lastUsedAt?: DateTimeNullableWithAggregatesFilter<"Question"> | Date | string | null
    createdBy?: StringNullableWithAggregatesFilter<"Question"> | string | null
    aiGeneratedData?: JsonNullableWithAggregatesFilter<"Question">
    reviewedBy?: StringNullableWithAggregatesFilter<"Question"> | string | null
    reviewedAt?: DateTimeNullableWithAggregatesFilter<"Question"> | Date | string | null
    reviewNotes?: StringNullableWithAggregatesFilter<"Question"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
  }

  export type PracticeAnswerWhereInput = {
    AND?: PracticeAnswerWhereInput | PracticeAnswerWhereInput[]
    OR?: PracticeAnswerWhereInput[]
    NOT?: PracticeAnswerWhereInput | PracticeAnswerWhereInput[]
    id?: StringFilter<"PracticeAnswer"> | string
    userId?: StringFilter<"PracticeAnswer"> | string
    questionId?: StringFilter<"PracticeAnswer"> | string
    userAnswer?: StringFilter<"PracticeAnswer"> | string
    isCorrect?: BoolFilter<"PracticeAnswer"> | boolean
    timeSpent?: IntFilter<"PracticeAnswer"> | number
    practiceRecordId?: StringFilter<"PracticeAnswer"> | string
    createdAt?: DateTimeFilter<"PracticeAnswer"> | Date | string
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    practiceRecord?: XOR<PracticeRecordScalarRelationFilter, PracticeRecordWhereInput>
  }

  export type PracticeAnswerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    userAnswer?: SortOrder
    isCorrect?: SortOrder
    timeSpent?: SortOrder
    practiceRecordId?: SortOrder
    createdAt?: SortOrder
    question?: QuestionOrderByWithRelationInput
    practiceRecord?: PracticeRecordOrderByWithRelationInput
  }

  export type PracticeAnswerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_questionId_practiceRecordId?: PracticeAnswerUserIdQuestionIdPracticeRecordIdCompoundUniqueInput
    AND?: PracticeAnswerWhereInput | PracticeAnswerWhereInput[]
    OR?: PracticeAnswerWhereInput[]
    NOT?: PracticeAnswerWhereInput | PracticeAnswerWhereInput[]
    userId?: StringFilter<"PracticeAnswer"> | string
    questionId?: StringFilter<"PracticeAnswer"> | string
    userAnswer?: StringFilter<"PracticeAnswer"> | string
    isCorrect?: BoolFilter<"PracticeAnswer"> | boolean
    timeSpent?: IntFilter<"PracticeAnswer"> | number
    practiceRecordId?: StringFilter<"PracticeAnswer"> | string
    createdAt?: DateTimeFilter<"PracticeAnswer"> | Date | string
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    practiceRecord?: XOR<PracticeRecordScalarRelationFilter, PracticeRecordWhereInput>
  }, "id" | "userId_questionId_practiceRecordId">

  export type PracticeAnswerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    userAnswer?: SortOrder
    isCorrect?: SortOrder
    timeSpent?: SortOrder
    practiceRecordId?: SortOrder
    createdAt?: SortOrder
    _count?: PracticeAnswerCountOrderByAggregateInput
    _avg?: PracticeAnswerAvgOrderByAggregateInput
    _max?: PracticeAnswerMaxOrderByAggregateInput
    _min?: PracticeAnswerMinOrderByAggregateInput
    _sum?: PracticeAnswerSumOrderByAggregateInput
  }

  export type PracticeAnswerScalarWhereWithAggregatesInput = {
    AND?: PracticeAnswerScalarWhereWithAggregatesInput | PracticeAnswerScalarWhereWithAggregatesInput[]
    OR?: PracticeAnswerScalarWhereWithAggregatesInput[]
    NOT?: PracticeAnswerScalarWhereWithAggregatesInput | PracticeAnswerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PracticeAnswer"> | string
    userId?: StringWithAggregatesFilter<"PracticeAnswer"> | string
    questionId?: StringWithAggregatesFilter<"PracticeAnswer"> | string
    userAnswer?: StringWithAggregatesFilter<"PracticeAnswer"> | string
    isCorrect?: BoolWithAggregatesFilter<"PracticeAnswer"> | boolean
    timeSpent?: IntWithAggregatesFilter<"PracticeAnswer"> | number
    practiceRecordId?: StringWithAggregatesFilter<"PracticeAnswer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PracticeAnswer"> | Date | string
  }

  export type QuestionRatingWhereInput = {
    AND?: QuestionRatingWhereInput | QuestionRatingWhereInput[]
    OR?: QuestionRatingWhereInput[]
    NOT?: QuestionRatingWhereInput | QuestionRatingWhereInput[]
    id?: StringFilter<"QuestionRating"> | string
    userId?: StringFilter<"QuestionRating"> | string
    questionId?: StringFilter<"QuestionRating"> | string
    rating?: IntFilter<"QuestionRating"> | number
    comment?: StringNullableFilter<"QuestionRating"> | string | null
    clarity?: IntNullableFilter<"QuestionRating"> | number | null
    difficulty?: IntNullableFilter<"QuestionRating"> | number | null
    quality?: IntNullableFilter<"QuestionRating"> | number | null
    createdAt?: DateTimeFilter<"QuestionRating"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionRating"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
  }

  export type QuestionRatingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    clarity?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    quality?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    question?: QuestionOrderByWithRelationInput
  }

  export type QuestionRatingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_questionId?: QuestionRatingUserIdQuestionIdCompoundUniqueInput
    AND?: QuestionRatingWhereInput | QuestionRatingWhereInput[]
    OR?: QuestionRatingWhereInput[]
    NOT?: QuestionRatingWhereInput | QuestionRatingWhereInput[]
    userId?: StringFilter<"QuestionRating"> | string
    questionId?: StringFilter<"QuestionRating"> | string
    rating?: IntFilter<"QuestionRating"> | number
    comment?: StringNullableFilter<"QuestionRating"> | string | null
    clarity?: IntNullableFilter<"QuestionRating"> | number | null
    difficulty?: IntNullableFilter<"QuestionRating"> | number | null
    quality?: IntNullableFilter<"QuestionRating"> | number | null
    createdAt?: DateTimeFilter<"QuestionRating"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionRating"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
  }, "id" | "userId_questionId">

  export type QuestionRatingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    clarity?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    quality?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionRatingCountOrderByAggregateInput
    _avg?: QuestionRatingAvgOrderByAggregateInput
    _max?: QuestionRatingMaxOrderByAggregateInput
    _min?: QuestionRatingMinOrderByAggregateInput
    _sum?: QuestionRatingSumOrderByAggregateInput
  }

  export type QuestionRatingScalarWhereWithAggregatesInput = {
    AND?: QuestionRatingScalarWhereWithAggregatesInput | QuestionRatingScalarWhereWithAggregatesInput[]
    OR?: QuestionRatingScalarWhereWithAggregatesInput[]
    NOT?: QuestionRatingScalarWhereWithAggregatesInput | QuestionRatingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuestionRating"> | string
    userId?: StringWithAggregatesFilter<"QuestionRating"> | string
    questionId?: StringWithAggregatesFilter<"QuestionRating"> | string
    rating?: IntWithAggregatesFilter<"QuestionRating"> | number
    comment?: StringNullableWithAggregatesFilter<"QuestionRating"> | string | null
    clarity?: IntNullableWithAggregatesFilter<"QuestionRating"> | number | null
    difficulty?: IntNullableWithAggregatesFilter<"QuestionRating"> | number | null
    quality?: IntNullableWithAggregatesFilter<"QuestionRating"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"QuestionRating"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"QuestionRating"> | Date | string
  }

  export type PracticeRecordWhereInput = {
    AND?: PracticeRecordWhereInput | PracticeRecordWhereInput[]
    OR?: PracticeRecordWhereInput[]
    NOT?: PracticeRecordWhereInput | PracticeRecordWhereInput[]
    id?: StringFilter<"PracticeRecord"> | string
    userId?: StringFilter<"PracticeRecord"> | string
    sessionId?: StringFilter<"PracticeRecord"> | string
    questionType?: EnumQuestionTypeFilter<"PracticeRecord"> | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFilter<"PracticeRecord"> | $Enums.DifficultyLevel
    questionsCount?: IntFilter<"PracticeRecord"> | number
    correctAnswers?: IntFilter<"PracticeRecord"> | number
    totalTime?: IntFilter<"PracticeRecord"> | number
    score?: IntNullableFilter<"PracticeRecord"> | number | null
    realQuestions?: IntFilter<"PracticeRecord"> | number
    aiPoolQuestions?: IntFilter<"PracticeRecord"> | number
    realtimeQuestions?: IntFilter<"PracticeRecord"> | number
    questions?: JsonNullableFilter<"PracticeRecord">
    completedAt?: DateTimeFilter<"PracticeRecord"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    practiceAnswers?: PracticeAnswerListRelationFilter
  }

  export type PracticeRecordOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    questionType?: SortOrder
    difficulty?: SortOrder
    questionsCount?: SortOrder
    correctAnswers?: SortOrder
    totalTime?: SortOrder
    score?: SortOrderInput | SortOrder
    realQuestions?: SortOrder
    aiPoolQuestions?: SortOrder
    realtimeQuestions?: SortOrder
    questions?: SortOrderInput | SortOrder
    completedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    practiceAnswers?: PracticeAnswerOrderByRelationAggregateInput
  }

  export type PracticeRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionId?: string
    AND?: PracticeRecordWhereInput | PracticeRecordWhereInput[]
    OR?: PracticeRecordWhereInput[]
    NOT?: PracticeRecordWhereInput | PracticeRecordWhereInput[]
    userId?: StringFilter<"PracticeRecord"> | string
    questionType?: EnumQuestionTypeFilter<"PracticeRecord"> | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFilter<"PracticeRecord"> | $Enums.DifficultyLevel
    questionsCount?: IntFilter<"PracticeRecord"> | number
    correctAnswers?: IntFilter<"PracticeRecord"> | number
    totalTime?: IntFilter<"PracticeRecord"> | number
    score?: IntNullableFilter<"PracticeRecord"> | number | null
    realQuestions?: IntFilter<"PracticeRecord"> | number
    aiPoolQuestions?: IntFilter<"PracticeRecord"> | number
    realtimeQuestions?: IntFilter<"PracticeRecord"> | number
    questions?: JsonNullableFilter<"PracticeRecord">
    completedAt?: DateTimeFilter<"PracticeRecord"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    practiceAnswers?: PracticeAnswerListRelationFilter
  }, "id" | "sessionId">

  export type PracticeRecordOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    questionType?: SortOrder
    difficulty?: SortOrder
    questionsCount?: SortOrder
    correctAnswers?: SortOrder
    totalTime?: SortOrder
    score?: SortOrderInput | SortOrder
    realQuestions?: SortOrder
    aiPoolQuestions?: SortOrder
    realtimeQuestions?: SortOrder
    questions?: SortOrderInput | SortOrder
    completedAt?: SortOrder
    _count?: PracticeRecordCountOrderByAggregateInput
    _avg?: PracticeRecordAvgOrderByAggregateInput
    _max?: PracticeRecordMaxOrderByAggregateInput
    _min?: PracticeRecordMinOrderByAggregateInput
    _sum?: PracticeRecordSumOrderByAggregateInput
  }

  export type PracticeRecordScalarWhereWithAggregatesInput = {
    AND?: PracticeRecordScalarWhereWithAggregatesInput | PracticeRecordScalarWhereWithAggregatesInput[]
    OR?: PracticeRecordScalarWhereWithAggregatesInput[]
    NOT?: PracticeRecordScalarWhereWithAggregatesInput | PracticeRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PracticeRecord"> | string
    userId?: StringWithAggregatesFilter<"PracticeRecord"> | string
    sessionId?: StringWithAggregatesFilter<"PracticeRecord"> | string
    questionType?: EnumQuestionTypeWithAggregatesFilter<"PracticeRecord"> | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelWithAggregatesFilter<"PracticeRecord"> | $Enums.DifficultyLevel
    questionsCount?: IntWithAggregatesFilter<"PracticeRecord"> | number
    correctAnswers?: IntWithAggregatesFilter<"PracticeRecord"> | number
    totalTime?: IntWithAggregatesFilter<"PracticeRecord"> | number
    score?: IntNullableWithAggregatesFilter<"PracticeRecord"> | number | null
    realQuestions?: IntWithAggregatesFilter<"PracticeRecord"> | number
    aiPoolQuestions?: IntWithAggregatesFilter<"PracticeRecord"> | number
    realtimeQuestions?: IntWithAggregatesFilter<"PracticeRecord"> | number
    questions?: JsonNullableWithAggregatesFilter<"PracticeRecord">
    completedAt?: DateTimeWithAggregatesFilter<"PracticeRecord"> | Date | string
  }

  export type ChatSessionWhereInput = {
    AND?: ChatSessionWhereInput | ChatSessionWhereInput[]
    OR?: ChatSessionWhereInput[]
    NOT?: ChatSessionWhereInput | ChatSessionWhereInput[]
    id?: StringFilter<"ChatSession"> | string
    userId?: StringFilter<"ChatSession"> | string
    title?: StringNullableFilter<"ChatSession"> | string | null
    questionId?: StringNullableFilter<"ChatSession"> | string | null
    questionData?: StringNullableFilter<"ChatSession"> | string | null
    createdAt?: DateTimeFilter<"ChatSession"> | Date | string
    updatedAt?: DateTimeFilter<"ChatSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    messages?: ChatMessageListRelationFilter
  }

  export type ChatSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrderInput | SortOrder
    questionId?: SortOrderInput | SortOrder
    questionData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    messages?: ChatMessageOrderByRelationAggregateInput
  }

  export type ChatSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatSessionWhereInput | ChatSessionWhereInput[]
    OR?: ChatSessionWhereInput[]
    NOT?: ChatSessionWhereInput | ChatSessionWhereInput[]
    userId?: StringFilter<"ChatSession"> | string
    title?: StringNullableFilter<"ChatSession"> | string | null
    questionId?: StringNullableFilter<"ChatSession"> | string | null
    questionData?: StringNullableFilter<"ChatSession"> | string | null
    createdAt?: DateTimeFilter<"ChatSession"> | Date | string
    updatedAt?: DateTimeFilter<"ChatSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    messages?: ChatMessageListRelationFilter
  }, "id">

  export type ChatSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrderInput | SortOrder
    questionId?: SortOrderInput | SortOrder
    questionData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChatSessionCountOrderByAggregateInput
    _max?: ChatSessionMaxOrderByAggregateInput
    _min?: ChatSessionMinOrderByAggregateInput
  }

  export type ChatSessionScalarWhereWithAggregatesInput = {
    AND?: ChatSessionScalarWhereWithAggregatesInput | ChatSessionScalarWhereWithAggregatesInput[]
    OR?: ChatSessionScalarWhereWithAggregatesInput[]
    NOT?: ChatSessionScalarWhereWithAggregatesInput | ChatSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatSession"> | string
    userId?: StringWithAggregatesFilter<"ChatSession"> | string
    title?: StringNullableWithAggregatesFilter<"ChatSession"> | string | null
    questionId?: StringNullableWithAggregatesFilter<"ChatSession"> | string | null
    questionData?: StringNullableWithAggregatesFilter<"ChatSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ChatSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatSession"> | Date | string
  }

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    sessionId?: StringFilter<"ChatMessage"> | string
    role?: StringFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    metadata?: JsonNullableFilter<"ChatMessage">
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    session?: XOR<ChatSessionScalarRelationFilter, ChatSessionWhereInput>
  }

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    session?: ChatSessionOrderByWithRelationInput
  }

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    sessionId?: StringFilter<"ChatMessage"> | string
    role?: StringFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    metadata?: JsonNullableFilter<"ChatMessage">
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    session?: XOR<ChatSessionScalarRelationFilter, ChatSessionWhereInput>
  }, "id">

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    OR?: ChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatMessage"> | string
    sessionId?: StringWithAggregatesFilter<"ChatMessage"> | string
    role?: StringWithAggregatesFilter<"ChatMessage"> | string
    content?: StringWithAggregatesFilter<"ChatMessage"> | string
    metadata?: JsonNullableWithAggregatesFilter<"ChatMessage">
    createdAt?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
  }

  export type VocabularyItemWhereInput = {
    AND?: VocabularyItemWhereInput | VocabularyItemWhereInput[]
    OR?: VocabularyItemWhereInput[]
    NOT?: VocabularyItemWhereInput | VocabularyItemWhereInput[]
    id?: StringFilter<"VocabularyItem"> | string
    userId?: StringFilter<"VocabularyItem"> | string
    word?: StringFilter<"VocabularyItem"> | string
    definition?: StringNullableFilter<"VocabularyItem"> | string | null
    phonetic?: StringNullableFilter<"VocabularyItem"> | string | null
    audioUrl?: StringNullableFilter<"VocabularyItem"> | string | null
    context?: StringNullableFilter<"VocabularyItem"> | string | null
    meanings?: JsonNullableFilter<"VocabularyItem">
    language?: StringFilter<"VocabularyItem"> | string
    reading?: StringNullableFilter<"VocabularyItem"> | string | null
    jlpt?: StringNullableListFilter<"VocabularyItem">
    commonality?: BoolNullableFilter<"VocabularyItem"> | boolean | null
    sourceType?: StringNullableFilter<"VocabularyItem"> | string | null
    sourceId?: StringNullableFilter<"VocabularyItem"> | string | null
    notes?: StringNullableFilter<"VocabularyItem"> | string | null
    mastered?: BoolFilter<"VocabularyItem"> | boolean
    tags?: StringNullableListFilter<"VocabularyItem">
    definitionLoading?: BoolFilter<"VocabularyItem"> | boolean
    definitionError?: BoolFilter<"VocabularyItem"> | boolean
    nextReviewDate?: DateTimeFilter<"VocabularyItem"> | Date | string
    reviewCount?: IntFilter<"VocabularyItem"> | number
    correctCount?: IntFilter<"VocabularyItem"> | number
    incorrectCount?: IntFilter<"VocabularyItem"> | number
    easeFactor?: FloatFilter<"VocabularyItem"> | number
    interval?: IntFilter<"VocabularyItem"> | number
    addedAt?: DateTimeFilter<"VocabularyItem"> | Date | string
    lastReviewedAt?: DateTimeNullableFilter<"VocabularyItem"> | Date | string | null
    updatedAt?: DateTimeFilter<"VocabularyItem"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type VocabularyItemOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    word?: SortOrder
    definition?: SortOrderInput | SortOrder
    phonetic?: SortOrderInput | SortOrder
    audioUrl?: SortOrderInput | SortOrder
    context?: SortOrderInput | SortOrder
    meanings?: SortOrderInput | SortOrder
    language?: SortOrder
    reading?: SortOrderInput | SortOrder
    jlpt?: SortOrder
    commonality?: SortOrderInput | SortOrder
    sourceType?: SortOrderInput | SortOrder
    sourceId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    mastered?: SortOrder
    tags?: SortOrder
    definitionLoading?: SortOrder
    definitionError?: SortOrder
    nextReviewDate?: SortOrder
    reviewCount?: SortOrder
    correctCount?: SortOrder
    incorrectCount?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    addedAt?: SortOrder
    lastReviewedAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type VocabularyItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_word?: VocabularyItemUserIdWordCompoundUniqueInput
    AND?: VocabularyItemWhereInput | VocabularyItemWhereInput[]
    OR?: VocabularyItemWhereInput[]
    NOT?: VocabularyItemWhereInput | VocabularyItemWhereInput[]
    userId?: StringFilter<"VocabularyItem"> | string
    word?: StringFilter<"VocabularyItem"> | string
    definition?: StringNullableFilter<"VocabularyItem"> | string | null
    phonetic?: StringNullableFilter<"VocabularyItem"> | string | null
    audioUrl?: StringNullableFilter<"VocabularyItem"> | string | null
    context?: StringNullableFilter<"VocabularyItem"> | string | null
    meanings?: JsonNullableFilter<"VocabularyItem">
    language?: StringFilter<"VocabularyItem"> | string
    reading?: StringNullableFilter<"VocabularyItem"> | string | null
    jlpt?: StringNullableListFilter<"VocabularyItem">
    commonality?: BoolNullableFilter<"VocabularyItem"> | boolean | null
    sourceType?: StringNullableFilter<"VocabularyItem"> | string | null
    sourceId?: StringNullableFilter<"VocabularyItem"> | string | null
    notes?: StringNullableFilter<"VocabularyItem"> | string | null
    mastered?: BoolFilter<"VocabularyItem"> | boolean
    tags?: StringNullableListFilter<"VocabularyItem">
    definitionLoading?: BoolFilter<"VocabularyItem"> | boolean
    definitionError?: BoolFilter<"VocabularyItem"> | boolean
    nextReviewDate?: DateTimeFilter<"VocabularyItem"> | Date | string
    reviewCount?: IntFilter<"VocabularyItem"> | number
    correctCount?: IntFilter<"VocabularyItem"> | number
    incorrectCount?: IntFilter<"VocabularyItem"> | number
    easeFactor?: FloatFilter<"VocabularyItem"> | number
    interval?: IntFilter<"VocabularyItem"> | number
    addedAt?: DateTimeFilter<"VocabularyItem"> | Date | string
    lastReviewedAt?: DateTimeNullableFilter<"VocabularyItem"> | Date | string | null
    updatedAt?: DateTimeFilter<"VocabularyItem"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_word">

  export type VocabularyItemOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    word?: SortOrder
    definition?: SortOrderInput | SortOrder
    phonetic?: SortOrderInput | SortOrder
    audioUrl?: SortOrderInput | SortOrder
    context?: SortOrderInput | SortOrder
    meanings?: SortOrderInput | SortOrder
    language?: SortOrder
    reading?: SortOrderInput | SortOrder
    jlpt?: SortOrder
    commonality?: SortOrderInput | SortOrder
    sourceType?: SortOrderInput | SortOrder
    sourceId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    mastered?: SortOrder
    tags?: SortOrder
    definitionLoading?: SortOrder
    definitionError?: SortOrder
    nextReviewDate?: SortOrder
    reviewCount?: SortOrder
    correctCount?: SortOrder
    incorrectCount?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    addedAt?: SortOrder
    lastReviewedAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: VocabularyItemCountOrderByAggregateInput
    _avg?: VocabularyItemAvgOrderByAggregateInput
    _max?: VocabularyItemMaxOrderByAggregateInput
    _min?: VocabularyItemMinOrderByAggregateInput
    _sum?: VocabularyItemSumOrderByAggregateInput
  }

  export type VocabularyItemScalarWhereWithAggregatesInput = {
    AND?: VocabularyItemScalarWhereWithAggregatesInput | VocabularyItemScalarWhereWithAggregatesInput[]
    OR?: VocabularyItemScalarWhereWithAggregatesInput[]
    NOT?: VocabularyItemScalarWhereWithAggregatesInput | VocabularyItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VocabularyItem"> | string
    userId?: StringWithAggregatesFilter<"VocabularyItem"> | string
    word?: StringWithAggregatesFilter<"VocabularyItem"> | string
    definition?: StringNullableWithAggregatesFilter<"VocabularyItem"> | string | null
    phonetic?: StringNullableWithAggregatesFilter<"VocabularyItem"> | string | null
    audioUrl?: StringNullableWithAggregatesFilter<"VocabularyItem"> | string | null
    context?: StringNullableWithAggregatesFilter<"VocabularyItem"> | string | null
    meanings?: JsonNullableWithAggregatesFilter<"VocabularyItem">
    language?: StringWithAggregatesFilter<"VocabularyItem"> | string
    reading?: StringNullableWithAggregatesFilter<"VocabularyItem"> | string | null
    jlpt?: StringNullableListFilter<"VocabularyItem">
    commonality?: BoolNullableWithAggregatesFilter<"VocabularyItem"> | boolean | null
    sourceType?: StringNullableWithAggregatesFilter<"VocabularyItem"> | string | null
    sourceId?: StringNullableWithAggregatesFilter<"VocabularyItem"> | string | null
    notes?: StringNullableWithAggregatesFilter<"VocabularyItem"> | string | null
    mastered?: BoolWithAggregatesFilter<"VocabularyItem"> | boolean
    tags?: StringNullableListFilter<"VocabularyItem">
    definitionLoading?: BoolWithAggregatesFilter<"VocabularyItem"> | boolean
    definitionError?: BoolWithAggregatesFilter<"VocabularyItem"> | boolean
    nextReviewDate?: DateTimeWithAggregatesFilter<"VocabularyItem"> | Date | string
    reviewCount?: IntWithAggregatesFilter<"VocabularyItem"> | number
    correctCount?: IntWithAggregatesFilter<"VocabularyItem"> | number
    incorrectCount?: IntWithAggregatesFilter<"VocabularyItem"> | number
    easeFactor?: FloatWithAggregatesFilter<"VocabularyItem"> | number
    interval?: IntWithAggregatesFilter<"VocabularyItem"> | number
    addedAt?: DateTimeWithAggregatesFilter<"VocabularyItem"> | Date | string
    lastReviewedAt?: DateTimeNullableWithAggregatesFilter<"VocabularyItem"> | Date | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"VocabularyItem"> | Date | string
  }

  export type StudyProgressWhereInput = {
    AND?: StudyProgressWhereInput | StudyProgressWhereInput[]
    OR?: StudyProgressWhereInput[]
    NOT?: StudyProgressWhereInput | StudyProgressWhereInput[]
    id?: StringFilter<"StudyProgress"> | string
    userId?: StringFilter<"StudyProgress"> | string
    questionType?: EnumQuestionTypeFilter<"StudyProgress"> | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFilter<"StudyProgress"> | $Enums.DifficultyLevel
    totalQuestions?: IntFilter<"StudyProgress"> | number
    correctAnswers?: IntFilter<"StudyProgress"> | number
    averageTime?: FloatFilter<"StudyProgress"> | number
    bestScore?: IntNullableFilter<"StudyProgress"> | number | null
    lastPracticeAt?: DateTimeNullableFilter<"StudyProgress"> | Date | string | null
    updatedAt?: DateTimeFilter<"StudyProgress"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StudyProgressOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionType?: SortOrder
    difficulty?: SortOrder
    totalQuestions?: SortOrder
    correctAnswers?: SortOrder
    averageTime?: SortOrder
    bestScore?: SortOrderInput | SortOrder
    lastPracticeAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type StudyProgressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_questionType_difficulty?: StudyProgressUserIdQuestionTypeDifficultyCompoundUniqueInput
    AND?: StudyProgressWhereInput | StudyProgressWhereInput[]
    OR?: StudyProgressWhereInput[]
    NOT?: StudyProgressWhereInput | StudyProgressWhereInput[]
    userId?: StringFilter<"StudyProgress"> | string
    questionType?: EnumQuestionTypeFilter<"StudyProgress"> | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFilter<"StudyProgress"> | $Enums.DifficultyLevel
    totalQuestions?: IntFilter<"StudyProgress"> | number
    correctAnswers?: IntFilter<"StudyProgress"> | number
    averageTime?: FloatFilter<"StudyProgress"> | number
    bestScore?: IntNullableFilter<"StudyProgress"> | number | null
    lastPracticeAt?: DateTimeNullableFilter<"StudyProgress"> | Date | string | null
    updatedAt?: DateTimeFilter<"StudyProgress"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_questionType_difficulty">

  export type StudyProgressOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionType?: SortOrder
    difficulty?: SortOrder
    totalQuestions?: SortOrder
    correctAnswers?: SortOrder
    averageTime?: SortOrder
    bestScore?: SortOrderInput | SortOrder
    lastPracticeAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: StudyProgressCountOrderByAggregateInput
    _avg?: StudyProgressAvgOrderByAggregateInput
    _max?: StudyProgressMaxOrderByAggregateInput
    _min?: StudyProgressMinOrderByAggregateInput
    _sum?: StudyProgressSumOrderByAggregateInput
  }

  export type StudyProgressScalarWhereWithAggregatesInput = {
    AND?: StudyProgressScalarWhereWithAggregatesInput | StudyProgressScalarWhereWithAggregatesInput[]
    OR?: StudyProgressScalarWhereWithAggregatesInput[]
    NOT?: StudyProgressScalarWhereWithAggregatesInput | StudyProgressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StudyProgress"> | string
    userId?: StringWithAggregatesFilter<"StudyProgress"> | string
    questionType?: EnumQuestionTypeWithAggregatesFilter<"StudyProgress"> | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelWithAggregatesFilter<"StudyProgress"> | $Enums.DifficultyLevel
    totalQuestions?: IntWithAggregatesFilter<"StudyProgress"> | number
    correctAnswers?: IntWithAggregatesFilter<"StudyProgress"> | number
    averageTime?: FloatWithAggregatesFilter<"StudyProgress"> | number
    bestScore?: IntNullableWithAggregatesFilter<"StudyProgress"> | number | null
    lastPracticeAt?: DateTimeNullableWithAggregatesFilter<"StudyProgress"> | Date | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"StudyProgress"> | Date | string
  }

  export type SubscriptionPlanWhereInput = {
    AND?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    OR?: SubscriptionPlanWhereInput[]
    NOT?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    id?: StringFilter<"SubscriptionPlan"> | string
    name?: StringFilter<"SubscriptionPlan"> | string
    nameJp?: StringNullableFilter<"SubscriptionPlan"> | string | null
    priceCents?: IntFilter<"SubscriptionPlan"> | number
    currency?: StringFilter<"SubscriptionPlan"> | string
    interval?: StringFilter<"SubscriptionPlan"> | string
    intervalCount?: IntFilter<"SubscriptionPlan"> | number
    stripePriceId?: StringNullableFilter<"SubscriptionPlan"> | string | null
    stripeProductId?: StringNullableFilter<"SubscriptionPlan"> | string | null
    features?: JsonFilter<"SubscriptionPlan">
    dailyPracticeLimit?: IntNullableFilter<"SubscriptionPlan"> | number | null
    dailyAiChatLimit?: IntNullableFilter<"SubscriptionPlan"> | number | null
    maxVocabularyWords?: IntNullableFilter<"SubscriptionPlan"> | number | null
    isActive?: BoolFilter<"SubscriptionPlan"> | boolean
    sortOrder?: IntFilter<"SubscriptionPlan"> | number
    createdAt?: DateTimeFilter<"SubscriptionPlan"> | Date | string
    updatedAt?: DateTimeFilter<"SubscriptionPlan"> | Date | string
    subscriptions?: UserSubscriptionListRelationFilter
  }

  export type SubscriptionPlanOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    nameJp?: SortOrderInput | SortOrder
    priceCents?: SortOrder
    currency?: SortOrder
    interval?: SortOrder
    intervalCount?: SortOrder
    stripePriceId?: SortOrderInput | SortOrder
    stripeProductId?: SortOrderInput | SortOrder
    features?: SortOrder
    dailyPracticeLimit?: SortOrderInput | SortOrder
    dailyAiChatLimit?: SortOrderInput | SortOrder
    maxVocabularyWords?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscriptions?: UserSubscriptionOrderByRelationAggregateInput
  }

  export type SubscriptionPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    stripePriceId?: string
    stripeProductId?: string
    AND?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    OR?: SubscriptionPlanWhereInput[]
    NOT?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    name?: StringFilter<"SubscriptionPlan"> | string
    nameJp?: StringNullableFilter<"SubscriptionPlan"> | string | null
    priceCents?: IntFilter<"SubscriptionPlan"> | number
    currency?: StringFilter<"SubscriptionPlan"> | string
    interval?: StringFilter<"SubscriptionPlan"> | string
    intervalCount?: IntFilter<"SubscriptionPlan"> | number
    features?: JsonFilter<"SubscriptionPlan">
    dailyPracticeLimit?: IntNullableFilter<"SubscriptionPlan"> | number | null
    dailyAiChatLimit?: IntNullableFilter<"SubscriptionPlan"> | number | null
    maxVocabularyWords?: IntNullableFilter<"SubscriptionPlan"> | number | null
    isActive?: BoolFilter<"SubscriptionPlan"> | boolean
    sortOrder?: IntFilter<"SubscriptionPlan"> | number
    createdAt?: DateTimeFilter<"SubscriptionPlan"> | Date | string
    updatedAt?: DateTimeFilter<"SubscriptionPlan"> | Date | string
    subscriptions?: UserSubscriptionListRelationFilter
  }, "id" | "stripePriceId" | "stripeProductId">

  export type SubscriptionPlanOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    nameJp?: SortOrderInput | SortOrder
    priceCents?: SortOrder
    currency?: SortOrder
    interval?: SortOrder
    intervalCount?: SortOrder
    stripePriceId?: SortOrderInput | SortOrder
    stripeProductId?: SortOrderInput | SortOrder
    features?: SortOrder
    dailyPracticeLimit?: SortOrderInput | SortOrder
    dailyAiChatLimit?: SortOrderInput | SortOrder
    maxVocabularyWords?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubscriptionPlanCountOrderByAggregateInput
    _avg?: SubscriptionPlanAvgOrderByAggregateInput
    _max?: SubscriptionPlanMaxOrderByAggregateInput
    _min?: SubscriptionPlanMinOrderByAggregateInput
    _sum?: SubscriptionPlanSumOrderByAggregateInput
  }

  export type SubscriptionPlanScalarWhereWithAggregatesInput = {
    AND?: SubscriptionPlanScalarWhereWithAggregatesInput | SubscriptionPlanScalarWhereWithAggregatesInput[]
    OR?: SubscriptionPlanScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionPlanScalarWhereWithAggregatesInput | SubscriptionPlanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SubscriptionPlan"> | string
    name?: StringWithAggregatesFilter<"SubscriptionPlan"> | string
    nameJp?: StringNullableWithAggregatesFilter<"SubscriptionPlan"> | string | null
    priceCents?: IntWithAggregatesFilter<"SubscriptionPlan"> | number
    currency?: StringWithAggregatesFilter<"SubscriptionPlan"> | string
    interval?: StringWithAggregatesFilter<"SubscriptionPlan"> | string
    intervalCount?: IntWithAggregatesFilter<"SubscriptionPlan"> | number
    stripePriceId?: StringNullableWithAggregatesFilter<"SubscriptionPlan"> | string | null
    stripeProductId?: StringNullableWithAggregatesFilter<"SubscriptionPlan"> | string | null
    features?: JsonWithAggregatesFilter<"SubscriptionPlan">
    dailyPracticeLimit?: IntNullableWithAggregatesFilter<"SubscriptionPlan"> | number | null
    dailyAiChatLimit?: IntNullableWithAggregatesFilter<"SubscriptionPlan"> | number | null
    maxVocabularyWords?: IntNullableWithAggregatesFilter<"SubscriptionPlan"> | number | null
    isActive?: BoolWithAggregatesFilter<"SubscriptionPlan"> | boolean
    sortOrder?: IntWithAggregatesFilter<"SubscriptionPlan"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SubscriptionPlan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SubscriptionPlan"> | Date | string
  }

  export type UserSubscriptionWhereInput = {
    AND?: UserSubscriptionWhereInput | UserSubscriptionWhereInput[]
    OR?: UserSubscriptionWhereInput[]
    NOT?: UserSubscriptionWhereInput | UserSubscriptionWhereInput[]
    id?: StringFilter<"UserSubscription"> | string
    userId?: StringFilter<"UserSubscription"> | string
    planId?: StringFilter<"UserSubscription"> | string
    stripeCustomerId?: StringNullableFilter<"UserSubscription"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"UserSubscription"> | string | null
    stripeSessionId?: StringNullableFilter<"UserSubscription"> | string | null
    status?: StringFilter<"UserSubscription"> | string
    trialStart?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    trialEnd?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    currentPeriodStart?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    currentPeriodEnd?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    cancelAtPeriodEnd?: BoolFilter<"UserSubscription"> | boolean
    canceledAt?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    lastPaymentAt?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    nextPaymentAt?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    isTestAccount?: BoolFilter<"UserSubscription"> | boolean
    createdAt?: DateTimeFilter<"UserSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"UserSubscription"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    plan?: XOR<SubscriptionPlanScalarRelationFilter, SubscriptionPlanWhereInput>
    paymentTransactions?: PaymentTransactionListRelationFilter
    adminSubscriptionLogs?: AdminSubscriptionLogListRelationFilter
  }

  export type UserSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    planId?: SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    stripeSessionId?: SortOrderInput | SortOrder
    status?: SortOrder
    trialStart?: SortOrderInput | SortOrder
    trialEnd?: SortOrderInput | SortOrder
    currentPeriodStart?: SortOrderInput | SortOrder
    currentPeriodEnd?: SortOrderInput | SortOrder
    cancelAtPeriodEnd?: SortOrder
    canceledAt?: SortOrderInput | SortOrder
    lastPaymentAt?: SortOrderInput | SortOrder
    nextPaymentAt?: SortOrderInput | SortOrder
    isTestAccount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    plan?: SubscriptionPlanOrderByWithRelationInput
    paymentTransactions?: PaymentTransactionOrderByRelationAggregateInput
    adminSubscriptionLogs?: AdminSubscriptionLogOrderByRelationAggregateInput
  }

  export type UserSubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    stripeSubscriptionId?: string
    AND?: UserSubscriptionWhereInput | UserSubscriptionWhereInput[]
    OR?: UserSubscriptionWhereInput[]
    NOT?: UserSubscriptionWhereInput | UserSubscriptionWhereInput[]
    planId?: StringFilter<"UserSubscription"> | string
    stripeCustomerId?: StringNullableFilter<"UserSubscription"> | string | null
    stripeSessionId?: StringNullableFilter<"UserSubscription"> | string | null
    status?: StringFilter<"UserSubscription"> | string
    trialStart?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    trialEnd?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    currentPeriodStart?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    currentPeriodEnd?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    cancelAtPeriodEnd?: BoolFilter<"UserSubscription"> | boolean
    canceledAt?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    lastPaymentAt?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    nextPaymentAt?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    isTestAccount?: BoolFilter<"UserSubscription"> | boolean
    createdAt?: DateTimeFilter<"UserSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"UserSubscription"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    plan?: XOR<SubscriptionPlanScalarRelationFilter, SubscriptionPlanWhereInput>
    paymentTransactions?: PaymentTransactionListRelationFilter
    adminSubscriptionLogs?: AdminSubscriptionLogListRelationFilter
  }, "id" | "userId" | "stripeSubscriptionId">

  export type UserSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    planId?: SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    stripeSessionId?: SortOrderInput | SortOrder
    status?: SortOrder
    trialStart?: SortOrderInput | SortOrder
    trialEnd?: SortOrderInput | SortOrder
    currentPeriodStart?: SortOrderInput | SortOrder
    currentPeriodEnd?: SortOrderInput | SortOrder
    cancelAtPeriodEnd?: SortOrder
    canceledAt?: SortOrderInput | SortOrder
    lastPaymentAt?: SortOrderInput | SortOrder
    nextPaymentAt?: SortOrderInput | SortOrder
    isTestAccount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserSubscriptionCountOrderByAggregateInput
    _max?: UserSubscriptionMaxOrderByAggregateInput
    _min?: UserSubscriptionMinOrderByAggregateInput
  }

  export type UserSubscriptionScalarWhereWithAggregatesInput = {
    AND?: UserSubscriptionScalarWhereWithAggregatesInput | UserSubscriptionScalarWhereWithAggregatesInput[]
    OR?: UserSubscriptionScalarWhereWithAggregatesInput[]
    NOT?: UserSubscriptionScalarWhereWithAggregatesInput | UserSubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSubscription"> | string
    userId?: StringWithAggregatesFilter<"UserSubscription"> | string
    planId?: StringWithAggregatesFilter<"UserSubscription"> | string
    stripeCustomerId?: StringNullableWithAggregatesFilter<"UserSubscription"> | string | null
    stripeSubscriptionId?: StringNullableWithAggregatesFilter<"UserSubscription"> | string | null
    stripeSessionId?: StringNullableWithAggregatesFilter<"UserSubscription"> | string | null
    status?: StringWithAggregatesFilter<"UserSubscription"> | string
    trialStart?: DateTimeNullableWithAggregatesFilter<"UserSubscription"> | Date | string | null
    trialEnd?: DateTimeNullableWithAggregatesFilter<"UserSubscription"> | Date | string | null
    currentPeriodStart?: DateTimeNullableWithAggregatesFilter<"UserSubscription"> | Date | string | null
    currentPeriodEnd?: DateTimeNullableWithAggregatesFilter<"UserSubscription"> | Date | string | null
    cancelAtPeriodEnd?: BoolWithAggregatesFilter<"UserSubscription"> | boolean
    canceledAt?: DateTimeNullableWithAggregatesFilter<"UserSubscription"> | Date | string | null
    lastPaymentAt?: DateTimeNullableWithAggregatesFilter<"UserSubscription"> | Date | string | null
    nextPaymentAt?: DateTimeNullableWithAggregatesFilter<"UserSubscription"> | Date | string | null
    isTestAccount?: BoolWithAggregatesFilter<"UserSubscription"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserSubscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserSubscription"> | Date | string
  }

  export type UsageQuotaWhereInput = {
    AND?: UsageQuotaWhereInput | UsageQuotaWhereInput[]
    OR?: UsageQuotaWhereInput[]
    NOT?: UsageQuotaWhereInput | UsageQuotaWhereInput[]
    id?: StringFilter<"UsageQuota"> | string
    userId?: StringFilter<"UsageQuota"> | string
    resourceType?: StringFilter<"UsageQuota"> | string
    usedCount?: IntFilter<"UsageQuota"> | number
    limitCount?: IntNullableFilter<"UsageQuota"> | number | null
    periodStart?: DateTimeFilter<"UsageQuota"> | Date | string
    periodEnd?: DateTimeFilter<"UsageQuota"> | Date | string
    createdAt?: DateTimeFilter<"UsageQuota"> | Date | string
    updatedAt?: DateTimeFilter<"UsageQuota"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UsageQuotaOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    usedCount?: SortOrder
    limitCount?: SortOrderInput | SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UsageQuotaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_resourceType_periodStart?: UsageQuotaUserIdResourceTypePeriodStartCompoundUniqueInput
    AND?: UsageQuotaWhereInput | UsageQuotaWhereInput[]
    OR?: UsageQuotaWhereInput[]
    NOT?: UsageQuotaWhereInput | UsageQuotaWhereInput[]
    userId?: StringFilter<"UsageQuota"> | string
    resourceType?: StringFilter<"UsageQuota"> | string
    usedCount?: IntFilter<"UsageQuota"> | number
    limitCount?: IntNullableFilter<"UsageQuota"> | number | null
    periodStart?: DateTimeFilter<"UsageQuota"> | Date | string
    periodEnd?: DateTimeFilter<"UsageQuota"> | Date | string
    createdAt?: DateTimeFilter<"UsageQuota"> | Date | string
    updatedAt?: DateTimeFilter<"UsageQuota"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_resourceType_periodStart">

  export type UsageQuotaOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    usedCount?: SortOrder
    limitCount?: SortOrderInput | SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UsageQuotaCountOrderByAggregateInput
    _avg?: UsageQuotaAvgOrderByAggregateInput
    _max?: UsageQuotaMaxOrderByAggregateInput
    _min?: UsageQuotaMinOrderByAggregateInput
    _sum?: UsageQuotaSumOrderByAggregateInput
  }

  export type UsageQuotaScalarWhereWithAggregatesInput = {
    AND?: UsageQuotaScalarWhereWithAggregatesInput | UsageQuotaScalarWhereWithAggregatesInput[]
    OR?: UsageQuotaScalarWhereWithAggregatesInput[]
    NOT?: UsageQuotaScalarWhereWithAggregatesInput | UsageQuotaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UsageQuota"> | string
    userId?: StringWithAggregatesFilter<"UsageQuota"> | string
    resourceType?: StringWithAggregatesFilter<"UsageQuota"> | string
    usedCount?: IntWithAggregatesFilter<"UsageQuota"> | number
    limitCount?: IntNullableWithAggregatesFilter<"UsageQuota"> | number | null
    periodStart?: DateTimeWithAggregatesFilter<"UsageQuota"> | Date | string
    periodEnd?: DateTimeWithAggregatesFilter<"UsageQuota"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UsageQuota"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UsageQuota"> | Date | string
  }

  export type PaymentTransactionWhereInput = {
    AND?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    OR?: PaymentTransactionWhereInput[]
    NOT?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    id?: StringFilter<"PaymentTransaction"> | string
    userId?: StringFilter<"PaymentTransaction"> | string
    stripeSessionId?: StringNullableFilter<"PaymentTransaction"> | string | null
    stripePaymentId?: StringNullableFilter<"PaymentTransaction"> | string | null
    amount?: IntFilter<"PaymentTransaction"> | number
    currency?: StringFilter<"PaymentTransaction"> | string
    status?: StringFilter<"PaymentTransaction"> | string
    subscriptionId?: StringNullableFilter<"PaymentTransaction"> | string | null
    metadata?: JsonNullableFilter<"PaymentTransaction">
    createdAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    subscription?: XOR<UserSubscriptionNullableScalarRelationFilter, UserSubscriptionWhereInput> | null
  }

  export type PaymentTransactionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    stripeSessionId?: SortOrderInput | SortOrder
    stripePaymentId?: SortOrderInput | SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    subscriptionId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    subscription?: UserSubscriptionOrderByWithRelationInput
  }

  export type PaymentTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    stripeSessionId?: string
    stripePaymentId?: string
    AND?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    OR?: PaymentTransactionWhereInput[]
    NOT?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    userId?: StringFilter<"PaymentTransaction"> | string
    amount?: IntFilter<"PaymentTransaction"> | number
    currency?: StringFilter<"PaymentTransaction"> | string
    status?: StringFilter<"PaymentTransaction"> | string
    subscriptionId?: StringNullableFilter<"PaymentTransaction"> | string | null
    metadata?: JsonNullableFilter<"PaymentTransaction">
    createdAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    subscription?: XOR<UserSubscriptionNullableScalarRelationFilter, UserSubscriptionWhereInput> | null
  }, "id" | "stripeSessionId" | "stripePaymentId">

  export type PaymentTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    stripeSessionId?: SortOrderInput | SortOrder
    stripePaymentId?: SortOrderInput | SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    subscriptionId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentTransactionCountOrderByAggregateInput
    _avg?: PaymentTransactionAvgOrderByAggregateInput
    _max?: PaymentTransactionMaxOrderByAggregateInput
    _min?: PaymentTransactionMinOrderByAggregateInput
    _sum?: PaymentTransactionSumOrderByAggregateInput
  }

  export type PaymentTransactionScalarWhereWithAggregatesInput = {
    AND?: PaymentTransactionScalarWhereWithAggregatesInput | PaymentTransactionScalarWhereWithAggregatesInput[]
    OR?: PaymentTransactionScalarWhereWithAggregatesInput[]
    NOT?: PaymentTransactionScalarWhereWithAggregatesInput | PaymentTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PaymentTransaction"> | string
    userId?: StringWithAggregatesFilter<"PaymentTransaction"> | string
    stripeSessionId?: StringNullableWithAggregatesFilter<"PaymentTransaction"> | string | null
    stripePaymentId?: StringNullableWithAggregatesFilter<"PaymentTransaction"> | string | null
    amount?: IntWithAggregatesFilter<"PaymentTransaction"> | number
    currency?: StringWithAggregatesFilter<"PaymentTransaction"> | string
    status?: StringWithAggregatesFilter<"PaymentTransaction"> | string
    subscriptionId?: StringNullableWithAggregatesFilter<"PaymentTransaction"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"PaymentTransaction">
    createdAt?: DateTimeWithAggregatesFilter<"PaymentTransaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PaymentTransaction"> | Date | string
  }

  export type APIUsageWhereInput = {
    AND?: APIUsageWhereInput | APIUsageWhereInput[]
    OR?: APIUsageWhereInput[]
    NOT?: APIUsageWhereInput | APIUsageWhereInput[]
    id?: StringFilter<"APIUsage"> | string
    userId?: StringNullableFilter<"APIUsage"> | string | null
    endpoint?: StringFilter<"APIUsage"> | string
    method?: StringFilter<"APIUsage"> | string
    statusCode?: IntFilter<"APIUsage"> | number
    responseTime?: IntFilter<"APIUsage"> | number
    userAgent?: StringNullableFilter<"APIUsage"> | string | null
    ipAddress?: StringNullableFilter<"APIUsage"> | string | null
    createdAt?: DateTimeFilter<"APIUsage"> | Date | string
  }

  export type APIUsageOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    responseTime?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type APIUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: APIUsageWhereInput | APIUsageWhereInput[]
    OR?: APIUsageWhereInput[]
    NOT?: APIUsageWhereInput | APIUsageWhereInput[]
    userId?: StringNullableFilter<"APIUsage"> | string | null
    endpoint?: StringFilter<"APIUsage"> | string
    method?: StringFilter<"APIUsage"> | string
    statusCode?: IntFilter<"APIUsage"> | number
    responseTime?: IntFilter<"APIUsage"> | number
    userAgent?: StringNullableFilter<"APIUsage"> | string | null
    ipAddress?: StringNullableFilter<"APIUsage"> | string | null
    createdAt?: DateTimeFilter<"APIUsage"> | Date | string
  }, "id">

  export type APIUsageOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    responseTime?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: APIUsageCountOrderByAggregateInput
    _avg?: APIUsageAvgOrderByAggregateInput
    _max?: APIUsageMaxOrderByAggregateInput
    _min?: APIUsageMinOrderByAggregateInput
    _sum?: APIUsageSumOrderByAggregateInput
  }

  export type APIUsageScalarWhereWithAggregatesInput = {
    AND?: APIUsageScalarWhereWithAggregatesInput | APIUsageScalarWhereWithAggregatesInput[]
    OR?: APIUsageScalarWhereWithAggregatesInput[]
    NOT?: APIUsageScalarWhereWithAggregatesInput | APIUsageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"APIUsage"> | string
    userId?: StringNullableWithAggregatesFilter<"APIUsage"> | string | null
    endpoint?: StringWithAggregatesFilter<"APIUsage"> | string
    method?: StringWithAggregatesFilter<"APIUsage"> | string
    statusCode?: IntWithAggregatesFilter<"APIUsage"> | number
    responseTime?: IntWithAggregatesFilter<"APIUsage"> | number
    userAgent?: StringNullableWithAggregatesFilter<"APIUsage"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"APIUsage"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"APIUsage"> | Date | string
  }

  export type TokenBlacklistWhereInput = {
    AND?: TokenBlacklistWhereInput | TokenBlacklistWhereInput[]
    OR?: TokenBlacklistWhereInput[]
    NOT?: TokenBlacklistWhereInput | TokenBlacklistWhereInput[]
    id?: StringFilter<"TokenBlacklist"> | string
    userId?: StringFilter<"TokenBlacklist"> | string
    tokenId?: StringFilter<"TokenBlacklist"> | string
    reason?: StringFilter<"TokenBlacklist"> | string
    expiresAt?: DateTimeFilter<"TokenBlacklist"> | Date | string
    createdAt?: DateTimeFilter<"TokenBlacklist"> | Date | string
  }

  export type TokenBlacklistOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenId?: SortOrder
    reason?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenBlacklistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_tokenId?: TokenBlacklistUserIdTokenIdCompoundUniqueInput
    AND?: TokenBlacklistWhereInput | TokenBlacklistWhereInput[]
    OR?: TokenBlacklistWhereInput[]
    NOT?: TokenBlacklistWhereInput | TokenBlacklistWhereInput[]
    userId?: StringFilter<"TokenBlacklist"> | string
    tokenId?: StringFilter<"TokenBlacklist"> | string
    reason?: StringFilter<"TokenBlacklist"> | string
    expiresAt?: DateTimeFilter<"TokenBlacklist"> | Date | string
    createdAt?: DateTimeFilter<"TokenBlacklist"> | Date | string
  }, "id" | "userId_tokenId">

  export type TokenBlacklistOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenId?: SortOrder
    reason?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: TokenBlacklistCountOrderByAggregateInput
    _max?: TokenBlacklistMaxOrderByAggregateInput
    _min?: TokenBlacklistMinOrderByAggregateInput
  }

  export type TokenBlacklistScalarWhereWithAggregatesInput = {
    AND?: TokenBlacklistScalarWhereWithAggregatesInput | TokenBlacklistScalarWhereWithAggregatesInput[]
    OR?: TokenBlacklistScalarWhereWithAggregatesInput[]
    NOT?: TokenBlacklistScalarWhereWithAggregatesInput | TokenBlacklistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TokenBlacklist"> | string
    userId?: StringWithAggregatesFilter<"TokenBlacklist"> | string
    tokenId?: StringWithAggregatesFilter<"TokenBlacklist"> | string
    reason?: StringWithAggregatesFilter<"TokenBlacklist"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"TokenBlacklist"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"TokenBlacklist"> | Date | string
  }

  export type AdminSubscriptionLogWhereInput = {
    AND?: AdminSubscriptionLogWhereInput | AdminSubscriptionLogWhereInput[]
    OR?: AdminSubscriptionLogWhereInput[]
    NOT?: AdminSubscriptionLogWhereInput | AdminSubscriptionLogWhereInput[]
    id?: StringFilter<"AdminSubscriptionLog"> | string
    adminUserId?: StringFilter<"AdminSubscriptionLog"> | string
    targetUserId?: StringFilter<"AdminSubscriptionLog"> | string
    subscriptionId?: StringNullableFilter<"AdminSubscriptionLog"> | string | null
    operationType?: StringFilter<"AdminSubscriptionLog"> | string
    oldStatus?: StringNullableFilter<"AdminSubscriptionLog"> | string | null
    newStatus?: StringNullableFilter<"AdminSubscriptionLog"> | string | null
    oldTestAccount?: BoolNullableFilter<"AdminSubscriptionLog"> | boolean | null
    newTestAccount?: BoolNullableFilter<"AdminSubscriptionLog"> | boolean | null
    metadata?: JsonNullableFilter<"AdminSubscriptionLog">
    reason?: StringNullableFilter<"AdminSubscriptionLog"> | string | null
    createdAt?: DateTimeFilter<"AdminSubscriptionLog"> | Date | string
    adminUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    targetUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    subscription?: XOR<UserSubscriptionNullableScalarRelationFilter, UserSubscriptionWhereInput> | null
  }

  export type AdminSubscriptionLogOrderByWithRelationInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    targetUserId?: SortOrder
    subscriptionId?: SortOrderInput | SortOrder
    operationType?: SortOrder
    oldStatus?: SortOrderInput | SortOrder
    newStatus?: SortOrderInput | SortOrder
    oldTestAccount?: SortOrderInput | SortOrder
    newTestAccount?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    adminUser?: UserOrderByWithRelationInput
    targetUser?: UserOrderByWithRelationInput
    subscription?: UserSubscriptionOrderByWithRelationInput
  }

  export type AdminSubscriptionLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdminSubscriptionLogWhereInput | AdminSubscriptionLogWhereInput[]
    OR?: AdminSubscriptionLogWhereInput[]
    NOT?: AdminSubscriptionLogWhereInput | AdminSubscriptionLogWhereInput[]
    adminUserId?: StringFilter<"AdminSubscriptionLog"> | string
    targetUserId?: StringFilter<"AdminSubscriptionLog"> | string
    subscriptionId?: StringNullableFilter<"AdminSubscriptionLog"> | string | null
    operationType?: StringFilter<"AdminSubscriptionLog"> | string
    oldStatus?: StringNullableFilter<"AdminSubscriptionLog"> | string | null
    newStatus?: StringNullableFilter<"AdminSubscriptionLog"> | string | null
    oldTestAccount?: BoolNullableFilter<"AdminSubscriptionLog"> | boolean | null
    newTestAccount?: BoolNullableFilter<"AdminSubscriptionLog"> | boolean | null
    metadata?: JsonNullableFilter<"AdminSubscriptionLog">
    reason?: StringNullableFilter<"AdminSubscriptionLog"> | string | null
    createdAt?: DateTimeFilter<"AdminSubscriptionLog"> | Date | string
    adminUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    targetUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    subscription?: XOR<UserSubscriptionNullableScalarRelationFilter, UserSubscriptionWhereInput> | null
  }, "id">

  export type AdminSubscriptionLogOrderByWithAggregationInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    targetUserId?: SortOrder
    subscriptionId?: SortOrderInput | SortOrder
    operationType?: SortOrder
    oldStatus?: SortOrderInput | SortOrder
    newStatus?: SortOrderInput | SortOrder
    oldTestAccount?: SortOrderInput | SortOrder
    newTestAccount?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AdminSubscriptionLogCountOrderByAggregateInput
    _max?: AdminSubscriptionLogMaxOrderByAggregateInput
    _min?: AdminSubscriptionLogMinOrderByAggregateInput
  }

  export type AdminSubscriptionLogScalarWhereWithAggregatesInput = {
    AND?: AdminSubscriptionLogScalarWhereWithAggregatesInput | AdminSubscriptionLogScalarWhereWithAggregatesInput[]
    OR?: AdminSubscriptionLogScalarWhereWithAggregatesInput[]
    NOT?: AdminSubscriptionLogScalarWhereWithAggregatesInput | AdminSubscriptionLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminSubscriptionLog"> | string
    adminUserId?: StringWithAggregatesFilter<"AdminSubscriptionLog"> | string
    targetUserId?: StringWithAggregatesFilter<"AdminSubscriptionLog"> | string
    subscriptionId?: StringNullableWithAggregatesFilter<"AdminSubscriptionLog"> | string | null
    operationType?: StringWithAggregatesFilter<"AdminSubscriptionLog"> | string
    oldStatus?: StringNullableWithAggregatesFilter<"AdminSubscriptionLog"> | string | null
    newStatus?: StringNullableWithAggregatesFilter<"AdminSubscriptionLog"> | string | null
    oldTestAccount?: BoolNullableWithAggregatesFilter<"AdminSubscriptionLog"> | boolean | null
    newTestAccount?: BoolNullableWithAggregatesFilter<"AdminSubscriptionLog"> | boolean | null
    metadata?: JsonNullableWithAggregatesFilter<"AdminSubscriptionLog">
    reason?: StringNullableWithAggregatesFilter<"AdminSubscriptionLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AdminSubscriptionLog"> | Date | string
  }

  export type EmailLogWhereInput = {
    AND?: EmailLogWhereInput | EmailLogWhereInput[]
    OR?: EmailLogWhereInput[]
    NOT?: EmailLogWhereInput | EmailLogWhereInput[]
    id?: StringFilter<"EmailLog"> | string
    type?: EnumEmailTypeFilter<"EmailLog"> | $Enums.EmailType
    status?: EnumEmailStatusFilter<"EmailLog"> | $Enums.EmailStatus
    recipientEmail?: StringFilter<"EmailLog"> | string
    recipientName?: StringNullableFilter<"EmailLog"> | string | null
    userId?: StringNullableFilter<"EmailLog"> | string | null
    subject?: StringFilter<"EmailLog"> | string
    templateName?: StringFilter<"EmailLog"> | string
    templateData?: JsonNullableFilter<"EmailLog">
    htmlContent?: StringNullableFilter<"EmailLog"> | string | null
    emailProvider?: StringFilter<"EmailLog"> | string
    providerEmailId?: StringNullableFilter<"EmailLog"> | string | null
    sentAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    openedAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    clickedAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    errorMessage?: StringNullableFilter<"EmailLog"> | string | null
    errorCode?: StringNullableFilter<"EmailLog"> | string | null
    retryCount?: IntFilter<"EmailLog"> | number
    maxRetries?: IntFilter<"EmailLog"> | number
    metadata?: JsonNullableFilter<"EmailLog">
    tags?: StringNullableListFilter<"EmailLog">
    createdAt?: DateTimeFilter<"EmailLog"> | Date | string
    updatedAt?: DateTimeFilter<"EmailLog"> | Date | string
  }

  export type EmailLogOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    recipientEmail?: SortOrder
    recipientName?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    subject?: SortOrder
    templateName?: SortOrder
    templateData?: SortOrderInput | SortOrder
    htmlContent?: SortOrderInput | SortOrder
    emailProvider?: SortOrder
    providerEmailId?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    openedAt?: SortOrderInput | SortOrder
    clickedAt?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    errorCode?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    metadata?: SortOrderInput | SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmailLogWhereInput | EmailLogWhereInput[]
    OR?: EmailLogWhereInput[]
    NOT?: EmailLogWhereInput | EmailLogWhereInput[]
    type?: EnumEmailTypeFilter<"EmailLog"> | $Enums.EmailType
    status?: EnumEmailStatusFilter<"EmailLog"> | $Enums.EmailStatus
    recipientEmail?: StringFilter<"EmailLog"> | string
    recipientName?: StringNullableFilter<"EmailLog"> | string | null
    userId?: StringNullableFilter<"EmailLog"> | string | null
    subject?: StringFilter<"EmailLog"> | string
    templateName?: StringFilter<"EmailLog"> | string
    templateData?: JsonNullableFilter<"EmailLog">
    htmlContent?: StringNullableFilter<"EmailLog"> | string | null
    emailProvider?: StringFilter<"EmailLog"> | string
    providerEmailId?: StringNullableFilter<"EmailLog"> | string | null
    sentAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    openedAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    clickedAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    errorMessage?: StringNullableFilter<"EmailLog"> | string | null
    errorCode?: StringNullableFilter<"EmailLog"> | string | null
    retryCount?: IntFilter<"EmailLog"> | number
    maxRetries?: IntFilter<"EmailLog"> | number
    metadata?: JsonNullableFilter<"EmailLog">
    tags?: StringNullableListFilter<"EmailLog">
    createdAt?: DateTimeFilter<"EmailLog"> | Date | string
    updatedAt?: DateTimeFilter<"EmailLog"> | Date | string
  }, "id">

  export type EmailLogOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    recipientEmail?: SortOrder
    recipientName?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    subject?: SortOrder
    templateName?: SortOrder
    templateData?: SortOrderInput | SortOrder
    htmlContent?: SortOrderInput | SortOrder
    emailProvider?: SortOrder
    providerEmailId?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    openedAt?: SortOrderInput | SortOrder
    clickedAt?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    errorCode?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    metadata?: SortOrderInput | SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailLogCountOrderByAggregateInput
    _avg?: EmailLogAvgOrderByAggregateInput
    _max?: EmailLogMaxOrderByAggregateInput
    _min?: EmailLogMinOrderByAggregateInput
    _sum?: EmailLogSumOrderByAggregateInput
  }

  export type EmailLogScalarWhereWithAggregatesInput = {
    AND?: EmailLogScalarWhereWithAggregatesInput | EmailLogScalarWhereWithAggregatesInput[]
    OR?: EmailLogScalarWhereWithAggregatesInput[]
    NOT?: EmailLogScalarWhereWithAggregatesInput | EmailLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailLog"> | string
    type?: EnumEmailTypeWithAggregatesFilter<"EmailLog"> | $Enums.EmailType
    status?: EnumEmailStatusWithAggregatesFilter<"EmailLog"> | $Enums.EmailStatus
    recipientEmail?: StringWithAggregatesFilter<"EmailLog"> | string
    recipientName?: StringNullableWithAggregatesFilter<"EmailLog"> | string | null
    userId?: StringNullableWithAggregatesFilter<"EmailLog"> | string | null
    subject?: StringWithAggregatesFilter<"EmailLog"> | string
    templateName?: StringWithAggregatesFilter<"EmailLog"> | string
    templateData?: JsonNullableWithAggregatesFilter<"EmailLog">
    htmlContent?: StringNullableWithAggregatesFilter<"EmailLog"> | string | null
    emailProvider?: StringWithAggregatesFilter<"EmailLog"> | string
    providerEmailId?: StringNullableWithAggregatesFilter<"EmailLog"> | string | null
    sentAt?: DateTimeNullableWithAggregatesFilter<"EmailLog"> | Date | string | null
    deliveredAt?: DateTimeNullableWithAggregatesFilter<"EmailLog"> | Date | string | null
    openedAt?: DateTimeNullableWithAggregatesFilter<"EmailLog"> | Date | string | null
    clickedAt?: DateTimeNullableWithAggregatesFilter<"EmailLog"> | Date | string | null
    errorMessage?: StringNullableWithAggregatesFilter<"EmailLog"> | string | null
    errorCode?: StringNullableWithAggregatesFilter<"EmailLog"> | string | null
    retryCount?: IntWithAggregatesFilter<"EmailLog"> | number
    maxRetries?: IntWithAggregatesFilter<"EmailLog"> | number
    metadata?: JsonNullableWithAggregatesFilter<"EmailLog">
    tags?: StringNullableListFilter<"EmailLog">
    createdAt?: DateTimeWithAggregatesFilter<"EmailLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailLog"> | Date | string
  }

  export type EmailTemplateWhereInput = {
    AND?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    OR?: EmailTemplateWhereInput[]
    NOT?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    id?: StringFilter<"EmailTemplate"> | string
    name?: StringFilter<"EmailTemplate"> | string
    displayName?: StringFilter<"EmailTemplate"> | string
    type?: EnumEmailTypeFilter<"EmailTemplate"> | $Enums.EmailType
    subject?: StringFilter<"EmailTemplate"> | string
    description?: StringNullableFilter<"EmailTemplate"> | string | null
    variables?: JsonFilter<"EmailTemplate">
    version?: IntFilter<"EmailTemplate"> | number
    isActive?: BoolFilter<"EmailTemplate"> | boolean
    usageCount?: IntFilter<"EmailTemplate"> | number
    lastUsedAt?: DateTimeNullableFilter<"EmailTemplate"> | Date | string | null
    createdAt?: DateTimeFilter<"EmailTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"EmailTemplate"> | Date | string
  }

  export type EmailTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    description?: SortOrderInput | SortOrder
    variables?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    OR?: EmailTemplateWhereInput[]
    NOT?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    displayName?: StringFilter<"EmailTemplate"> | string
    type?: EnumEmailTypeFilter<"EmailTemplate"> | $Enums.EmailType
    subject?: StringFilter<"EmailTemplate"> | string
    description?: StringNullableFilter<"EmailTemplate"> | string | null
    variables?: JsonFilter<"EmailTemplate">
    version?: IntFilter<"EmailTemplate"> | number
    isActive?: BoolFilter<"EmailTemplate"> | boolean
    usageCount?: IntFilter<"EmailTemplate"> | number
    lastUsedAt?: DateTimeNullableFilter<"EmailTemplate"> | Date | string | null
    createdAt?: DateTimeFilter<"EmailTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"EmailTemplate"> | Date | string
  }, "id" | "name">

  export type EmailTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    description?: SortOrderInput | SortOrder
    variables?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailTemplateCountOrderByAggregateInput
    _avg?: EmailTemplateAvgOrderByAggregateInput
    _max?: EmailTemplateMaxOrderByAggregateInput
    _min?: EmailTemplateMinOrderByAggregateInput
    _sum?: EmailTemplateSumOrderByAggregateInput
  }

  export type EmailTemplateScalarWhereWithAggregatesInput = {
    AND?: EmailTemplateScalarWhereWithAggregatesInput | EmailTemplateScalarWhereWithAggregatesInput[]
    OR?: EmailTemplateScalarWhereWithAggregatesInput[]
    NOT?: EmailTemplateScalarWhereWithAggregatesInput | EmailTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailTemplate"> | string
    name?: StringWithAggregatesFilter<"EmailTemplate"> | string
    displayName?: StringWithAggregatesFilter<"EmailTemplate"> | string
    type?: EnumEmailTypeWithAggregatesFilter<"EmailTemplate"> | $Enums.EmailType
    subject?: StringWithAggregatesFilter<"EmailTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"EmailTemplate"> | string | null
    variables?: JsonWithAggregatesFilter<"EmailTemplate">
    version?: IntWithAggregatesFilter<"EmailTemplate"> | number
    isActive?: BoolWithAggregatesFilter<"EmailTemplate"> | boolean
    usageCount?: IntWithAggregatesFilter<"EmailTemplate"> | number
    lastUsedAt?: DateTimeNullableWithAggregatesFilter<"EmailTemplate"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EmailTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailTemplate"> | Date | string
  }

  export type UserEmailPreferenceWhereInput = {
    AND?: UserEmailPreferenceWhereInput | UserEmailPreferenceWhereInput[]
    OR?: UserEmailPreferenceWhereInput[]
    NOT?: UserEmailPreferenceWhereInput | UserEmailPreferenceWhereInput[]
    id?: StringFilter<"UserEmailPreference"> | string
    userId?: StringFilter<"UserEmailPreference"> | string
    receiveSecurityAlerts?: BoolFilter<"UserEmailPreference"> | boolean
    receiveSystemNotify?: BoolFilter<"UserEmailPreference"> | boolean
    receiveWeeklyReport?: BoolFilter<"UserEmailPreference"> | boolean
    receiveFeatureNews?: BoolFilter<"UserEmailPreference"> | boolean
    receivePromotional?: BoolFilter<"UserEmailPreference"> | boolean
    weeklyReportDay?: IntFilter<"UserEmailPreference"> | number
    promotionalFrequency?: StringFilter<"UserEmailPreference"> | string
    globalUnsubscribe?: BoolFilter<"UserEmailPreference"> | boolean
    unsubscribeToken?: StringNullableFilter<"UserEmailPreference"> | string | null
    unsubscribedAt?: DateTimeNullableFilter<"UserEmailPreference"> | Date | string | null
    createdAt?: DateTimeFilter<"UserEmailPreference"> | Date | string
    updatedAt?: DateTimeFilter<"UserEmailPreference"> | Date | string
  }

  export type UserEmailPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    receiveSecurityAlerts?: SortOrder
    receiveSystemNotify?: SortOrder
    receiveWeeklyReport?: SortOrder
    receiveFeatureNews?: SortOrder
    receivePromotional?: SortOrder
    weeklyReportDay?: SortOrder
    promotionalFrequency?: SortOrder
    globalUnsubscribe?: SortOrder
    unsubscribeToken?: SortOrderInput | SortOrder
    unsubscribedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserEmailPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    unsubscribeToken?: string
    AND?: UserEmailPreferenceWhereInput | UserEmailPreferenceWhereInput[]
    OR?: UserEmailPreferenceWhereInput[]
    NOT?: UserEmailPreferenceWhereInput | UserEmailPreferenceWhereInput[]
    receiveSecurityAlerts?: BoolFilter<"UserEmailPreference"> | boolean
    receiveSystemNotify?: BoolFilter<"UserEmailPreference"> | boolean
    receiveWeeklyReport?: BoolFilter<"UserEmailPreference"> | boolean
    receiveFeatureNews?: BoolFilter<"UserEmailPreference"> | boolean
    receivePromotional?: BoolFilter<"UserEmailPreference"> | boolean
    weeklyReportDay?: IntFilter<"UserEmailPreference"> | number
    promotionalFrequency?: StringFilter<"UserEmailPreference"> | string
    globalUnsubscribe?: BoolFilter<"UserEmailPreference"> | boolean
    unsubscribedAt?: DateTimeNullableFilter<"UserEmailPreference"> | Date | string | null
    createdAt?: DateTimeFilter<"UserEmailPreference"> | Date | string
    updatedAt?: DateTimeFilter<"UserEmailPreference"> | Date | string
  }, "id" | "userId" | "unsubscribeToken">

  export type UserEmailPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    receiveSecurityAlerts?: SortOrder
    receiveSystemNotify?: SortOrder
    receiveWeeklyReport?: SortOrder
    receiveFeatureNews?: SortOrder
    receivePromotional?: SortOrder
    weeklyReportDay?: SortOrder
    promotionalFrequency?: SortOrder
    globalUnsubscribe?: SortOrder
    unsubscribeToken?: SortOrderInput | SortOrder
    unsubscribedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserEmailPreferenceCountOrderByAggregateInput
    _avg?: UserEmailPreferenceAvgOrderByAggregateInput
    _max?: UserEmailPreferenceMaxOrderByAggregateInput
    _min?: UserEmailPreferenceMinOrderByAggregateInput
    _sum?: UserEmailPreferenceSumOrderByAggregateInput
  }

  export type UserEmailPreferenceScalarWhereWithAggregatesInput = {
    AND?: UserEmailPreferenceScalarWhereWithAggregatesInput | UserEmailPreferenceScalarWhereWithAggregatesInput[]
    OR?: UserEmailPreferenceScalarWhereWithAggregatesInput[]
    NOT?: UserEmailPreferenceScalarWhereWithAggregatesInput | UserEmailPreferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserEmailPreference"> | string
    userId?: StringWithAggregatesFilter<"UserEmailPreference"> | string
    receiveSecurityAlerts?: BoolWithAggregatesFilter<"UserEmailPreference"> | boolean
    receiveSystemNotify?: BoolWithAggregatesFilter<"UserEmailPreference"> | boolean
    receiveWeeklyReport?: BoolWithAggregatesFilter<"UserEmailPreference"> | boolean
    receiveFeatureNews?: BoolWithAggregatesFilter<"UserEmailPreference"> | boolean
    receivePromotional?: BoolWithAggregatesFilter<"UserEmailPreference"> | boolean
    weeklyReportDay?: IntWithAggregatesFilter<"UserEmailPreference"> | number
    promotionalFrequency?: StringWithAggregatesFilter<"UserEmailPreference"> | string
    globalUnsubscribe?: BoolWithAggregatesFilter<"UserEmailPreference"> | boolean
    unsubscribeToken?: StringNullableWithAggregatesFilter<"UserEmailPreference"> | string | null
    unsubscribedAt?: DateTimeNullableWithAggregatesFilter<"UserEmailPreference"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserEmailPreference"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserEmailPreference"> | Date | string
  }

  export type EmailStatsWhereInput = {
    AND?: EmailStatsWhereInput | EmailStatsWhereInput[]
    OR?: EmailStatsWhereInput[]
    NOT?: EmailStatsWhereInput | EmailStatsWhereInput[]
    id?: StringFilter<"EmailStats"> | string
    date?: DateTimeFilter<"EmailStats"> | Date | string
    totalSent?: IntFilter<"EmailStats"> | number
    totalDelivered?: IntFilter<"EmailStats"> | number
    totalFailed?: IntFilter<"EmailStats"> | number
    totalBounced?: IntFilter<"EmailStats"> | number
    totalOpened?: IntFilter<"EmailStats"> | number
    totalClicked?: IntFilter<"EmailStats"> | number
    totalUnsubscribed?: IntFilter<"EmailStats"> | number
    totalComplaints?: IntFilter<"EmailStats"> | number
    verificationEmails?: IntFilter<"EmailStats"> | number
    notificationEmails?: IntFilter<"EmailStats"> | number
    marketingEmails?: IntFilter<"EmailStats"> | number
    openRate?: FloatNullableFilter<"EmailStats"> | number | null
    clickRate?: FloatNullableFilter<"EmailStats"> | number | null
    deliveryRate?: FloatNullableFilter<"EmailStats"> | number | null
    createdAt?: DateTimeFilter<"EmailStats"> | Date | string
    updatedAt?: DateTimeFilter<"EmailStats"> | Date | string
  }

  export type EmailStatsOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    totalSent?: SortOrder
    totalDelivered?: SortOrder
    totalFailed?: SortOrder
    totalBounced?: SortOrder
    totalOpened?: SortOrder
    totalClicked?: SortOrder
    totalUnsubscribed?: SortOrder
    totalComplaints?: SortOrder
    verificationEmails?: SortOrder
    notificationEmails?: SortOrder
    marketingEmails?: SortOrder
    openRate?: SortOrderInput | SortOrder
    clickRate?: SortOrderInput | SortOrder
    deliveryRate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    date?: Date | string
    AND?: EmailStatsWhereInput | EmailStatsWhereInput[]
    OR?: EmailStatsWhereInput[]
    NOT?: EmailStatsWhereInput | EmailStatsWhereInput[]
    totalSent?: IntFilter<"EmailStats"> | number
    totalDelivered?: IntFilter<"EmailStats"> | number
    totalFailed?: IntFilter<"EmailStats"> | number
    totalBounced?: IntFilter<"EmailStats"> | number
    totalOpened?: IntFilter<"EmailStats"> | number
    totalClicked?: IntFilter<"EmailStats"> | number
    totalUnsubscribed?: IntFilter<"EmailStats"> | number
    totalComplaints?: IntFilter<"EmailStats"> | number
    verificationEmails?: IntFilter<"EmailStats"> | number
    notificationEmails?: IntFilter<"EmailStats"> | number
    marketingEmails?: IntFilter<"EmailStats"> | number
    openRate?: FloatNullableFilter<"EmailStats"> | number | null
    clickRate?: FloatNullableFilter<"EmailStats"> | number | null
    deliveryRate?: FloatNullableFilter<"EmailStats"> | number | null
    createdAt?: DateTimeFilter<"EmailStats"> | Date | string
    updatedAt?: DateTimeFilter<"EmailStats"> | Date | string
  }, "id" | "date">

  export type EmailStatsOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    totalSent?: SortOrder
    totalDelivered?: SortOrder
    totalFailed?: SortOrder
    totalBounced?: SortOrder
    totalOpened?: SortOrder
    totalClicked?: SortOrder
    totalUnsubscribed?: SortOrder
    totalComplaints?: SortOrder
    verificationEmails?: SortOrder
    notificationEmails?: SortOrder
    marketingEmails?: SortOrder
    openRate?: SortOrderInput | SortOrder
    clickRate?: SortOrderInput | SortOrder
    deliveryRate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailStatsCountOrderByAggregateInput
    _avg?: EmailStatsAvgOrderByAggregateInput
    _max?: EmailStatsMaxOrderByAggregateInput
    _min?: EmailStatsMinOrderByAggregateInput
    _sum?: EmailStatsSumOrderByAggregateInput
  }

  export type EmailStatsScalarWhereWithAggregatesInput = {
    AND?: EmailStatsScalarWhereWithAggregatesInput | EmailStatsScalarWhereWithAggregatesInput[]
    OR?: EmailStatsScalarWhereWithAggregatesInput[]
    NOT?: EmailStatsScalarWhereWithAggregatesInput | EmailStatsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailStats"> | string
    date?: DateTimeWithAggregatesFilter<"EmailStats"> | Date | string
    totalSent?: IntWithAggregatesFilter<"EmailStats"> | number
    totalDelivered?: IntWithAggregatesFilter<"EmailStats"> | number
    totalFailed?: IntWithAggregatesFilter<"EmailStats"> | number
    totalBounced?: IntWithAggregatesFilter<"EmailStats"> | number
    totalOpened?: IntWithAggregatesFilter<"EmailStats"> | number
    totalClicked?: IntWithAggregatesFilter<"EmailStats"> | number
    totalUnsubscribed?: IntWithAggregatesFilter<"EmailStats"> | number
    totalComplaints?: IntWithAggregatesFilter<"EmailStats"> | number
    verificationEmails?: IntWithAggregatesFilter<"EmailStats"> | number
    notificationEmails?: IntWithAggregatesFilter<"EmailStats"> | number
    marketingEmails?: IntWithAggregatesFilter<"EmailStats"> | number
    openRate?: FloatNullableWithAggregatesFilter<"EmailStats"> | number | null
    clickRate?: FloatNullableWithAggregatesFilter<"EmailStats"> | number | null
    deliveryRate?: FloatNullableWithAggregatesFilter<"EmailStats"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"EmailStats"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailStats"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordUncheckedCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemUncheckedCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressUncheckedCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionUncheckedCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaUncheckedCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingUncheckedCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionUncheckedCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUncheckedUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUncheckedUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUncheckedUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUncheckedUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUncheckedUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUncheckedUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUncheckedUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionCreateInput = {
    id?: string
    type: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    source: $Enums.QuestionSource
    status?: $Enums.QuestionStatus
    content: JsonNullValueInput | InputJsonValue
    correctAnswer: string
    explanation?: string | null
    audioUrl?: string | null
    audioScript?: string | null
    qualityScore?: number
    difficultyScore?: number | null
    averageTime?: number | null
    successRate?: number | null
    usageCount?: number
    ratingCount?: number
    lastUsedAt?: Date | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedQuestionsInput
    practiceAnswers?: PracticeAnswerCreateNestedManyWithoutQuestionInput
    ratings?: QuestionRatingCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: string
    type: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    source: $Enums.QuestionSource
    status?: $Enums.QuestionStatus
    content: JsonNullValueInput | InputJsonValue
    correctAnswer: string
    explanation?: string | null
    audioUrl?: string | null
    audioScript?: string | null
    qualityScore?: number
    difficultyScore?: number | null
    averageTime?: number | null
    successRate?: number | null
    usageCount?: number
    ratingCount?: number
    lastUsedAt?: Date | string | null
    createdBy?: string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    practiceAnswers?: PracticeAnswerUncheckedCreateNestedManyWithoutQuestionInput
    ratings?: QuestionRatingUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    source?: EnumQuestionSourceFieldUpdateOperationsInput | $Enums.QuestionSource
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    content?: JsonNullValueInput | InputJsonValue
    correctAnswer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioScript?: NullableStringFieldUpdateOperationsInput | string | null
    qualityScore?: FloatFieldUpdateOperationsInput | number
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    averageTime?: NullableIntFieldUpdateOperationsInput | number | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedQuestionsNestedInput
    practiceAnswers?: PracticeAnswerUpdateManyWithoutQuestionNestedInput
    ratings?: QuestionRatingUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    source?: EnumQuestionSourceFieldUpdateOperationsInput | $Enums.QuestionSource
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    content?: JsonNullValueInput | InputJsonValue
    correctAnswer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioScript?: NullableStringFieldUpdateOperationsInput | string | null
    qualityScore?: FloatFieldUpdateOperationsInput | number
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    averageTime?: NullableIntFieldUpdateOperationsInput | number | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practiceAnswers?: PracticeAnswerUncheckedUpdateManyWithoutQuestionNestedInput
    ratings?: QuestionRatingUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionCreateManyInput = {
    id?: string
    type: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    source: $Enums.QuestionSource
    status?: $Enums.QuestionStatus
    content: JsonNullValueInput | InputJsonValue
    correctAnswer: string
    explanation?: string | null
    audioUrl?: string | null
    audioScript?: string | null
    qualityScore?: number
    difficultyScore?: number | null
    averageTime?: number | null
    successRate?: number | null
    usageCount?: number
    ratingCount?: number
    lastUsedAt?: Date | string | null
    createdBy?: string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    source?: EnumQuestionSourceFieldUpdateOperationsInput | $Enums.QuestionSource
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    content?: JsonNullValueInput | InputJsonValue
    correctAnswer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioScript?: NullableStringFieldUpdateOperationsInput | string | null
    qualityScore?: FloatFieldUpdateOperationsInput | number
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    averageTime?: NullableIntFieldUpdateOperationsInput | number | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    source?: EnumQuestionSourceFieldUpdateOperationsInput | $Enums.QuestionSource
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    content?: JsonNullValueInput | InputJsonValue
    correctAnswer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioScript?: NullableStringFieldUpdateOperationsInput | string | null
    qualityScore?: FloatFieldUpdateOperationsInput | number
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    averageTime?: NullableIntFieldUpdateOperationsInput | number | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeAnswerCreateInput = {
    id?: string
    userId: string
    userAnswer: string
    isCorrect: boolean
    timeSpent: number
    createdAt?: Date | string
    question: QuestionCreateNestedOneWithoutPracticeAnswersInput
    practiceRecord: PracticeRecordCreateNestedOneWithoutPracticeAnswersInput
  }

  export type PracticeAnswerUncheckedCreateInput = {
    id?: string
    userId: string
    questionId: string
    userAnswer: string
    isCorrect: boolean
    timeSpent: number
    practiceRecordId: string
    createdAt?: Date | string
  }

  export type PracticeAnswerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userAnswer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutPracticeAnswersNestedInput
    practiceRecord?: PracticeRecordUpdateOneRequiredWithoutPracticeAnswersNestedInput
  }

  export type PracticeAnswerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    userAnswer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    practiceRecordId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeAnswerCreateManyInput = {
    id?: string
    userId: string
    questionId: string
    userAnswer: string
    isCorrect: boolean
    timeSpent: number
    practiceRecordId: string
    createdAt?: Date | string
  }

  export type PracticeAnswerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userAnswer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeAnswerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    userAnswer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    practiceRecordId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionRatingCreateInput = {
    id?: string
    rating: number
    comment?: string | null
    clarity?: number | null
    difficulty?: number | null
    quality?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutQuestionRatingsInput
    question: QuestionCreateNestedOneWithoutRatingsInput
  }

  export type QuestionRatingUncheckedCreateInput = {
    id?: string
    userId: string
    questionId: string
    rating: number
    comment?: string | null
    clarity?: number | null
    difficulty?: number | null
    quality?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionRatingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    clarity?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    quality?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutQuestionRatingsNestedInput
    question?: QuestionUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type QuestionRatingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    clarity?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    quality?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionRatingCreateManyInput = {
    id?: string
    userId: string
    questionId: string
    rating: number
    comment?: string | null
    clarity?: number | null
    difficulty?: number | null
    quality?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionRatingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    clarity?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    quality?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionRatingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    clarity?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    quality?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeRecordCreateInput = {
    id?: string
    sessionId: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    questionsCount: number
    correctAnswers: number
    totalTime: number
    score?: number | null
    realQuestions?: number
    aiPoolQuestions?: number
    realtimeQuestions?: number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string
    user: UserCreateNestedOneWithoutPracticeRecordsInput
    practiceAnswers?: PracticeAnswerCreateNestedManyWithoutPracticeRecordInput
  }

  export type PracticeRecordUncheckedCreateInput = {
    id?: string
    userId: string
    sessionId: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    questionsCount: number
    correctAnswers: number
    totalTime: number
    score?: number | null
    realQuestions?: number
    aiPoolQuestions?: number
    realtimeQuestions?: number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string
    practiceAnswers?: PracticeAnswerUncheckedCreateNestedManyWithoutPracticeRecordInput
  }

  export type PracticeRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    questionsCount?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    totalTime?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    realQuestions?: IntFieldUpdateOperationsInput | number
    aiPoolQuestions?: IntFieldUpdateOperationsInput | number
    realtimeQuestions?: IntFieldUpdateOperationsInput | number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPracticeRecordsNestedInput
    practiceAnswers?: PracticeAnswerUpdateManyWithoutPracticeRecordNestedInput
  }

  export type PracticeRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    questionsCount?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    totalTime?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    realQuestions?: IntFieldUpdateOperationsInput | number
    aiPoolQuestions?: IntFieldUpdateOperationsInput | number
    realtimeQuestions?: IntFieldUpdateOperationsInput | number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practiceAnswers?: PracticeAnswerUncheckedUpdateManyWithoutPracticeRecordNestedInput
  }

  export type PracticeRecordCreateManyInput = {
    id?: string
    userId: string
    sessionId: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    questionsCount: number
    correctAnswers: number
    totalTime: number
    score?: number | null
    realQuestions?: number
    aiPoolQuestions?: number
    realtimeQuestions?: number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string
  }

  export type PracticeRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    questionsCount?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    totalTime?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    realQuestions?: IntFieldUpdateOperationsInput | number
    aiPoolQuestions?: IntFieldUpdateOperationsInput | number
    realtimeQuestions?: IntFieldUpdateOperationsInput | number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    questionsCount?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    totalTime?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    realQuestions?: IntFieldUpdateOperationsInput | number
    aiPoolQuestions?: IntFieldUpdateOperationsInput | number
    realtimeQuestions?: IntFieldUpdateOperationsInput | number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionCreateInput = {
    id?: string
    title?: string | null
    questionId?: string | null
    questionData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutChatSessionsInput
    messages?: ChatMessageCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionUncheckedCreateInput = {
    id?: string
    userId: string
    title?: string | null
    questionId?: string | null
    questionData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    questionId?: NullableStringFieldUpdateOperationsInput | string | null
    questionData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatSessionsNestedInput
    messages?: ChatMessageUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    questionId?: NullableStringFieldUpdateOperationsInput | string | null
    questionData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionCreateManyInput = {
    id?: string
    userId: string
    title?: string | null
    questionId?: string | null
    questionData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    questionId?: NullableStringFieldUpdateOperationsInput | string | null
    questionData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    questionId?: NullableStringFieldUpdateOperationsInput | string | null
    questionData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateInput = {
    id?: string
    role: string
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    session: ChatSessionCreateNestedOneWithoutMessagesInput
  }

  export type ChatMessageUncheckedCreateInput = {
    id?: string
    sessionId: string
    role: string
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ChatMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: ChatSessionUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateManyInput = {
    id?: string
    sessionId: string
    role: string
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ChatMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VocabularyItemCreateInput = {
    id?: string
    word: string
    definition?: string | null
    phonetic?: string | null
    audioUrl?: string | null
    context?: string | null
    meanings?: NullableJsonNullValueInput | InputJsonValue
    language?: string
    reading?: string | null
    jlpt?: VocabularyItemCreatejlptInput | string[]
    commonality?: boolean | null
    sourceType?: string | null
    sourceId?: string | null
    notes?: string | null
    mastered?: boolean
    tags?: VocabularyItemCreatetagsInput | string[]
    definitionLoading?: boolean
    definitionError?: boolean
    nextReviewDate?: Date | string
    reviewCount?: number
    correctCount?: number
    incorrectCount?: number
    easeFactor?: number
    interval?: number
    addedAt?: Date | string
    lastReviewedAt?: Date | string | null
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutVocabularyItemsInput
  }

  export type VocabularyItemUncheckedCreateInput = {
    id?: string
    userId: string
    word: string
    definition?: string | null
    phonetic?: string | null
    audioUrl?: string | null
    context?: string | null
    meanings?: NullableJsonNullValueInput | InputJsonValue
    language?: string
    reading?: string | null
    jlpt?: VocabularyItemCreatejlptInput | string[]
    commonality?: boolean | null
    sourceType?: string | null
    sourceId?: string | null
    notes?: string | null
    mastered?: boolean
    tags?: VocabularyItemCreatetagsInput | string[]
    definitionLoading?: boolean
    definitionError?: boolean
    nextReviewDate?: Date | string
    reviewCount?: number
    correctCount?: number
    incorrectCount?: number
    easeFactor?: number
    interval?: number
    addedAt?: Date | string
    lastReviewedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type VocabularyItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    phonetic?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    meanings?: NullableJsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    reading?: NullableStringFieldUpdateOperationsInput | string | null
    jlpt?: VocabularyItemUpdatejlptInput | string[]
    commonality?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sourceType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mastered?: BoolFieldUpdateOperationsInput | boolean
    tags?: VocabularyItemUpdatetagsInput | string[]
    definitionLoading?: BoolFieldUpdateOperationsInput | boolean
    definitionError?: BoolFieldUpdateOperationsInput | boolean
    nextReviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewCount?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    incorrectCount?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVocabularyItemsNestedInput
  }

  export type VocabularyItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    phonetic?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    meanings?: NullableJsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    reading?: NullableStringFieldUpdateOperationsInput | string | null
    jlpt?: VocabularyItemUpdatejlptInput | string[]
    commonality?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sourceType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mastered?: BoolFieldUpdateOperationsInput | boolean
    tags?: VocabularyItemUpdatetagsInput | string[]
    definitionLoading?: BoolFieldUpdateOperationsInput | boolean
    definitionError?: BoolFieldUpdateOperationsInput | boolean
    nextReviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewCount?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    incorrectCount?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VocabularyItemCreateManyInput = {
    id?: string
    userId: string
    word: string
    definition?: string | null
    phonetic?: string | null
    audioUrl?: string | null
    context?: string | null
    meanings?: NullableJsonNullValueInput | InputJsonValue
    language?: string
    reading?: string | null
    jlpt?: VocabularyItemCreatejlptInput | string[]
    commonality?: boolean | null
    sourceType?: string | null
    sourceId?: string | null
    notes?: string | null
    mastered?: boolean
    tags?: VocabularyItemCreatetagsInput | string[]
    definitionLoading?: boolean
    definitionError?: boolean
    nextReviewDate?: Date | string
    reviewCount?: number
    correctCount?: number
    incorrectCount?: number
    easeFactor?: number
    interval?: number
    addedAt?: Date | string
    lastReviewedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type VocabularyItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    phonetic?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    meanings?: NullableJsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    reading?: NullableStringFieldUpdateOperationsInput | string | null
    jlpt?: VocabularyItemUpdatejlptInput | string[]
    commonality?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sourceType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mastered?: BoolFieldUpdateOperationsInput | boolean
    tags?: VocabularyItemUpdatetagsInput | string[]
    definitionLoading?: BoolFieldUpdateOperationsInput | boolean
    definitionError?: BoolFieldUpdateOperationsInput | boolean
    nextReviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewCount?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    incorrectCount?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VocabularyItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    phonetic?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    meanings?: NullableJsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    reading?: NullableStringFieldUpdateOperationsInput | string | null
    jlpt?: VocabularyItemUpdatejlptInput | string[]
    commonality?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sourceType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mastered?: BoolFieldUpdateOperationsInput | boolean
    tags?: VocabularyItemUpdatetagsInput | string[]
    definitionLoading?: BoolFieldUpdateOperationsInput | boolean
    definitionError?: BoolFieldUpdateOperationsInput | boolean
    nextReviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewCount?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    incorrectCount?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudyProgressCreateInput = {
    id?: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    totalQuestions?: number
    correctAnswers?: number
    averageTime?: number
    bestScore?: number | null
    lastPracticeAt?: Date | string | null
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudyProgressInput
  }

  export type StudyProgressUncheckedCreateInput = {
    id?: string
    userId: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    totalQuestions?: number
    correctAnswers?: number
    averageTime?: number
    bestScore?: number | null
    lastPracticeAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type StudyProgressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    averageTime?: FloatFieldUpdateOperationsInput | number
    bestScore?: NullableIntFieldUpdateOperationsInput | number | null
    lastPracticeAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudyProgressNestedInput
  }

  export type StudyProgressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    averageTime?: FloatFieldUpdateOperationsInput | number
    bestScore?: NullableIntFieldUpdateOperationsInput | number | null
    lastPracticeAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudyProgressCreateManyInput = {
    id?: string
    userId: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    totalQuestions?: number
    correctAnswers?: number
    averageTime?: number
    bestScore?: number | null
    lastPracticeAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type StudyProgressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    averageTime?: FloatFieldUpdateOperationsInput | number
    bestScore?: NullableIntFieldUpdateOperationsInput | number | null
    lastPracticeAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudyProgressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    averageTime?: FloatFieldUpdateOperationsInput | number
    bestScore?: NullableIntFieldUpdateOperationsInput | number | null
    lastPracticeAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPlanCreateInput = {
    id?: string
    name: string
    nameJp?: string | null
    priceCents: number
    currency?: string
    interval: string
    intervalCount?: number
    stripePriceId?: string | null
    stripeProductId?: string | null
    features: JsonNullValueInput | InputJsonValue
    dailyPracticeLimit?: number | null
    dailyAiChatLimit?: number | null
    maxVocabularyWords?: number | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptions?: UserSubscriptionCreateNestedManyWithoutPlanInput
  }

  export type SubscriptionPlanUncheckedCreateInput = {
    id?: string
    name: string
    nameJp?: string | null
    priceCents: number
    currency?: string
    interval: string
    intervalCount?: number
    stripePriceId?: string | null
    stripeProductId?: string | null
    features: JsonNullValueInput | InputJsonValue
    dailyPracticeLimit?: number | null
    dailyAiChatLimit?: number | null
    maxVocabularyWords?: number | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptions?: UserSubscriptionUncheckedCreateNestedManyWithoutPlanInput
  }

  export type SubscriptionPlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameJp?: NullableStringFieldUpdateOperationsInput | string | null
    priceCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    interval?: StringFieldUpdateOperationsInput | string
    intervalCount?: IntFieldUpdateOperationsInput | number
    stripePriceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeProductId?: NullableStringFieldUpdateOperationsInput | string | null
    features?: JsonNullValueInput | InputJsonValue
    dailyPracticeLimit?: NullableIntFieldUpdateOperationsInput | number | null
    dailyAiChatLimit?: NullableIntFieldUpdateOperationsInput | number | null
    maxVocabularyWords?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptions?: UserSubscriptionUpdateManyWithoutPlanNestedInput
  }

  export type SubscriptionPlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameJp?: NullableStringFieldUpdateOperationsInput | string | null
    priceCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    interval?: StringFieldUpdateOperationsInput | string
    intervalCount?: IntFieldUpdateOperationsInput | number
    stripePriceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeProductId?: NullableStringFieldUpdateOperationsInput | string | null
    features?: JsonNullValueInput | InputJsonValue
    dailyPracticeLimit?: NullableIntFieldUpdateOperationsInput | number | null
    dailyAiChatLimit?: NullableIntFieldUpdateOperationsInput | number | null
    maxVocabularyWords?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptions?: UserSubscriptionUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type SubscriptionPlanCreateManyInput = {
    id?: string
    name: string
    nameJp?: string | null
    priceCents: number
    currency?: string
    interval: string
    intervalCount?: number
    stripePriceId?: string | null
    stripeProductId?: string | null
    features: JsonNullValueInput | InputJsonValue
    dailyPracticeLimit?: number | null
    dailyAiChatLimit?: number | null
    maxVocabularyWords?: number | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionPlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameJp?: NullableStringFieldUpdateOperationsInput | string | null
    priceCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    interval?: StringFieldUpdateOperationsInput | string
    intervalCount?: IntFieldUpdateOperationsInput | number
    stripePriceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeProductId?: NullableStringFieldUpdateOperationsInput | string | null
    features?: JsonNullValueInput | InputJsonValue
    dailyPracticeLimit?: NullableIntFieldUpdateOperationsInput | number | null
    dailyAiChatLimit?: NullableIntFieldUpdateOperationsInput | number | null
    maxVocabularyWords?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameJp?: NullableStringFieldUpdateOperationsInput | string | null
    priceCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    interval?: StringFieldUpdateOperationsInput | string
    intervalCount?: IntFieldUpdateOperationsInput | number
    stripePriceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeProductId?: NullableStringFieldUpdateOperationsInput | string | null
    features?: JsonNullValueInput | InputJsonValue
    dailyPracticeLimit?: NullableIntFieldUpdateOperationsInput | number | null
    dailyAiChatLimit?: NullableIntFieldUpdateOperationsInput | number | null
    maxVocabularyWords?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSubscriptionCreateInput = {
    id?: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSessionId?: string | null
    status: string
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    canceledAt?: Date | string | null
    lastPaymentAt?: Date | string | null
    nextPaymentAt?: Date | string | null
    isTestAccount?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubscriptionInput
    plan: SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutSubscriptionInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutSubscriptionInput
  }

  export type UserSubscriptionUncheckedCreateInput = {
    id?: string
    userId: string
    planId: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSessionId?: string | null
    status: string
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    canceledAt?: Date | string | null
    lastPaymentAt?: Date | string | null
    nextPaymentAt?: Date | string | null
    isTestAccount?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutSubscriptionInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type UserSubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isTestAccount?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscriptionNestedInput
    plan?: SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutSubscriptionNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutSubscriptionNestedInput
  }

  export type UserSubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isTestAccount?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutSubscriptionNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type UserSubscriptionCreateManyInput = {
    id?: string
    userId: string
    planId: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSessionId?: string | null
    status: string
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    canceledAt?: Date | string | null
    lastPaymentAt?: Date | string | null
    nextPaymentAt?: Date | string | null
    isTestAccount?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isTestAccount?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isTestAccount?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageQuotaCreateInput = {
    id?: string
    resourceType: string
    usedCount?: number
    limitCount?: number | null
    periodStart?: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUsageQuotasInput
  }

  export type UsageQuotaUncheckedCreateInput = {
    id?: string
    userId: string
    resourceType: string
    usedCount?: number
    limitCount?: number | null
    periodStart?: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsageQuotaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: StringFieldUpdateOperationsInput | string
    usedCount?: IntFieldUpdateOperationsInput | number
    limitCount?: NullableIntFieldUpdateOperationsInput | number | null
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUsageQuotasNestedInput
  }

  export type UsageQuotaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    resourceType?: StringFieldUpdateOperationsInput | string
    usedCount?: IntFieldUpdateOperationsInput | number
    limitCount?: NullableIntFieldUpdateOperationsInput | number | null
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageQuotaCreateManyInput = {
    id?: string
    userId: string
    resourceType: string
    usedCount?: number
    limitCount?: number | null
    periodStart?: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsageQuotaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: StringFieldUpdateOperationsInput | string
    usedCount?: IntFieldUpdateOperationsInput | number
    limitCount?: NullableIntFieldUpdateOperationsInput | number | null
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageQuotaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    resourceType?: StringFieldUpdateOperationsInput | string
    usedCount?: IntFieldUpdateOperationsInput | number
    limitCount?: NullableIntFieldUpdateOperationsInput | number | null
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionCreateInput = {
    id?: string
    stripeSessionId?: string | null
    stripePaymentId?: string | null
    amount: number
    currency?: string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPaymentTransactionsInput
    subscription?: UserSubscriptionCreateNestedOneWithoutPaymentTransactionsInput
  }

  export type PaymentTransactionUncheckedCreateInput = {
    id?: string
    userId: string
    stripeSessionId?: string | null
    stripePaymentId?: string | null
    amount: number
    currency?: string
    status: string
    subscriptionId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPaymentTransactionsNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutPaymentTransactionsNestedInput
  }

  export type PaymentTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionCreateManyInput = {
    id?: string
    userId: string
    stripeSessionId?: string | null
    stripePaymentId?: string | null
    amount: number
    currency?: string
    status: string
    subscriptionId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type APIUsageCreateInput = {
    id?: string
    userId?: string | null
    endpoint: string
    method: string
    statusCode: number
    responseTime: number
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type APIUsageUncheckedCreateInput = {
    id?: string
    userId?: string | null
    endpoint: string
    method: string
    statusCode: number
    responseTime: number
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type APIUsageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type APIUsageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type APIUsageCreateManyInput = {
    id?: string
    userId?: string | null
    endpoint: string
    method: string
    statusCode: number
    responseTime: number
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type APIUsageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type APIUsageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenBlacklistCreateInput = {
    id?: string
    userId: string
    tokenId: string
    reason: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type TokenBlacklistUncheckedCreateInput = {
    id?: string
    userId: string
    tokenId: string
    reason: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type TokenBlacklistUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tokenId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenBlacklistUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tokenId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenBlacklistCreateManyInput = {
    id?: string
    userId: string
    tokenId: string
    reason: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type TokenBlacklistUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tokenId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenBlacklistUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tokenId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminSubscriptionLogCreateInput = {
    id?: string
    operationType: string
    oldStatus?: string | null
    newStatus?: string | null
    oldTestAccount?: boolean | null
    newTestAccount?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    createdAt?: Date | string
    adminUser: UserCreateNestedOneWithoutAdminSubscriptionLogsInput
    targetUser: UserCreateNestedOneWithoutTargetAdminLogsInput
    subscription?: UserSubscriptionCreateNestedOneWithoutAdminSubscriptionLogsInput
  }

  export type AdminSubscriptionLogUncheckedCreateInput = {
    id?: string
    adminUserId: string
    targetUserId: string
    subscriptionId?: string | null
    operationType: string
    oldStatus?: string | null
    newStatus?: string | null
    oldTestAccount?: boolean | null
    newTestAccount?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    createdAt?: Date | string
  }

  export type AdminSubscriptionLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    operationType?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    oldTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminUser?: UserUpdateOneRequiredWithoutAdminSubscriptionLogsNestedInput
    targetUser?: UserUpdateOneRequiredWithoutTargetAdminLogsNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutAdminSubscriptionLogsNestedInput
  }

  export type AdminSubscriptionLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminUserId?: StringFieldUpdateOperationsInput | string
    targetUserId?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    oldTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminSubscriptionLogCreateManyInput = {
    id?: string
    adminUserId: string
    targetUserId: string
    subscriptionId?: string | null
    operationType: string
    oldStatus?: string | null
    newStatus?: string | null
    oldTestAccount?: boolean | null
    newTestAccount?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    createdAt?: Date | string
  }

  export type AdminSubscriptionLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    operationType?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    oldTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminSubscriptionLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminUserId?: StringFieldUpdateOperationsInput | string
    targetUserId?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    oldTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogCreateInput = {
    id?: string
    type: $Enums.EmailType
    status?: $Enums.EmailStatus
    recipientEmail: string
    recipientName?: string | null
    userId?: string | null
    subject: string
    templateName: string
    templateData?: NullableJsonNullValueInput | InputJsonValue
    htmlContent?: string | null
    emailProvider?: string
    providerEmailId?: string | null
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    openedAt?: Date | string | null
    clickedAt?: Date | string | null
    errorMessage?: string | null
    errorCode?: string | null
    retryCount?: number
    maxRetries?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: EmailLogCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailLogUncheckedCreateInput = {
    id?: string
    type: $Enums.EmailType
    status?: $Enums.EmailStatus
    recipientEmail: string
    recipientName?: string | null
    userId?: string | null
    subject: string
    templateName: string
    templateData?: NullableJsonNullValueInput | InputJsonValue
    htmlContent?: string | null
    emailProvider?: string
    providerEmailId?: string | null
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    openedAt?: Date | string | null
    clickedAt?: Date | string | null
    errorMessage?: string | null
    errorCode?: string | null
    retryCount?: number
    maxRetries?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: EmailLogCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientName?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    templateName?: StringFieldUpdateOperationsInput | string
    templateData?: NullableJsonNullValueInput | InputJsonValue
    htmlContent?: NullableStringFieldUpdateOperationsInput | string | null
    emailProvider?: StringFieldUpdateOperationsInput | string
    providerEmailId?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    errorCode?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: EmailLogUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientName?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    templateName?: StringFieldUpdateOperationsInput | string
    templateData?: NullableJsonNullValueInput | InputJsonValue
    htmlContent?: NullableStringFieldUpdateOperationsInput | string | null
    emailProvider?: StringFieldUpdateOperationsInput | string
    providerEmailId?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    errorCode?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: EmailLogUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogCreateManyInput = {
    id?: string
    type: $Enums.EmailType
    status?: $Enums.EmailStatus
    recipientEmail: string
    recipientName?: string | null
    userId?: string | null
    subject: string
    templateName: string
    templateData?: NullableJsonNullValueInput | InputJsonValue
    htmlContent?: string | null
    emailProvider?: string
    providerEmailId?: string | null
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    openedAt?: Date | string | null
    clickedAt?: Date | string | null
    errorMessage?: string | null
    errorCode?: string | null
    retryCount?: number
    maxRetries?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: EmailLogCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientName?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    templateName?: StringFieldUpdateOperationsInput | string
    templateData?: NullableJsonNullValueInput | InputJsonValue
    htmlContent?: NullableStringFieldUpdateOperationsInput | string | null
    emailProvider?: StringFieldUpdateOperationsInput | string
    providerEmailId?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    errorCode?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: EmailLogUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientName?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    templateName?: StringFieldUpdateOperationsInput | string
    templateData?: NullableJsonNullValueInput | InputJsonValue
    htmlContent?: NullableStringFieldUpdateOperationsInput | string | null
    emailProvider?: StringFieldUpdateOperationsInput | string
    providerEmailId?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    errorCode?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: EmailLogUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateCreateInput = {
    id?: string
    name: string
    displayName: string
    type: $Enums.EmailType
    subject: string
    description?: string | null
    variables: JsonNullValueInput | InputJsonValue
    version?: number
    isActive?: boolean
    usageCount?: number
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateUncheckedCreateInput = {
    id?: string
    name: string
    displayName: string
    type: $Enums.EmailType
    subject: string
    description?: string | null
    variables: JsonNullValueInput | InputJsonValue
    version?: number
    isActive?: boolean
    usageCount?: number
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateCreateManyInput = {
    id?: string
    name: string
    displayName: string
    type: $Enums.EmailType
    subject: string
    description?: string | null
    variables: JsonNullValueInput | InputJsonValue
    version?: number
    isActive?: boolean
    usageCount?: number
    lastUsedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
    subject?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    variables?: JsonNullValueInput | InputJsonValue
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserEmailPreferenceCreateInput = {
    id?: string
    userId: string
    receiveSecurityAlerts?: boolean
    receiveSystemNotify?: boolean
    receiveWeeklyReport?: boolean
    receiveFeatureNews?: boolean
    receivePromotional?: boolean
    weeklyReportDay?: number
    promotionalFrequency?: string
    globalUnsubscribe?: boolean
    unsubscribeToken?: string | null
    unsubscribedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserEmailPreferenceUncheckedCreateInput = {
    id?: string
    userId: string
    receiveSecurityAlerts?: boolean
    receiveSystemNotify?: boolean
    receiveWeeklyReport?: boolean
    receiveFeatureNews?: boolean
    receivePromotional?: boolean
    weeklyReportDay?: number
    promotionalFrequency?: string
    globalUnsubscribe?: boolean
    unsubscribeToken?: string | null
    unsubscribedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserEmailPreferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    receiveSecurityAlerts?: BoolFieldUpdateOperationsInput | boolean
    receiveSystemNotify?: BoolFieldUpdateOperationsInput | boolean
    receiveWeeklyReport?: BoolFieldUpdateOperationsInput | boolean
    receiveFeatureNews?: BoolFieldUpdateOperationsInput | boolean
    receivePromotional?: BoolFieldUpdateOperationsInput | boolean
    weeklyReportDay?: IntFieldUpdateOperationsInput | number
    promotionalFrequency?: StringFieldUpdateOperationsInput | string
    globalUnsubscribe?: BoolFieldUpdateOperationsInput | boolean
    unsubscribeToken?: NullableStringFieldUpdateOperationsInput | string | null
    unsubscribedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserEmailPreferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    receiveSecurityAlerts?: BoolFieldUpdateOperationsInput | boolean
    receiveSystemNotify?: BoolFieldUpdateOperationsInput | boolean
    receiveWeeklyReport?: BoolFieldUpdateOperationsInput | boolean
    receiveFeatureNews?: BoolFieldUpdateOperationsInput | boolean
    receivePromotional?: BoolFieldUpdateOperationsInput | boolean
    weeklyReportDay?: IntFieldUpdateOperationsInput | number
    promotionalFrequency?: StringFieldUpdateOperationsInput | string
    globalUnsubscribe?: BoolFieldUpdateOperationsInput | boolean
    unsubscribeToken?: NullableStringFieldUpdateOperationsInput | string | null
    unsubscribedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserEmailPreferenceCreateManyInput = {
    id?: string
    userId: string
    receiveSecurityAlerts?: boolean
    receiveSystemNotify?: boolean
    receiveWeeklyReport?: boolean
    receiveFeatureNews?: boolean
    receivePromotional?: boolean
    weeklyReportDay?: number
    promotionalFrequency?: string
    globalUnsubscribe?: boolean
    unsubscribeToken?: string | null
    unsubscribedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserEmailPreferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    receiveSecurityAlerts?: BoolFieldUpdateOperationsInput | boolean
    receiveSystemNotify?: BoolFieldUpdateOperationsInput | boolean
    receiveWeeklyReport?: BoolFieldUpdateOperationsInput | boolean
    receiveFeatureNews?: BoolFieldUpdateOperationsInput | boolean
    receivePromotional?: BoolFieldUpdateOperationsInput | boolean
    weeklyReportDay?: IntFieldUpdateOperationsInput | number
    promotionalFrequency?: StringFieldUpdateOperationsInput | string
    globalUnsubscribe?: BoolFieldUpdateOperationsInput | boolean
    unsubscribeToken?: NullableStringFieldUpdateOperationsInput | string | null
    unsubscribedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserEmailPreferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    receiveSecurityAlerts?: BoolFieldUpdateOperationsInput | boolean
    receiveSystemNotify?: BoolFieldUpdateOperationsInput | boolean
    receiveWeeklyReport?: BoolFieldUpdateOperationsInput | boolean
    receiveFeatureNews?: BoolFieldUpdateOperationsInput | boolean
    receivePromotional?: BoolFieldUpdateOperationsInput | boolean
    weeklyReportDay?: IntFieldUpdateOperationsInput | number
    promotionalFrequency?: StringFieldUpdateOperationsInput | string
    globalUnsubscribe?: BoolFieldUpdateOperationsInput | boolean
    unsubscribeToken?: NullableStringFieldUpdateOperationsInput | string | null
    unsubscribedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailStatsCreateInput = {
    id?: string
    date: Date | string
    totalSent?: number
    totalDelivered?: number
    totalFailed?: number
    totalBounced?: number
    totalOpened?: number
    totalClicked?: number
    totalUnsubscribed?: number
    totalComplaints?: number
    verificationEmails?: number
    notificationEmails?: number
    marketingEmails?: number
    openRate?: number | null
    clickRate?: number | null
    deliveryRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailStatsUncheckedCreateInput = {
    id?: string
    date: Date | string
    totalSent?: number
    totalDelivered?: number
    totalFailed?: number
    totalBounced?: number
    totalOpened?: number
    totalClicked?: number
    totalUnsubscribed?: number
    totalComplaints?: number
    verificationEmails?: number
    notificationEmails?: number
    marketingEmails?: number
    openRate?: number | null
    clickRate?: number | null
    deliveryRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailStatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSent?: IntFieldUpdateOperationsInput | number
    totalDelivered?: IntFieldUpdateOperationsInput | number
    totalFailed?: IntFieldUpdateOperationsInput | number
    totalBounced?: IntFieldUpdateOperationsInput | number
    totalOpened?: IntFieldUpdateOperationsInput | number
    totalClicked?: IntFieldUpdateOperationsInput | number
    totalUnsubscribed?: IntFieldUpdateOperationsInput | number
    totalComplaints?: IntFieldUpdateOperationsInput | number
    verificationEmails?: IntFieldUpdateOperationsInput | number
    notificationEmails?: IntFieldUpdateOperationsInput | number
    marketingEmails?: IntFieldUpdateOperationsInput | number
    openRate?: NullableFloatFieldUpdateOperationsInput | number | null
    clickRate?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailStatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSent?: IntFieldUpdateOperationsInput | number
    totalDelivered?: IntFieldUpdateOperationsInput | number
    totalFailed?: IntFieldUpdateOperationsInput | number
    totalBounced?: IntFieldUpdateOperationsInput | number
    totalOpened?: IntFieldUpdateOperationsInput | number
    totalClicked?: IntFieldUpdateOperationsInput | number
    totalUnsubscribed?: IntFieldUpdateOperationsInput | number
    totalComplaints?: IntFieldUpdateOperationsInput | number
    verificationEmails?: IntFieldUpdateOperationsInput | number
    notificationEmails?: IntFieldUpdateOperationsInput | number
    marketingEmails?: IntFieldUpdateOperationsInput | number
    openRate?: NullableFloatFieldUpdateOperationsInput | number | null
    clickRate?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailStatsCreateManyInput = {
    id?: string
    date: Date | string
    totalSent?: number
    totalDelivered?: number
    totalFailed?: number
    totalBounced?: number
    totalOpened?: number
    totalClicked?: number
    totalUnsubscribed?: number
    totalComplaints?: number
    verificationEmails?: number
    notificationEmails?: number
    marketingEmails?: number
    openRate?: number | null
    clickRate?: number | null
    deliveryRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailStatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSent?: IntFieldUpdateOperationsInput | number
    totalDelivered?: IntFieldUpdateOperationsInput | number
    totalFailed?: IntFieldUpdateOperationsInput | number
    totalBounced?: IntFieldUpdateOperationsInput | number
    totalOpened?: IntFieldUpdateOperationsInput | number
    totalClicked?: IntFieldUpdateOperationsInput | number
    totalUnsubscribed?: IntFieldUpdateOperationsInput | number
    totalComplaints?: IntFieldUpdateOperationsInput | number
    verificationEmails?: IntFieldUpdateOperationsInput | number
    notificationEmails?: IntFieldUpdateOperationsInput | number
    marketingEmails?: IntFieldUpdateOperationsInput | number
    openRate?: NullableFloatFieldUpdateOperationsInput | number | null
    clickRate?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailStatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSent?: IntFieldUpdateOperationsInput | number
    totalDelivered?: IntFieldUpdateOperationsInput | number
    totalFailed?: IntFieldUpdateOperationsInput | number
    totalBounced?: IntFieldUpdateOperationsInput | number
    totalOpened?: IntFieldUpdateOperationsInput | number
    totalClicked?: IntFieldUpdateOperationsInput | number
    totalUnsubscribed?: IntFieldUpdateOperationsInput | number
    totalComplaints?: IntFieldUpdateOperationsInput | number
    verificationEmails?: IntFieldUpdateOperationsInput | number
    notificationEmails?: IntFieldUpdateOperationsInput | number
    marketingEmails?: IntFieldUpdateOperationsInput | number
    openRate?: NullableFloatFieldUpdateOperationsInput | number | null
    clickRate?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PracticeRecordListRelationFilter = {
    every?: PracticeRecordWhereInput
    some?: PracticeRecordWhereInput
    none?: PracticeRecordWhereInput
  }

  export type ChatSessionListRelationFilter = {
    every?: ChatSessionWhereInput
    some?: ChatSessionWhereInput
    none?: ChatSessionWhereInput
  }

  export type VocabularyItemListRelationFilter = {
    every?: VocabularyItemWhereInput
    some?: VocabularyItemWhereInput
    none?: VocabularyItemWhereInput
  }

  export type StudyProgressListRelationFilter = {
    every?: StudyProgressWhereInput
    some?: StudyProgressWhereInput
    none?: StudyProgressWhereInput
  }

  export type UserSubscriptionNullableScalarRelationFilter = {
    is?: UserSubscriptionWhereInput | null
    isNot?: UserSubscriptionWhereInput | null
  }

  export type UsageQuotaListRelationFilter = {
    every?: UsageQuotaWhereInput
    some?: UsageQuotaWhereInput
    none?: UsageQuotaWhereInput
  }

  export type PaymentTransactionListRelationFilter = {
    every?: PaymentTransactionWhereInput
    some?: PaymentTransactionWhereInput
    none?: PaymentTransactionWhereInput
  }

  export type QuestionRatingListRelationFilter = {
    every?: QuestionRatingWhereInput
    some?: QuestionRatingWhereInput
    none?: QuestionRatingWhereInput
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type AdminSubscriptionLogListRelationFilter = {
    every?: AdminSubscriptionLogWhereInput
    some?: AdminSubscriptionLogWhereInput
    none?: AdminSubscriptionLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PracticeRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VocabularyItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudyProgressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsageQuotaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionRatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminSubscriptionLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    googleId?: SortOrder
    emailVerified?: SortOrder
    preferredLanguage?: SortOrder
    isActive?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    googleId?: SortOrder
    emailVerified?: SortOrder
    preferredLanguage?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    googleId?: SortOrder
    emailVerified?: SortOrder
    preferredLanguage?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type EnumDifficultyLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.DifficultyLevel | EnumDifficultyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyLevelFilter<$PrismaModel> | $Enums.DifficultyLevel
  }

  export type EnumQuestionSourceFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionSource | EnumQuestionSourceFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionSource[] | ListEnumQuestionSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionSource[] | ListEnumQuestionSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionSourceFilter<$PrismaModel> | $Enums.QuestionSource
  }

  export type EnumQuestionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionStatus | EnumQuestionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionStatusFilter<$PrismaModel> | $Enums.QuestionStatus
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type PracticeAnswerListRelationFilter = {
    every?: PracticeAnswerWhereInput
    some?: PracticeAnswerWhereInput
    none?: PracticeAnswerWhereInput
  }

  export type PracticeAnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    difficulty?: SortOrder
    source?: SortOrder
    status?: SortOrder
    content?: SortOrder
    correctAnswer?: SortOrder
    explanation?: SortOrder
    audioUrl?: SortOrder
    audioScript?: SortOrder
    qualityScore?: SortOrder
    difficultyScore?: SortOrder
    averageTime?: SortOrder
    successRate?: SortOrder
    usageCount?: SortOrder
    ratingCount?: SortOrder
    lastUsedAt?: SortOrder
    createdBy?: SortOrder
    aiGeneratedData?: SortOrder
    reviewedBy?: SortOrder
    reviewedAt?: SortOrder
    reviewNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    qualityScore?: SortOrder
    difficultyScore?: SortOrder
    averageTime?: SortOrder
    successRate?: SortOrder
    usageCount?: SortOrder
    ratingCount?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    difficulty?: SortOrder
    source?: SortOrder
    status?: SortOrder
    correctAnswer?: SortOrder
    explanation?: SortOrder
    audioUrl?: SortOrder
    audioScript?: SortOrder
    qualityScore?: SortOrder
    difficultyScore?: SortOrder
    averageTime?: SortOrder
    successRate?: SortOrder
    usageCount?: SortOrder
    ratingCount?: SortOrder
    lastUsedAt?: SortOrder
    createdBy?: SortOrder
    reviewedBy?: SortOrder
    reviewedAt?: SortOrder
    reviewNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    difficulty?: SortOrder
    source?: SortOrder
    status?: SortOrder
    correctAnswer?: SortOrder
    explanation?: SortOrder
    audioUrl?: SortOrder
    audioScript?: SortOrder
    qualityScore?: SortOrder
    difficultyScore?: SortOrder
    averageTime?: SortOrder
    successRate?: SortOrder
    usageCount?: SortOrder
    ratingCount?: SortOrder
    lastUsedAt?: SortOrder
    createdBy?: SortOrder
    reviewedBy?: SortOrder
    reviewedAt?: SortOrder
    reviewNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    qualityScore?: SortOrder
    difficultyScore?: SortOrder
    averageTime?: SortOrder
    successRate?: SortOrder
    usageCount?: SortOrder
    ratingCount?: SortOrder
  }

  export type EnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }

  export type EnumDifficultyLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DifficultyLevel | EnumDifficultyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyLevelWithAggregatesFilter<$PrismaModel> | $Enums.DifficultyLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyLevelFilter<$PrismaModel>
    _max?: NestedEnumDifficultyLevelFilter<$PrismaModel>
  }

  export type EnumQuestionSourceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionSource | EnumQuestionSourceFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionSource[] | ListEnumQuestionSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionSource[] | ListEnumQuestionSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionSourceWithAggregatesFilter<$PrismaModel> | $Enums.QuestionSource
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionSourceFilter<$PrismaModel>
    _max?: NestedEnumQuestionSourceFilter<$PrismaModel>
  }

  export type EnumQuestionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionStatus | EnumQuestionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionStatusWithAggregatesFilter<$PrismaModel> | $Enums.QuestionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionStatusFilter<$PrismaModel>
    _max?: NestedEnumQuestionStatusFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type QuestionScalarRelationFilter = {
    is?: QuestionWhereInput
    isNot?: QuestionWhereInput
  }

  export type PracticeRecordScalarRelationFilter = {
    is?: PracticeRecordWhereInput
    isNot?: PracticeRecordWhereInput
  }

  export type PracticeAnswerUserIdQuestionIdPracticeRecordIdCompoundUniqueInput = {
    userId: string
    questionId: string
    practiceRecordId: string
  }

  export type PracticeAnswerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    userAnswer?: SortOrder
    isCorrect?: SortOrder
    timeSpent?: SortOrder
    practiceRecordId?: SortOrder
    createdAt?: SortOrder
  }

  export type PracticeAnswerAvgOrderByAggregateInput = {
    timeSpent?: SortOrder
  }

  export type PracticeAnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    userAnswer?: SortOrder
    isCorrect?: SortOrder
    timeSpent?: SortOrder
    practiceRecordId?: SortOrder
    createdAt?: SortOrder
  }

  export type PracticeAnswerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    userAnswer?: SortOrder
    isCorrect?: SortOrder
    timeSpent?: SortOrder
    practiceRecordId?: SortOrder
    createdAt?: SortOrder
  }

  export type PracticeAnswerSumOrderByAggregateInput = {
    timeSpent?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type QuestionRatingUserIdQuestionIdCompoundUniqueInput = {
    userId: string
    questionId: string
  }

  export type QuestionRatingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    clarity?: SortOrder
    difficulty?: SortOrder
    quality?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionRatingAvgOrderByAggregateInput = {
    rating?: SortOrder
    clarity?: SortOrder
    difficulty?: SortOrder
    quality?: SortOrder
  }

  export type QuestionRatingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    clarity?: SortOrder
    difficulty?: SortOrder
    quality?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionRatingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    clarity?: SortOrder
    difficulty?: SortOrder
    quality?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionRatingSumOrderByAggregateInput = {
    rating?: SortOrder
    clarity?: SortOrder
    difficulty?: SortOrder
    quality?: SortOrder
  }

  export type PracticeRecordCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    questionType?: SortOrder
    difficulty?: SortOrder
    questionsCount?: SortOrder
    correctAnswers?: SortOrder
    totalTime?: SortOrder
    score?: SortOrder
    realQuestions?: SortOrder
    aiPoolQuestions?: SortOrder
    realtimeQuestions?: SortOrder
    questions?: SortOrder
    completedAt?: SortOrder
  }

  export type PracticeRecordAvgOrderByAggregateInput = {
    questionsCount?: SortOrder
    correctAnswers?: SortOrder
    totalTime?: SortOrder
    score?: SortOrder
    realQuestions?: SortOrder
    aiPoolQuestions?: SortOrder
    realtimeQuestions?: SortOrder
  }

  export type PracticeRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    questionType?: SortOrder
    difficulty?: SortOrder
    questionsCount?: SortOrder
    correctAnswers?: SortOrder
    totalTime?: SortOrder
    score?: SortOrder
    realQuestions?: SortOrder
    aiPoolQuestions?: SortOrder
    realtimeQuestions?: SortOrder
    completedAt?: SortOrder
  }

  export type PracticeRecordMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    questionType?: SortOrder
    difficulty?: SortOrder
    questionsCount?: SortOrder
    correctAnswers?: SortOrder
    totalTime?: SortOrder
    score?: SortOrder
    realQuestions?: SortOrder
    aiPoolQuestions?: SortOrder
    realtimeQuestions?: SortOrder
    completedAt?: SortOrder
  }

  export type PracticeRecordSumOrderByAggregateInput = {
    questionsCount?: SortOrder
    correctAnswers?: SortOrder
    totalTime?: SortOrder
    score?: SortOrder
    realQuestions?: SortOrder
    aiPoolQuestions?: SortOrder
    realtimeQuestions?: SortOrder
  }

  export type ChatMessageListRelationFilter = {
    every?: ChatMessageWhereInput
    some?: ChatMessageWhereInput
    none?: ChatMessageWhereInput
  }

  export type ChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    questionId?: SortOrder
    questionData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    questionId?: SortOrder
    questionData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    questionId?: SortOrder
    questionData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatSessionScalarRelationFilter = {
    is?: ChatSessionWhereInput
    isNot?: ChatSessionWhereInput
  }

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type VocabularyItemUserIdWordCompoundUniqueInput = {
    userId: string
    word: string
  }

  export type VocabularyItemCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    word?: SortOrder
    definition?: SortOrder
    phonetic?: SortOrder
    audioUrl?: SortOrder
    context?: SortOrder
    meanings?: SortOrder
    language?: SortOrder
    reading?: SortOrder
    jlpt?: SortOrder
    commonality?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrder
    notes?: SortOrder
    mastered?: SortOrder
    tags?: SortOrder
    definitionLoading?: SortOrder
    definitionError?: SortOrder
    nextReviewDate?: SortOrder
    reviewCount?: SortOrder
    correctCount?: SortOrder
    incorrectCount?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    addedAt?: SortOrder
    lastReviewedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VocabularyItemAvgOrderByAggregateInput = {
    reviewCount?: SortOrder
    correctCount?: SortOrder
    incorrectCount?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
  }

  export type VocabularyItemMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    word?: SortOrder
    definition?: SortOrder
    phonetic?: SortOrder
    audioUrl?: SortOrder
    context?: SortOrder
    language?: SortOrder
    reading?: SortOrder
    commonality?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrder
    notes?: SortOrder
    mastered?: SortOrder
    definitionLoading?: SortOrder
    definitionError?: SortOrder
    nextReviewDate?: SortOrder
    reviewCount?: SortOrder
    correctCount?: SortOrder
    incorrectCount?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    addedAt?: SortOrder
    lastReviewedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VocabularyItemMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    word?: SortOrder
    definition?: SortOrder
    phonetic?: SortOrder
    audioUrl?: SortOrder
    context?: SortOrder
    language?: SortOrder
    reading?: SortOrder
    commonality?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrder
    notes?: SortOrder
    mastered?: SortOrder
    definitionLoading?: SortOrder
    definitionError?: SortOrder
    nextReviewDate?: SortOrder
    reviewCount?: SortOrder
    correctCount?: SortOrder
    incorrectCount?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    addedAt?: SortOrder
    lastReviewedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VocabularyItemSumOrderByAggregateInput = {
    reviewCount?: SortOrder
    correctCount?: SortOrder
    incorrectCount?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type StudyProgressUserIdQuestionTypeDifficultyCompoundUniqueInput = {
    userId: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
  }

  export type StudyProgressCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionType?: SortOrder
    difficulty?: SortOrder
    totalQuestions?: SortOrder
    correctAnswers?: SortOrder
    averageTime?: SortOrder
    bestScore?: SortOrder
    lastPracticeAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudyProgressAvgOrderByAggregateInput = {
    totalQuestions?: SortOrder
    correctAnswers?: SortOrder
    averageTime?: SortOrder
    bestScore?: SortOrder
  }

  export type StudyProgressMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionType?: SortOrder
    difficulty?: SortOrder
    totalQuestions?: SortOrder
    correctAnswers?: SortOrder
    averageTime?: SortOrder
    bestScore?: SortOrder
    lastPracticeAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudyProgressMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionType?: SortOrder
    difficulty?: SortOrder
    totalQuestions?: SortOrder
    correctAnswers?: SortOrder
    averageTime?: SortOrder
    bestScore?: SortOrder
    lastPracticeAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudyProgressSumOrderByAggregateInput = {
    totalQuestions?: SortOrder
    correctAnswers?: SortOrder
    averageTime?: SortOrder
    bestScore?: SortOrder
  }

  export type UserSubscriptionListRelationFilter = {
    every?: UserSubscriptionWhereInput
    some?: UserSubscriptionWhereInput
    none?: UserSubscriptionWhereInput
  }

  export type UserSubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionPlanCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nameJp?: SortOrder
    priceCents?: SortOrder
    currency?: SortOrder
    interval?: SortOrder
    intervalCount?: SortOrder
    stripePriceId?: SortOrder
    stripeProductId?: SortOrder
    features?: SortOrder
    dailyPracticeLimit?: SortOrder
    dailyAiChatLimit?: SortOrder
    maxVocabularyWords?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionPlanAvgOrderByAggregateInput = {
    priceCents?: SortOrder
    intervalCount?: SortOrder
    dailyPracticeLimit?: SortOrder
    dailyAiChatLimit?: SortOrder
    maxVocabularyWords?: SortOrder
    sortOrder?: SortOrder
  }

  export type SubscriptionPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nameJp?: SortOrder
    priceCents?: SortOrder
    currency?: SortOrder
    interval?: SortOrder
    intervalCount?: SortOrder
    stripePriceId?: SortOrder
    stripeProductId?: SortOrder
    dailyPracticeLimit?: SortOrder
    dailyAiChatLimit?: SortOrder
    maxVocabularyWords?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionPlanMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nameJp?: SortOrder
    priceCents?: SortOrder
    currency?: SortOrder
    interval?: SortOrder
    intervalCount?: SortOrder
    stripePriceId?: SortOrder
    stripeProductId?: SortOrder
    dailyPracticeLimit?: SortOrder
    dailyAiChatLimit?: SortOrder
    maxVocabularyWords?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionPlanSumOrderByAggregateInput = {
    priceCents?: SortOrder
    intervalCount?: SortOrder
    dailyPracticeLimit?: SortOrder
    dailyAiChatLimit?: SortOrder
    maxVocabularyWords?: SortOrder
    sortOrder?: SortOrder
  }

  export type SubscriptionPlanScalarRelationFilter = {
    is?: SubscriptionPlanWhereInput
    isNot?: SubscriptionPlanWhereInput
  }

  export type UserSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planId?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    stripeSessionId?: SortOrder
    status?: SortOrder
    trialStart?: SortOrder
    trialEnd?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    canceledAt?: SortOrder
    lastPaymentAt?: SortOrder
    nextPaymentAt?: SortOrder
    isTestAccount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planId?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    stripeSessionId?: SortOrder
    status?: SortOrder
    trialStart?: SortOrder
    trialEnd?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    canceledAt?: SortOrder
    lastPaymentAt?: SortOrder
    nextPaymentAt?: SortOrder
    isTestAccount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planId?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    stripeSessionId?: SortOrder
    status?: SortOrder
    trialStart?: SortOrder
    trialEnd?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    canceledAt?: SortOrder
    lastPaymentAt?: SortOrder
    nextPaymentAt?: SortOrder
    isTestAccount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsageQuotaUserIdResourceTypePeriodStartCompoundUniqueInput = {
    userId: string
    resourceType: string
    periodStart: Date | string
  }

  export type UsageQuotaCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    usedCount?: SortOrder
    limitCount?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsageQuotaAvgOrderByAggregateInput = {
    usedCount?: SortOrder
    limitCount?: SortOrder
  }

  export type UsageQuotaMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    usedCount?: SortOrder
    limitCount?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsageQuotaMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resourceType?: SortOrder
    usedCount?: SortOrder
    limitCount?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsageQuotaSumOrderByAggregateInput = {
    usedCount?: SortOrder
    limitCount?: SortOrder
  }

  export type PaymentTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stripeSessionId?: SortOrder
    stripePaymentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    subscriptionId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentTransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stripeSessionId?: SortOrder
    stripePaymentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    subscriptionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stripeSessionId?: SortOrder
    stripePaymentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    subscriptionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentTransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type APIUsageCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    responseTime?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type APIUsageAvgOrderByAggregateInput = {
    statusCode?: SortOrder
    responseTime?: SortOrder
  }

  export type APIUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    responseTime?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type APIUsageMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    responseTime?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type APIUsageSumOrderByAggregateInput = {
    statusCode?: SortOrder
    responseTime?: SortOrder
  }

  export type TokenBlacklistUserIdTokenIdCompoundUniqueInput = {
    userId: string
    tokenId: string
  }

  export type TokenBlacklistCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenId?: SortOrder
    reason?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenBlacklistMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenId?: SortOrder
    reason?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenBlacklistMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenId?: SortOrder
    reason?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminSubscriptionLogCountOrderByAggregateInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    targetUserId?: SortOrder
    subscriptionId?: SortOrder
    operationType?: SortOrder
    oldStatus?: SortOrder
    newStatus?: SortOrder
    oldTestAccount?: SortOrder
    newTestAccount?: SortOrder
    metadata?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminSubscriptionLogMaxOrderByAggregateInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    targetUserId?: SortOrder
    subscriptionId?: SortOrder
    operationType?: SortOrder
    oldStatus?: SortOrder
    newStatus?: SortOrder
    oldTestAccount?: SortOrder
    newTestAccount?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminSubscriptionLogMinOrderByAggregateInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    targetUserId?: SortOrder
    subscriptionId?: SortOrder
    operationType?: SortOrder
    oldStatus?: SortOrder
    newStatus?: SortOrder
    oldTestAccount?: SortOrder
    newTestAccount?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumEmailTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailType | EnumEmailTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EmailType[] | ListEnumEmailTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailType[] | ListEnumEmailTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailTypeFilter<$PrismaModel> | $Enums.EmailType
  }

  export type EnumEmailStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailStatus | EnumEmailStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailStatusFilter<$PrismaModel> | $Enums.EmailStatus
  }

  export type EmailLogCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    recipientEmail?: SortOrder
    recipientName?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    templateName?: SortOrder
    templateData?: SortOrder
    htmlContent?: SortOrder
    emailProvider?: SortOrder
    providerEmailId?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    openedAt?: SortOrder
    clickedAt?: SortOrder
    errorMessage?: SortOrder
    errorCode?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    metadata?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailLogAvgOrderByAggregateInput = {
    retryCount?: SortOrder
    maxRetries?: SortOrder
  }

  export type EmailLogMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    recipientEmail?: SortOrder
    recipientName?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    templateName?: SortOrder
    htmlContent?: SortOrder
    emailProvider?: SortOrder
    providerEmailId?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    openedAt?: SortOrder
    clickedAt?: SortOrder
    errorMessage?: SortOrder
    errorCode?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailLogMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    recipientEmail?: SortOrder
    recipientName?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    templateName?: SortOrder
    htmlContent?: SortOrder
    emailProvider?: SortOrder
    providerEmailId?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    openedAt?: SortOrder
    clickedAt?: SortOrder
    errorMessage?: SortOrder
    errorCode?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailLogSumOrderByAggregateInput = {
    retryCount?: SortOrder
    maxRetries?: SortOrder
  }

  export type EnumEmailTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailType | EnumEmailTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EmailType[] | ListEnumEmailTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailType[] | ListEnumEmailTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailTypeWithAggregatesFilter<$PrismaModel> | $Enums.EmailType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmailTypeFilter<$PrismaModel>
    _max?: NestedEnumEmailTypeFilter<$PrismaModel>
  }

  export type EnumEmailStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailStatus | EnumEmailStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmailStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmailStatusFilter<$PrismaModel>
    _max?: NestedEnumEmailStatusFilter<$PrismaModel>
  }

  export type EmailTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    variables?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    lastUsedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTemplateAvgOrderByAggregateInput = {
    version?: SortOrder
    usageCount?: SortOrder
  }

  export type EmailTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    lastUsedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    lastUsedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTemplateSumOrderByAggregateInput = {
    version?: SortOrder
    usageCount?: SortOrder
  }

  export type UserEmailPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    receiveSecurityAlerts?: SortOrder
    receiveSystemNotify?: SortOrder
    receiveWeeklyReport?: SortOrder
    receiveFeatureNews?: SortOrder
    receivePromotional?: SortOrder
    weeklyReportDay?: SortOrder
    promotionalFrequency?: SortOrder
    globalUnsubscribe?: SortOrder
    unsubscribeToken?: SortOrder
    unsubscribedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserEmailPreferenceAvgOrderByAggregateInput = {
    weeklyReportDay?: SortOrder
  }

  export type UserEmailPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    receiveSecurityAlerts?: SortOrder
    receiveSystemNotify?: SortOrder
    receiveWeeklyReport?: SortOrder
    receiveFeatureNews?: SortOrder
    receivePromotional?: SortOrder
    weeklyReportDay?: SortOrder
    promotionalFrequency?: SortOrder
    globalUnsubscribe?: SortOrder
    unsubscribeToken?: SortOrder
    unsubscribedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserEmailPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    receiveSecurityAlerts?: SortOrder
    receiveSystemNotify?: SortOrder
    receiveWeeklyReport?: SortOrder
    receiveFeatureNews?: SortOrder
    receivePromotional?: SortOrder
    weeklyReportDay?: SortOrder
    promotionalFrequency?: SortOrder
    globalUnsubscribe?: SortOrder
    unsubscribeToken?: SortOrder
    unsubscribedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserEmailPreferenceSumOrderByAggregateInput = {
    weeklyReportDay?: SortOrder
  }

  export type EmailStatsCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    totalSent?: SortOrder
    totalDelivered?: SortOrder
    totalFailed?: SortOrder
    totalBounced?: SortOrder
    totalOpened?: SortOrder
    totalClicked?: SortOrder
    totalUnsubscribed?: SortOrder
    totalComplaints?: SortOrder
    verificationEmails?: SortOrder
    notificationEmails?: SortOrder
    marketingEmails?: SortOrder
    openRate?: SortOrder
    clickRate?: SortOrder
    deliveryRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailStatsAvgOrderByAggregateInput = {
    totalSent?: SortOrder
    totalDelivered?: SortOrder
    totalFailed?: SortOrder
    totalBounced?: SortOrder
    totalOpened?: SortOrder
    totalClicked?: SortOrder
    totalUnsubscribed?: SortOrder
    totalComplaints?: SortOrder
    verificationEmails?: SortOrder
    notificationEmails?: SortOrder
    marketingEmails?: SortOrder
    openRate?: SortOrder
    clickRate?: SortOrder
    deliveryRate?: SortOrder
  }

  export type EmailStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    totalSent?: SortOrder
    totalDelivered?: SortOrder
    totalFailed?: SortOrder
    totalBounced?: SortOrder
    totalOpened?: SortOrder
    totalClicked?: SortOrder
    totalUnsubscribed?: SortOrder
    totalComplaints?: SortOrder
    verificationEmails?: SortOrder
    notificationEmails?: SortOrder
    marketingEmails?: SortOrder
    openRate?: SortOrder
    clickRate?: SortOrder
    deliveryRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailStatsMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    totalSent?: SortOrder
    totalDelivered?: SortOrder
    totalFailed?: SortOrder
    totalBounced?: SortOrder
    totalOpened?: SortOrder
    totalClicked?: SortOrder
    totalUnsubscribed?: SortOrder
    totalComplaints?: SortOrder
    verificationEmails?: SortOrder
    notificationEmails?: SortOrder
    marketingEmails?: SortOrder
    openRate?: SortOrder
    clickRate?: SortOrder
    deliveryRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailStatsSumOrderByAggregateInput = {
    totalSent?: SortOrder
    totalDelivered?: SortOrder
    totalFailed?: SortOrder
    totalBounced?: SortOrder
    totalOpened?: SortOrder
    totalClicked?: SortOrder
    totalUnsubscribed?: SortOrder
    totalComplaints?: SortOrder
    verificationEmails?: SortOrder
    notificationEmails?: SortOrder
    marketingEmails?: SortOrder
    openRate?: SortOrder
    clickRate?: SortOrder
    deliveryRate?: SortOrder
  }

  export type PracticeRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<PracticeRecordCreateWithoutUserInput, PracticeRecordUncheckedCreateWithoutUserInput> | PracticeRecordCreateWithoutUserInput[] | PracticeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PracticeRecordCreateOrConnectWithoutUserInput | PracticeRecordCreateOrConnectWithoutUserInput[]
    createMany?: PracticeRecordCreateManyUserInputEnvelope
    connect?: PracticeRecordWhereUniqueInput | PracticeRecordWhereUniqueInput[]
  }

  export type ChatSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatSessionCreateWithoutUserInput, ChatSessionUncheckedCreateWithoutUserInput> | ChatSessionCreateWithoutUserInput[] | ChatSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutUserInput | ChatSessionCreateOrConnectWithoutUserInput[]
    createMany?: ChatSessionCreateManyUserInputEnvelope
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
  }

  export type VocabularyItemCreateNestedManyWithoutUserInput = {
    create?: XOR<VocabularyItemCreateWithoutUserInput, VocabularyItemUncheckedCreateWithoutUserInput> | VocabularyItemCreateWithoutUserInput[] | VocabularyItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VocabularyItemCreateOrConnectWithoutUserInput | VocabularyItemCreateOrConnectWithoutUserInput[]
    createMany?: VocabularyItemCreateManyUserInputEnvelope
    connect?: VocabularyItemWhereUniqueInput | VocabularyItemWhereUniqueInput[]
  }

  export type StudyProgressCreateNestedManyWithoutUserInput = {
    create?: XOR<StudyProgressCreateWithoutUserInput, StudyProgressUncheckedCreateWithoutUserInput> | StudyProgressCreateWithoutUserInput[] | StudyProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudyProgressCreateOrConnectWithoutUserInput | StudyProgressCreateOrConnectWithoutUserInput[]
    createMany?: StudyProgressCreateManyUserInputEnvelope
    connect?: StudyProgressWhereUniqueInput | StudyProgressWhereUniqueInput[]
  }

  export type UserSubscriptionCreateNestedOneWithoutUserInput = {
    create?: XOR<UserSubscriptionCreateWithoutUserInput, UserSubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutUserInput
    connect?: UserSubscriptionWhereUniqueInput
  }

  export type UsageQuotaCreateNestedManyWithoutUserInput = {
    create?: XOR<UsageQuotaCreateWithoutUserInput, UsageQuotaUncheckedCreateWithoutUserInput> | UsageQuotaCreateWithoutUserInput[] | UsageQuotaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsageQuotaCreateOrConnectWithoutUserInput | UsageQuotaCreateOrConnectWithoutUserInput[]
    createMany?: UsageQuotaCreateManyUserInputEnvelope
    connect?: UsageQuotaWhereUniqueInput | UsageQuotaWhereUniqueInput[]
  }

  export type PaymentTransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentTransactionCreateWithoutUserInput, PaymentTransactionUncheckedCreateWithoutUserInput> | PaymentTransactionCreateWithoutUserInput[] | PaymentTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutUserInput | PaymentTransactionCreateOrConnectWithoutUserInput[]
    createMany?: PaymentTransactionCreateManyUserInputEnvelope
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
  }

  export type QuestionRatingCreateNestedManyWithoutUserInput = {
    create?: XOR<QuestionRatingCreateWithoutUserInput, QuestionRatingUncheckedCreateWithoutUserInput> | QuestionRatingCreateWithoutUserInput[] | QuestionRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionRatingCreateOrConnectWithoutUserInput | QuestionRatingCreateOrConnectWithoutUserInput[]
    createMany?: QuestionRatingCreateManyUserInputEnvelope
    connect?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
  }

  export type QuestionCreateNestedManyWithoutCreatorInput = {
    create?: XOR<QuestionCreateWithoutCreatorInput, QuestionUncheckedCreateWithoutCreatorInput> | QuestionCreateWithoutCreatorInput[] | QuestionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCreatorInput | QuestionCreateOrConnectWithoutCreatorInput[]
    createMany?: QuestionCreateManyCreatorInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type AdminSubscriptionLogCreateNestedManyWithoutAdminUserInput = {
    create?: XOR<AdminSubscriptionLogCreateWithoutAdminUserInput, AdminSubscriptionLogUncheckedCreateWithoutAdminUserInput> | AdminSubscriptionLogCreateWithoutAdminUserInput[] | AdminSubscriptionLogUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminSubscriptionLogCreateOrConnectWithoutAdminUserInput | AdminSubscriptionLogCreateOrConnectWithoutAdminUserInput[]
    createMany?: AdminSubscriptionLogCreateManyAdminUserInputEnvelope
    connect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
  }

  export type AdminSubscriptionLogCreateNestedManyWithoutTargetUserInput = {
    create?: XOR<AdminSubscriptionLogCreateWithoutTargetUserInput, AdminSubscriptionLogUncheckedCreateWithoutTargetUserInput> | AdminSubscriptionLogCreateWithoutTargetUserInput[] | AdminSubscriptionLogUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: AdminSubscriptionLogCreateOrConnectWithoutTargetUserInput | AdminSubscriptionLogCreateOrConnectWithoutTargetUserInput[]
    createMany?: AdminSubscriptionLogCreateManyTargetUserInputEnvelope
    connect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
  }

  export type PracticeRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PracticeRecordCreateWithoutUserInput, PracticeRecordUncheckedCreateWithoutUserInput> | PracticeRecordCreateWithoutUserInput[] | PracticeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PracticeRecordCreateOrConnectWithoutUserInput | PracticeRecordCreateOrConnectWithoutUserInput[]
    createMany?: PracticeRecordCreateManyUserInputEnvelope
    connect?: PracticeRecordWhereUniqueInput | PracticeRecordWhereUniqueInput[]
  }

  export type ChatSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatSessionCreateWithoutUserInput, ChatSessionUncheckedCreateWithoutUserInput> | ChatSessionCreateWithoutUserInput[] | ChatSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutUserInput | ChatSessionCreateOrConnectWithoutUserInput[]
    createMany?: ChatSessionCreateManyUserInputEnvelope
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
  }

  export type VocabularyItemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VocabularyItemCreateWithoutUserInput, VocabularyItemUncheckedCreateWithoutUserInput> | VocabularyItemCreateWithoutUserInput[] | VocabularyItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VocabularyItemCreateOrConnectWithoutUserInput | VocabularyItemCreateOrConnectWithoutUserInput[]
    createMany?: VocabularyItemCreateManyUserInputEnvelope
    connect?: VocabularyItemWhereUniqueInput | VocabularyItemWhereUniqueInput[]
  }

  export type StudyProgressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StudyProgressCreateWithoutUserInput, StudyProgressUncheckedCreateWithoutUserInput> | StudyProgressCreateWithoutUserInput[] | StudyProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudyProgressCreateOrConnectWithoutUserInput | StudyProgressCreateOrConnectWithoutUserInput[]
    createMany?: StudyProgressCreateManyUserInputEnvelope
    connect?: StudyProgressWhereUniqueInput | StudyProgressWhereUniqueInput[]
  }

  export type UserSubscriptionUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserSubscriptionCreateWithoutUserInput, UserSubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutUserInput
    connect?: UserSubscriptionWhereUniqueInput
  }

  export type UsageQuotaUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UsageQuotaCreateWithoutUserInput, UsageQuotaUncheckedCreateWithoutUserInput> | UsageQuotaCreateWithoutUserInput[] | UsageQuotaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsageQuotaCreateOrConnectWithoutUserInput | UsageQuotaCreateOrConnectWithoutUserInput[]
    createMany?: UsageQuotaCreateManyUserInputEnvelope
    connect?: UsageQuotaWhereUniqueInput | UsageQuotaWhereUniqueInput[]
  }

  export type PaymentTransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentTransactionCreateWithoutUserInput, PaymentTransactionUncheckedCreateWithoutUserInput> | PaymentTransactionCreateWithoutUserInput[] | PaymentTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutUserInput | PaymentTransactionCreateOrConnectWithoutUserInput[]
    createMany?: PaymentTransactionCreateManyUserInputEnvelope
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
  }

  export type QuestionRatingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<QuestionRatingCreateWithoutUserInput, QuestionRatingUncheckedCreateWithoutUserInput> | QuestionRatingCreateWithoutUserInput[] | QuestionRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionRatingCreateOrConnectWithoutUserInput | QuestionRatingCreateOrConnectWithoutUserInput[]
    createMany?: QuestionRatingCreateManyUserInputEnvelope
    connect?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<QuestionCreateWithoutCreatorInput, QuestionUncheckedCreateWithoutCreatorInput> | QuestionCreateWithoutCreatorInput[] | QuestionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCreatorInput | QuestionCreateOrConnectWithoutCreatorInput[]
    createMany?: QuestionCreateManyCreatorInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type AdminSubscriptionLogUncheckedCreateNestedManyWithoutAdminUserInput = {
    create?: XOR<AdminSubscriptionLogCreateWithoutAdminUserInput, AdminSubscriptionLogUncheckedCreateWithoutAdminUserInput> | AdminSubscriptionLogCreateWithoutAdminUserInput[] | AdminSubscriptionLogUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminSubscriptionLogCreateOrConnectWithoutAdminUserInput | AdminSubscriptionLogCreateOrConnectWithoutAdminUserInput[]
    createMany?: AdminSubscriptionLogCreateManyAdminUserInputEnvelope
    connect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
  }

  export type AdminSubscriptionLogUncheckedCreateNestedManyWithoutTargetUserInput = {
    create?: XOR<AdminSubscriptionLogCreateWithoutTargetUserInput, AdminSubscriptionLogUncheckedCreateWithoutTargetUserInput> | AdminSubscriptionLogCreateWithoutTargetUserInput[] | AdminSubscriptionLogUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: AdminSubscriptionLogCreateOrConnectWithoutTargetUserInput | AdminSubscriptionLogCreateOrConnectWithoutTargetUserInput[]
    createMany?: AdminSubscriptionLogCreateManyTargetUserInputEnvelope
    connect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type PracticeRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<PracticeRecordCreateWithoutUserInput, PracticeRecordUncheckedCreateWithoutUserInput> | PracticeRecordCreateWithoutUserInput[] | PracticeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PracticeRecordCreateOrConnectWithoutUserInput | PracticeRecordCreateOrConnectWithoutUserInput[]
    upsert?: PracticeRecordUpsertWithWhereUniqueWithoutUserInput | PracticeRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PracticeRecordCreateManyUserInputEnvelope
    set?: PracticeRecordWhereUniqueInput | PracticeRecordWhereUniqueInput[]
    disconnect?: PracticeRecordWhereUniqueInput | PracticeRecordWhereUniqueInput[]
    delete?: PracticeRecordWhereUniqueInput | PracticeRecordWhereUniqueInput[]
    connect?: PracticeRecordWhereUniqueInput | PracticeRecordWhereUniqueInput[]
    update?: PracticeRecordUpdateWithWhereUniqueWithoutUserInput | PracticeRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PracticeRecordUpdateManyWithWhereWithoutUserInput | PracticeRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PracticeRecordScalarWhereInput | PracticeRecordScalarWhereInput[]
  }

  export type ChatSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatSessionCreateWithoutUserInput, ChatSessionUncheckedCreateWithoutUserInput> | ChatSessionCreateWithoutUserInput[] | ChatSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutUserInput | ChatSessionCreateOrConnectWithoutUserInput[]
    upsert?: ChatSessionUpsertWithWhereUniqueWithoutUserInput | ChatSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatSessionCreateManyUserInputEnvelope
    set?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    disconnect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    delete?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    update?: ChatSessionUpdateWithWhereUniqueWithoutUserInput | ChatSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatSessionUpdateManyWithWhereWithoutUserInput | ChatSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
  }

  export type VocabularyItemUpdateManyWithoutUserNestedInput = {
    create?: XOR<VocabularyItemCreateWithoutUserInput, VocabularyItemUncheckedCreateWithoutUserInput> | VocabularyItemCreateWithoutUserInput[] | VocabularyItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VocabularyItemCreateOrConnectWithoutUserInput | VocabularyItemCreateOrConnectWithoutUserInput[]
    upsert?: VocabularyItemUpsertWithWhereUniqueWithoutUserInput | VocabularyItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VocabularyItemCreateManyUserInputEnvelope
    set?: VocabularyItemWhereUniqueInput | VocabularyItemWhereUniqueInput[]
    disconnect?: VocabularyItemWhereUniqueInput | VocabularyItemWhereUniqueInput[]
    delete?: VocabularyItemWhereUniqueInput | VocabularyItemWhereUniqueInput[]
    connect?: VocabularyItemWhereUniqueInput | VocabularyItemWhereUniqueInput[]
    update?: VocabularyItemUpdateWithWhereUniqueWithoutUserInput | VocabularyItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VocabularyItemUpdateManyWithWhereWithoutUserInput | VocabularyItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VocabularyItemScalarWhereInput | VocabularyItemScalarWhereInput[]
  }

  export type StudyProgressUpdateManyWithoutUserNestedInput = {
    create?: XOR<StudyProgressCreateWithoutUserInput, StudyProgressUncheckedCreateWithoutUserInput> | StudyProgressCreateWithoutUserInput[] | StudyProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudyProgressCreateOrConnectWithoutUserInput | StudyProgressCreateOrConnectWithoutUserInput[]
    upsert?: StudyProgressUpsertWithWhereUniqueWithoutUserInput | StudyProgressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StudyProgressCreateManyUserInputEnvelope
    set?: StudyProgressWhereUniqueInput | StudyProgressWhereUniqueInput[]
    disconnect?: StudyProgressWhereUniqueInput | StudyProgressWhereUniqueInput[]
    delete?: StudyProgressWhereUniqueInput | StudyProgressWhereUniqueInput[]
    connect?: StudyProgressWhereUniqueInput | StudyProgressWhereUniqueInput[]
    update?: StudyProgressUpdateWithWhereUniqueWithoutUserInput | StudyProgressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StudyProgressUpdateManyWithWhereWithoutUserInput | StudyProgressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StudyProgressScalarWhereInput | StudyProgressScalarWhereInput[]
  }

  export type UserSubscriptionUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserSubscriptionCreateWithoutUserInput, UserSubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutUserInput
    upsert?: UserSubscriptionUpsertWithoutUserInput
    disconnect?: UserSubscriptionWhereInput | boolean
    delete?: UserSubscriptionWhereInput | boolean
    connect?: UserSubscriptionWhereUniqueInput
    update?: XOR<XOR<UserSubscriptionUpdateToOneWithWhereWithoutUserInput, UserSubscriptionUpdateWithoutUserInput>, UserSubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type UsageQuotaUpdateManyWithoutUserNestedInput = {
    create?: XOR<UsageQuotaCreateWithoutUserInput, UsageQuotaUncheckedCreateWithoutUserInput> | UsageQuotaCreateWithoutUserInput[] | UsageQuotaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsageQuotaCreateOrConnectWithoutUserInput | UsageQuotaCreateOrConnectWithoutUserInput[]
    upsert?: UsageQuotaUpsertWithWhereUniqueWithoutUserInput | UsageQuotaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UsageQuotaCreateManyUserInputEnvelope
    set?: UsageQuotaWhereUniqueInput | UsageQuotaWhereUniqueInput[]
    disconnect?: UsageQuotaWhereUniqueInput | UsageQuotaWhereUniqueInput[]
    delete?: UsageQuotaWhereUniqueInput | UsageQuotaWhereUniqueInput[]
    connect?: UsageQuotaWhereUniqueInput | UsageQuotaWhereUniqueInput[]
    update?: UsageQuotaUpdateWithWhereUniqueWithoutUserInput | UsageQuotaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UsageQuotaUpdateManyWithWhereWithoutUserInput | UsageQuotaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UsageQuotaScalarWhereInput | UsageQuotaScalarWhereInput[]
  }

  export type PaymentTransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentTransactionCreateWithoutUserInput, PaymentTransactionUncheckedCreateWithoutUserInput> | PaymentTransactionCreateWithoutUserInput[] | PaymentTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutUserInput | PaymentTransactionCreateOrConnectWithoutUserInput[]
    upsert?: PaymentTransactionUpsertWithWhereUniqueWithoutUserInput | PaymentTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentTransactionCreateManyUserInputEnvelope
    set?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    disconnect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    delete?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    update?: PaymentTransactionUpdateWithWhereUniqueWithoutUserInput | PaymentTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentTransactionUpdateManyWithWhereWithoutUserInput | PaymentTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
  }

  export type QuestionRatingUpdateManyWithoutUserNestedInput = {
    create?: XOR<QuestionRatingCreateWithoutUserInput, QuestionRatingUncheckedCreateWithoutUserInput> | QuestionRatingCreateWithoutUserInput[] | QuestionRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionRatingCreateOrConnectWithoutUserInput | QuestionRatingCreateOrConnectWithoutUserInput[]
    upsert?: QuestionRatingUpsertWithWhereUniqueWithoutUserInput | QuestionRatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QuestionRatingCreateManyUserInputEnvelope
    set?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    disconnect?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    delete?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    connect?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    update?: QuestionRatingUpdateWithWhereUniqueWithoutUserInput | QuestionRatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QuestionRatingUpdateManyWithWhereWithoutUserInput | QuestionRatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QuestionRatingScalarWhereInput | QuestionRatingScalarWhereInput[]
  }

  export type QuestionUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<QuestionCreateWithoutCreatorInput, QuestionUncheckedCreateWithoutCreatorInput> | QuestionCreateWithoutCreatorInput[] | QuestionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCreatorInput | QuestionCreateOrConnectWithoutCreatorInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutCreatorInput | QuestionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: QuestionCreateManyCreatorInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutCreatorInput | QuestionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutCreatorInput | QuestionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type AdminSubscriptionLogUpdateManyWithoutAdminUserNestedInput = {
    create?: XOR<AdminSubscriptionLogCreateWithoutAdminUserInput, AdminSubscriptionLogUncheckedCreateWithoutAdminUserInput> | AdminSubscriptionLogCreateWithoutAdminUserInput[] | AdminSubscriptionLogUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminSubscriptionLogCreateOrConnectWithoutAdminUserInput | AdminSubscriptionLogCreateOrConnectWithoutAdminUserInput[]
    upsert?: AdminSubscriptionLogUpsertWithWhereUniqueWithoutAdminUserInput | AdminSubscriptionLogUpsertWithWhereUniqueWithoutAdminUserInput[]
    createMany?: AdminSubscriptionLogCreateManyAdminUserInputEnvelope
    set?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    disconnect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    delete?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    connect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    update?: AdminSubscriptionLogUpdateWithWhereUniqueWithoutAdminUserInput | AdminSubscriptionLogUpdateWithWhereUniqueWithoutAdminUserInput[]
    updateMany?: AdminSubscriptionLogUpdateManyWithWhereWithoutAdminUserInput | AdminSubscriptionLogUpdateManyWithWhereWithoutAdminUserInput[]
    deleteMany?: AdminSubscriptionLogScalarWhereInput | AdminSubscriptionLogScalarWhereInput[]
  }

  export type AdminSubscriptionLogUpdateManyWithoutTargetUserNestedInput = {
    create?: XOR<AdminSubscriptionLogCreateWithoutTargetUserInput, AdminSubscriptionLogUncheckedCreateWithoutTargetUserInput> | AdminSubscriptionLogCreateWithoutTargetUserInput[] | AdminSubscriptionLogUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: AdminSubscriptionLogCreateOrConnectWithoutTargetUserInput | AdminSubscriptionLogCreateOrConnectWithoutTargetUserInput[]
    upsert?: AdminSubscriptionLogUpsertWithWhereUniqueWithoutTargetUserInput | AdminSubscriptionLogUpsertWithWhereUniqueWithoutTargetUserInput[]
    createMany?: AdminSubscriptionLogCreateManyTargetUserInputEnvelope
    set?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    disconnect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    delete?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    connect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    update?: AdminSubscriptionLogUpdateWithWhereUniqueWithoutTargetUserInput | AdminSubscriptionLogUpdateWithWhereUniqueWithoutTargetUserInput[]
    updateMany?: AdminSubscriptionLogUpdateManyWithWhereWithoutTargetUserInput | AdminSubscriptionLogUpdateManyWithWhereWithoutTargetUserInput[]
    deleteMany?: AdminSubscriptionLogScalarWhereInput | AdminSubscriptionLogScalarWhereInput[]
  }

  export type PracticeRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PracticeRecordCreateWithoutUserInput, PracticeRecordUncheckedCreateWithoutUserInput> | PracticeRecordCreateWithoutUserInput[] | PracticeRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PracticeRecordCreateOrConnectWithoutUserInput | PracticeRecordCreateOrConnectWithoutUserInput[]
    upsert?: PracticeRecordUpsertWithWhereUniqueWithoutUserInput | PracticeRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PracticeRecordCreateManyUserInputEnvelope
    set?: PracticeRecordWhereUniqueInput | PracticeRecordWhereUniqueInput[]
    disconnect?: PracticeRecordWhereUniqueInput | PracticeRecordWhereUniqueInput[]
    delete?: PracticeRecordWhereUniqueInput | PracticeRecordWhereUniqueInput[]
    connect?: PracticeRecordWhereUniqueInput | PracticeRecordWhereUniqueInput[]
    update?: PracticeRecordUpdateWithWhereUniqueWithoutUserInput | PracticeRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PracticeRecordUpdateManyWithWhereWithoutUserInput | PracticeRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PracticeRecordScalarWhereInput | PracticeRecordScalarWhereInput[]
  }

  export type ChatSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatSessionCreateWithoutUserInput, ChatSessionUncheckedCreateWithoutUserInput> | ChatSessionCreateWithoutUserInput[] | ChatSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatSessionCreateOrConnectWithoutUserInput | ChatSessionCreateOrConnectWithoutUserInput[]
    upsert?: ChatSessionUpsertWithWhereUniqueWithoutUserInput | ChatSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatSessionCreateManyUserInputEnvelope
    set?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    disconnect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    delete?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    connect?: ChatSessionWhereUniqueInput | ChatSessionWhereUniqueInput[]
    update?: ChatSessionUpdateWithWhereUniqueWithoutUserInput | ChatSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatSessionUpdateManyWithWhereWithoutUserInput | ChatSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
  }

  export type VocabularyItemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VocabularyItemCreateWithoutUserInput, VocabularyItemUncheckedCreateWithoutUserInput> | VocabularyItemCreateWithoutUserInput[] | VocabularyItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VocabularyItemCreateOrConnectWithoutUserInput | VocabularyItemCreateOrConnectWithoutUserInput[]
    upsert?: VocabularyItemUpsertWithWhereUniqueWithoutUserInput | VocabularyItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VocabularyItemCreateManyUserInputEnvelope
    set?: VocabularyItemWhereUniqueInput | VocabularyItemWhereUniqueInput[]
    disconnect?: VocabularyItemWhereUniqueInput | VocabularyItemWhereUniqueInput[]
    delete?: VocabularyItemWhereUniqueInput | VocabularyItemWhereUniqueInput[]
    connect?: VocabularyItemWhereUniqueInput | VocabularyItemWhereUniqueInput[]
    update?: VocabularyItemUpdateWithWhereUniqueWithoutUserInput | VocabularyItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VocabularyItemUpdateManyWithWhereWithoutUserInput | VocabularyItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VocabularyItemScalarWhereInput | VocabularyItemScalarWhereInput[]
  }

  export type StudyProgressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StudyProgressCreateWithoutUserInput, StudyProgressUncheckedCreateWithoutUserInput> | StudyProgressCreateWithoutUserInput[] | StudyProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudyProgressCreateOrConnectWithoutUserInput | StudyProgressCreateOrConnectWithoutUserInput[]
    upsert?: StudyProgressUpsertWithWhereUniqueWithoutUserInput | StudyProgressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StudyProgressCreateManyUserInputEnvelope
    set?: StudyProgressWhereUniqueInput | StudyProgressWhereUniqueInput[]
    disconnect?: StudyProgressWhereUniqueInput | StudyProgressWhereUniqueInput[]
    delete?: StudyProgressWhereUniqueInput | StudyProgressWhereUniqueInput[]
    connect?: StudyProgressWhereUniqueInput | StudyProgressWhereUniqueInput[]
    update?: StudyProgressUpdateWithWhereUniqueWithoutUserInput | StudyProgressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StudyProgressUpdateManyWithWhereWithoutUserInput | StudyProgressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StudyProgressScalarWhereInput | StudyProgressScalarWhereInput[]
  }

  export type UserSubscriptionUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserSubscriptionCreateWithoutUserInput, UserSubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutUserInput
    upsert?: UserSubscriptionUpsertWithoutUserInput
    disconnect?: UserSubscriptionWhereInput | boolean
    delete?: UserSubscriptionWhereInput | boolean
    connect?: UserSubscriptionWhereUniqueInput
    update?: XOR<XOR<UserSubscriptionUpdateToOneWithWhereWithoutUserInput, UserSubscriptionUpdateWithoutUserInput>, UserSubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type UsageQuotaUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UsageQuotaCreateWithoutUserInput, UsageQuotaUncheckedCreateWithoutUserInput> | UsageQuotaCreateWithoutUserInput[] | UsageQuotaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsageQuotaCreateOrConnectWithoutUserInput | UsageQuotaCreateOrConnectWithoutUserInput[]
    upsert?: UsageQuotaUpsertWithWhereUniqueWithoutUserInput | UsageQuotaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UsageQuotaCreateManyUserInputEnvelope
    set?: UsageQuotaWhereUniqueInput | UsageQuotaWhereUniqueInput[]
    disconnect?: UsageQuotaWhereUniqueInput | UsageQuotaWhereUniqueInput[]
    delete?: UsageQuotaWhereUniqueInput | UsageQuotaWhereUniqueInput[]
    connect?: UsageQuotaWhereUniqueInput | UsageQuotaWhereUniqueInput[]
    update?: UsageQuotaUpdateWithWhereUniqueWithoutUserInput | UsageQuotaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UsageQuotaUpdateManyWithWhereWithoutUserInput | UsageQuotaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UsageQuotaScalarWhereInput | UsageQuotaScalarWhereInput[]
  }

  export type PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentTransactionCreateWithoutUserInput, PaymentTransactionUncheckedCreateWithoutUserInput> | PaymentTransactionCreateWithoutUserInput[] | PaymentTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutUserInput | PaymentTransactionCreateOrConnectWithoutUserInput[]
    upsert?: PaymentTransactionUpsertWithWhereUniqueWithoutUserInput | PaymentTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentTransactionCreateManyUserInputEnvelope
    set?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    disconnect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    delete?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    update?: PaymentTransactionUpdateWithWhereUniqueWithoutUserInput | PaymentTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentTransactionUpdateManyWithWhereWithoutUserInput | PaymentTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
  }

  export type QuestionRatingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<QuestionRatingCreateWithoutUserInput, QuestionRatingUncheckedCreateWithoutUserInput> | QuestionRatingCreateWithoutUserInput[] | QuestionRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionRatingCreateOrConnectWithoutUserInput | QuestionRatingCreateOrConnectWithoutUserInput[]
    upsert?: QuestionRatingUpsertWithWhereUniqueWithoutUserInput | QuestionRatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QuestionRatingCreateManyUserInputEnvelope
    set?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    disconnect?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    delete?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    connect?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    update?: QuestionRatingUpdateWithWhereUniqueWithoutUserInput | QuestionRatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QuestionRatingUpdateManyWithWhereWithoutUserInput | QuestionRatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QuestionRatingScalarWhereInput | QuestionRatingScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<QuestionCreateWithoutCreatorInput, QuestionUncheckedCreateWithoutCreatorInput> | QuestionCreateWithoutCreatorInput[] | QuestionUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCreatorInput | QuestionCreateOrConnectWithoutCreatorInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutCreatorInput | QuestionUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: QuestionCreateManyCreatorInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutCreatorInput | QuestionUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutCreatorInput | QuestionUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type AdminSubscriptionLogUncheckedUpdateManyWithoutAdminUserNestedInput = {
    create?: XOR<AdminSubscriptionLogCreateWithoutAdminUserInput, AdminSubscriptionLogUncheckedCreateWithoutAdminUserInput> | AdminSubscriptionLogCreateWithoutAdminUserInput[] | AdminSubscriptionLogUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminSubscriptionLogCreateOrConnectWithoutAdminUserInput | AdminSubscriptionLogCreateOrConnectWithoutAdminUserInput[]
    upsert?: AdminSubscriptionLogUpsertWithWhereUniqueWithoutAdminUserInput | AdminSubscriptionLogUpsertWithWhereUniqueWithoutAdminUserInput[]
    createMany?: AdminSubscriptionLogCreateManyAdminUserInputEnvelope
    set?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    disconnect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    delete?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    connect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    update?: AdminSubscriptionLogUpdateWithWhereUniqueWithoutAdminUserInput | AdminSubscriptionLogUpdateWithWhereUniqueWithoutAdminUserInput[]
    updateMany?: AdminSubscriptionLogUpdateManyWithWhereWithoutAdminUserInput | AdminSubscriptionLogUpdateManyWithWhereWithoutAdminUserInput[]
    deleteMany?: AdminSubscriptionLogScalarWhereInput | AdminSubscriptionLogScalarWhereInput[]
  }

  export type AdminSubscriptionLogUncheckedUpdateManyWithoutTargetUserNestedInput = {
    create?: XOR<AdminSubscriptionLogCreateWithoutTargetUserInput, AdminSubscriptionLogUncheckedCreateWithoutTargetUserInput> | AdminSubscriptionLogCreateWithoutTargetUserInput[] | AdminSubscriptionLogUncheckedCreateWithoutTargetUserInput[]
    connectOrCreate?: AdminSubscriptionLogCreateOrConnectWithoutTargetUserInput | AdminSubscriptionLogCreateOrConnectWithoutTargetUserInput[]
    upsert?: AdminSubscriptionLogUpsertWithWhereUniqueWithoutTargetUserInput | AdminSubscriptionLogUpsertWithWhereUniqueWithoutTargetUserInput[]
    createMany?: AdminSubscriptionLogCreateManyTargetUserInputEnvelope
    set?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    disconnect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    delete?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    connect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    update?: AdminSubscriptionLogUpdateWithWhereUniqueWithoutTargetUserInput | AdminSubscriptionLogUpdateWithWhereUniqueWithoutTargetUserInput[]
    updateMany?: AdminSubscriptionLogUpdateManyWithWhereWithoutTargetUserInput | AdminSubscriptionLogUpdateManyWithWhereWithoutTargetUserInput[]
    deleteMany?: AdminSubscriptionLogScalarWhereInput | AdminSubscriptionLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedQuestionsInput = {
    create?: XOR<UserCreateWithoutCreatedQuestionsInput, UserUncheckedCreateWithoutCreatedQuestionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedQuestionsInput
    connect?: UserWhereUniqueInput
  }

  export type PracticeAnswerCreateNestedManyWithoutQuestionInput = {
    create?: XOR<PracticeAnswerCreateWithoutQuestionInput, PracticeAnswerUncheckedCreateWithoutQuestionInput> | PracticeAnswerCreateWithoutQuestionInput[] | PracticeAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: PracticeAnswerCreateOrConnectWithoutQuestionInput | PracticeAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: PracticeAnswerCreateManyQuestionInputEnvelope
    connect?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
  }

  export type QuestionRatingCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionRatingCreateWithoutQuestionInput, QuestionRatingUncheckedCreateWithoutQuestionInput> | QuestionRatingCreateWithoutQuestionInput[] | QuestionRatingUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionRatingCreateOrConnectWithoutQuestionInput | QuestionRatingCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionRatingCreateManyQuestionInputEnvelope
    connect?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
  }

  export type PracticeAnswerUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<PracticeAnswerCreateWithoutQuestionInput, PracticeAnswerUncheckedCreateWithoutQuestionInput> | PracticeAnswerCreateWithoutQuestionInput[] | PracticeAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: PracticeAnswerCreateOrConnectWithoutQuestionInput | PracticeAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: PracticeAnswerCreateManyQuestionInputEnvelope
    connect?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
  }

  export type QuestionRatingUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionRatingCreateWithoutQuestionInput, QuestionRatingUncheckedCreateWithoutQuestionInput> | QuestionRatingCreateWithoutQuestionInput[] | QuestionRatingUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionRatingCreateOrConnectWithoutQuestionInput | QuestionRatingCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionRatingCreateManyQuestionInputEnvelope
    connect?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
  }

  export type EnumQuestionTypeFieldUpdateOperationsInput = {
    set?: $Enums.QuestionType
  }

  export type EnumDifficultyLevelFieldUpdateOperationsInput = {
    set?: $Enums.DifficultyLevel
  }

  export type EnumQuestionSourceFieldUpdateOperationsInput = {
    set?: $Enums.QuestionSource
  }

  export type EnumQuestionStatusFieldUpdateOperationsInput = {
    set?: $Enums.QuestionStatus
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutCreatedQuestionsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedQuestionsInput, UserUncheckedCreateWithoutCreatedQuestionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedQuestionsInput
    upsert?: UserUpsertWithoutCreatedQuestionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedQuestionsInput, UserUpdateWithoutCreatedQuestionsInput>, UserUncheckedUpdateWithoutCreatedQuestionsInput>
  }

  export type PracticeAnswerUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<PracticeAnswerCreateWithoutQuestionInput, PracticeAnswerUncheckedCreateWithoutQuestionInput> | PracticeAnswerCreateWithoutQuestionInput[] | PracticeAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: PracticeAnswerCreateOrConnectWithoutQuestionInput | PracticeAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: PracticeAnswerUpsertWithWhereUniqueWithoutQuestionInput | PracticeAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: PracticeAnswerCreateManyQuestionInputEnvelope
    set?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    disconnect?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    delete?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    connect?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    update?: PracticeAnswerUpdateWithWhereUniqueWithoutQuestionInput | PracticeAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: PracticeAnswerUpdateManyWithWhereWithoutQuestionInput | PracticeAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: PracticeAnswerScalarWhereInput | PracticeAnswerScalarWhereInput[]
  }

  export type QuestionRatingUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionRatingCreateWithoutQuestionInput, QuestionRatingUncheckedCreateWithoutQuestionInput> | QuestionRatingCreateWithoutQuestionInput[] | QuestionRatingUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionRatingCreateOrConnectWithoutQuestionInput | QuestionRatingCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionRatingUpsertWithWhereUniqueWithoutQuestionInput | QuestionRatingUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionRatingCreateManyQuestionInputEnvelope
    set?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    disconnect?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    delete?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    connect?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    update?: QuestionRatingUpdateWithWhereUniqueWithoutQuestionInput | QuestionRatingUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionRatingUpdateManyWithWhereWithoutQuestionInput | QuestionRatingUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionRatingScalarWhereInput | QuestionRatingScalarWhereInput[]
  }

  export type PracticeAnswerUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<PracticeAnswerCreateWithoutQuestionInput, PracticeAnswerUncheckedCreateWithoutQuestionInput> | PracticeAnswerCreateWithoutQuestionInput[] | PracticeAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: PracticeAnswerCreateOrConnectWithoutQuestionInput | PracticeAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: PracticeAnswerUpsertWithWhereUniqueWithoutQuestionInput | PracticeAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: PracticeAnswerCreateManyQuestionInputEnvelope
    set?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    disconnect?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    delete?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    connect?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    update?: PracticeAnswerUpdateWithWhereUniqueWithoutQuestionInput | PracticeAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: PracticeAnswerUpdateManyWithWhereWithoutQuestionInput | PracticeAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: PracticeAnswerScalarWhereInput | PracticeAnswerScalarWhereInput[]
  }

  export type QuestionRatingUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionRatingCreateWithoutQuestionInput, QuestionRatingUncheckedCreateWithoutQuestionInput> | QuestionRatingCreateWithoutQuestionInput[] | QuestionRatingUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionRatingCreateOrConnectWithoutQuestionInput | QuestionRatingCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionRatingUpsertWithWhereUniqueWithoutQuestionInput | QuestionRatingUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionRatingCreateManyQuestionInputEnvelope
    set?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    disconnect?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    delete?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    connect?: QuestionRatingWhereUniqueInput | QuestionRatingWhereUniqueInput[]
    update?: QuestionRatingUpdateWithWhereUniqueWithoutQuestionInput | QuestionRatingUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionRatingUpdateManyWithWhereWithoutQuestionInput | QuestionRatingUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionRatingScalarWhereInput | QuestionRatingScalarWhereInput[]
  }

  export type QuestionCreateNestedOneWithoutPracticeAnswersInput = {
    create?: XOR<QuestionCreateWithoutPracticeAnswersInput, QuestionUncheckedCreateWithoutPracticeAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutPracticeAnswersInput
    connect?: QuestionWhereUniqueInput
  }

  export type PracticeRecordCreateNestedOneWithoutPracticeAnswersInput = {
    create?: XOR<PracticeRecordCreateWithoutPracticeAnswersInput, PracticeRecordUncheckedCreateWithoutPracticeAnswersInput>
    connectOrCreate?: PracticeRecordCreateOrConnectWithoutPracticeAnswersInput
    connect?: PracticeRecordWhereUniqueInput
  }

  export type QuestionUpdateOneRequiredWithoutPracticeAnswersNestedInput = {
    create?: XOR<QuestionCreateWithoutPracticeAnswersInput, QuestionUncheckedCreateWithoutPracticeAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutPracticeAnswersInput
    upsert?: QuestionUpsertWithoutPracticeAnswersInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutPracticeAnswersInput, QuestionUpdateWithoutPracticeAnswersInput>, QuestionUncheckedUpdateWithoutPracticeAnswersInput>
  }

  export type PracticeRecordUpdateOneRequiredWithoutPracticeAnswersNestedInput = {
    create?: XOR<PracticeRecordCreateWithoutPracticeAnswersInput, PracticeRecordUncheckedCreateWithoutPracticeAnswersInput>
    connectOrCreate?: PracticeRecordCreateOrConnectWithoutPracticeAnswersInput
    upsert?: PracticeRecordUpsertWithoutPracticeAnswersInput
    connect?: PracticeRecordWhereUniqueInput
    update?: XOR<XOR<PracticeRecordUpdateToOneWithWhereWithoutPracticeAnswersInput, PracticeRecordUpdateWithoutPracticeAnswersInput>, PracticeRecordUncheckedUpdateWithoutPracticeAnswersInput>
  }

  export type UserCreateNestedOneWithoutQuestionRatingsInput = {
    create?: XOR<UserCreateWithoutQuestionRatingsInput, UserUncheckedCreateWithoutQuestionRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionRatingsInput
    connect?: UserWhereUniqueInput
  }

  export type QuestionCreateNestedOneWithoutRatingsInput = {
    create?: XOR<QuestionCreateWithoutRatingsInput, QuestionUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutRatingsInput
    connect?: QuestionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutQuestionRatingsNestedInput = {
    create?: XOR<UserCreateWithoutQuestionRatingsInput, UserUncheckedCreateWithoutQuestionRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionRatingsInput
    upsert?: UserUpsertWithoutQuestionRatingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuestionRatingsInput, UserUpdateWithoutQuestionRatingsInput>, UserUncheckedUpdateWithoutQuestionRatingsInput>
  }

  export type QuestionUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: XOR<QuestionCreateWithoutRatingsInput, QuestionUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutRatingsInput
    upsert?: QuestionUpsertWithoutRatingsInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutRatingsInput, QuestionUpdateWithoutRatingsInput>, QuestionUncheckedUpdateWithoutRatingsInput>
  }

  export type UserCreateNestedOneWithoutPracticeRecordsInput = {
    create?: XOR<UserCreateWithoutPracticeRecordsInput, UserUncheckedCreateWithoutPracticeRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPracticeRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type PracticeAnswerCreateNestedManyWithoutPracticeRecordInput = {
    create?: XOR<PracticeAnswerCreateWithoutPracticeRecordInput, PracticeAnswerUncheckedCreateWithoutPracticeRecordInput> | PracticeAnswerCreateWithoutPracticeRecordInput[] | PracticeAnswerUncheckedCreateWithoutPracticeRecordInput[]
    connectOrCreate?: PracticeAnswerCreateOrConnectWithoutPracticeRecordInput | PracticeAnswerCreateOrConnectWithoutPracticeRecordInput[]
    createMany?: PracticeAnswerCreateManyPracticeRecordInputEnvelope
    connect?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
  }

  export type PracticeAnswerUncheckedCreateNestedManyWithoutPracticeRecordInput = {
    create?: XOR<PracticeAnswerCreateWithoutPracticeRecordInput, PracticeAnswerUncheckedCreateWithoutPracticeRecordInput> | PracticeAnswerCreateWithoutPracticeRecordInput[] | PracticeAnswerUncheckedCreateWithoutPracticeRecordInput[]
    connectOrCreate?: PracticeAnswerCreateOrConnectWithoutPracticeRecordInput | PracticeAnswerCreateOrConnectWithoutPracticeRecordInput[]
    createMany?: PracticeAnswerCreateManyPracticeRecordInputEnvelope
    connect?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPracticeRecordsNestedInput = {
    create?: XOR<UserCreateWithoutPracticeRecordsInput, UserUncheckedCreateWithoutPracticeRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPracticeRecordsInput
    upsert?: UserUpsertWithoutPracticeRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPracticeRecordsInput, UserUpdateWithoutPracticeRecordsInput>, UserUncheckedUpdateWithoutPracticeRecordsInput>
  }

  export type PracticeAnswerUpdateManyWithoutPracticeRecordNestedInput = {
    create?: XOR<PracticeAnswerCreateWithoutPracticeRecordInput, PracticeAnswerUncheckedCreateWithoutPracticeRecordInput> | PracticeAnswerCreateWithoutPracticeRecordInput[] | PracticeAnswerUncheckedCreateWithoutPracticeRecordInput[]
    connectOrCreate?: PracticeAnswerCreateOrConnectWithoutPracticeRecordInput | PracticeAnswerCreateOrConnectWithoutPracticeRecordInput[]
    upsert?: PracticeAnswerUpsertWithWhereUniqueWithoutPracticeRecordInput | PracticeAnswerUpsertWithWhereUniqueWithoutPracticeRecordInput[]
    createMany?: PracticeAnswerCreateManyPracticeRecordInputEnvelope
    set?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    disconnect?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    delete?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    connect?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    update?: PracticeAnswerUpdateWithWhereUniqueWithoutPracticeRecordInput | PracticeAnswerUpdateWithWhereUniqueWithoutPracticeRecordInput[]
    updateMany?: PracticeAnswerUpdateManyWithWhereWithoutPracticeRecordInput | PracticeAnswerUpdateManyWithWhereWithoutPracticeRecordInput[]
    deleteMany?: PracticeAnswerScalarWhereInput | PracticeAnswerScalarWhereInput[]
  }

  export type PracticeAnswerUncheckedUpdateManyWithoutPracticeRecordNestedInput = {
    create?: XOR<PracticeAnswerCreateWithoutPracticeRecordInput, PracticeAnswerUncheckedCreateWithoutPracticeRecordInput> | PracticeAnswerCreateWithoutPracticeRecordInput[] | PracticeAnswerUncheckedCreateWithoutPracticeRecordInput[]
    connectOrCreate?: PracticeAnswerCreateOrConnectWithoutPracticeRecordInput | PracticeAnswerCreateOrConnectWithoutPracticeRecordInput[]
    upsert?: PracticeAnswerUpsertWithWhereUniqueWithoutPracticeRecordInput | PracticeAnswerUpsertWithWhereUniqueWithoutPracticeRecordInput[]
    createMany?: PracticeAnswerCreateManyPracticeRecordInputEnvelope
    set?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    disconnect?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    delete?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    connect?: PracticeAnswerWhereUniqueInput | PracticeAnswerWhereUniqueInput[]
    update?: PracticeAnswerUpdateWithWhereUniqueWithoutPracticeRecordInput | PracticeAnswerUpdateWithWhereUniqueWithoutPracticeRecordInput[]
    updateMany?: PracticeAnswerUpdateManyWithWhereWithoutPracticeRecordInput | PracticeAnswerUpdateManyWithWhereWithoutPracticeRecordInput[]
    deleteMany?: PracticeAnswerScalarWhereInput | PracticeAnswerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutChatSessionsInput = {
    create?: XOR<UserCreateWithoutChatSessionsInput, UserUncheckedCreateWithoutChatSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type ChatMessageCreateNestedManyWithoutSessionInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutChatSessionsNestedInput = {
    create?: XOR<UserCreateWithoutChatSessionsInput, UserUncheckedCreateWithoutChatSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatSessionsInput
    upsert?: UserUpsertWithoutChatSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatSessionsInput, UserUpdateWithoutChatSessionsInput>, UserUncheckedUpdateWithoutChatSessionsInput>
  }

  export type ChatMessageUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutSessionInput | ChatMessageUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutSessionInput | ChatMessageUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutSessionInput | ChatMessageUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutSessionInput | ChatMessageUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutSessionInput | ChatMessageUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutSessionInput | ChatMessageUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatSessionCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatSessionCreateOrConnectWithoutMessagesInput
    connect?: ChatSessionWhereUniqueInput
  }

  export type ChatSessionUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatSessionCreateOrConnectWithoutMessagesInput
    upsert?: ChatSessionUpsertWithoutMessagesInput
    connect?: ChatSessionWhereUniqueInput
    update?: XOR<XOR<ChatSessionUpdateToOneWithWhereWithoutMessagesInput, ChatSessionUpdateWithoutMessagesInput>, ChatSessionUncheckedUpdateWithoutMessagesInput>
  }

  export type VocabularyItemCreatejlptInput = {
    set: string[]
  }

  export type VocabularyItemCreatetagsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutVocabularyItemsInput = {
    create?: XOR<UserCreateWithoutVocabularyItemsInput, UserUncheckedCreateWithoutVocabularyItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVocabularyItemsInput
    connect?: UserWhereUniqueInput
  }

  export type VocabularyItemUpdatejlptInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type VocabularyItemUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutVocabularyItemsNestedInput = {
    create?: XOR<UserCreateWithoutVocabularyItemsInput, UserUncheckedCreateWithoutVocabularyItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVocabularyItemsInput
    upsert?: UserUpsertWithoutVocabularyItemsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVocabularyItemsInput, UserUpdateWithoutVocabularyItemsInput>, UserUncheckedUpdateWithoutVocabularyItemsInput>
  }

  export type UserCreateNestedOneWithoutStudyProgressInput = {
    create?: XOR<UserCreateWithoutStudyProgressInput, UserUncheckedCreateWithoutStudyProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudyProgressInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStudyProgressNestedInput = {
    create?: XOR<UserCreateWithoutStudyProgressInput, UserUncheckedCreateWithoutStudyProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudyProgressInput
    upsert?: UserUpsertWithoutStudyProgressInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudyProgressInput, UserUpdateWithoutStudyProgressInput>, UserUncheckedUpdateWithoutStudyProgressInput>
  }

  export type UserSubscriptionCreateNestedManyWithoutPlanInput = {
    create?: XOR<UserSubscriptionCreateWithoutPlanInput, UserSubscriptionUncheckedCreateWithoutPlanInput> | UserSubscriptionCreateWithoutPlanInput[] | UserSubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutPlanInput | UserSubscriptionCreateOrConnectWithoutPlanInput[]
    createMany?: UserSubscriptionCreateManyPlanInputEnvelope
    connect?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
  }

  export type UserSubscriptionUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<UserSubscriptionCreateWithoutPlanInput, UserSubscriptionUncheckedCreateWithoutPlanInput> | UserSubscriptionCreateWithoutPlanInput[] | UserSubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutPlanInput | UserSubscriptionCreateOrConnectWithoutPlanInput[]
    createMany?: UserSubscriptionCreateManyPlanInputEnvelope
    connect?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
  }

  export type UserSubscriptionUpdateManyWithoutPlanNestedInput = {
    create?: XOR<UserSubscriptionCreateWithoutPlanInput, UserSubscriptionUncheckedCreateWithoutPlanInput> | UserSubscriptionCreateWithoutPlanInput[] | UserSubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutPlanInput | UserSubscriptionCreateOrConnectWithoutPlanInput[]
    upsert?: UserSubscriptionUpsertWithWhereUniqueWithoutPlanInput | UserSubscriptionUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: UserSubscriptionCreateManyPlanInputEnvelope
    set?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    disconnect?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    delete?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    connect?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    update?: UserSubscriptionUpdateWithWhereUniqueWithoutPlanInput | UserSubscriptionUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: UserSubscriptionUpdateManyWithWhereWithoutPlanInput | UserSubscriptionUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: UserSubscriptionScalarWhereInput | UserSubscriptionScalarWhereInput[]
  }

  export type UserSubscriptionUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<UserSubscriptionCreateWithoutPlanInput, UserSubscriptionUncheckedCreateWithoutPlanInput> | UserSubscriptionCreateWithoutPlanInput[] | UserSubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutPlanInput | UserSubscriptionCreateOrConnectWithoutPlanInput[]
    upsert?: UserSubscriptionUpsertWithWhereUniqueWithoutPlanInput | UserSubscriptionUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: UserSubscriptionCreateManyPlanInputEnvelope
    set?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    disconnect?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    delete?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    connect?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    update?: UserSubscriptionUpdateWithWhereUniqueWithoutPlanInput | UserSubscriptionUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: UserSubscriptionUpdateManyWithWhereWithoutPlanInput | UserSubscriptionUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: UserSubscriptionScalarWhereInput | UserSubscriptionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionInput
    connect?: UserWhereUniqueInput
  }

  export type SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: SubscriptionPlanCreateOrConnectWithoutSubscriptionsInput
    connect?: SubscriptionPlanWhereUniqueInput
  }

  export type PaymentTransactionCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<PaymentTransactionCreateWithoutSubscriptionInput, PaymentTransactionUncheckedCreateWithoutSubscriptionInput> | PaymentTransactionCreateWithoutSubscriptionInput[] | PaymentTransactionUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutSubscriptionInput | PaymentTransactionCreateOrConnectWithoutSubscriptionInput[]
    createMany?: PaymentTransactionCreateManySubscriptionInputEnvelope
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
  }

  export type AdminSubscriptionLogCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<AdminSubscriptionLogCreateWithoutSubscriptionInput, AdminSubscriptionLogUncheckedCreateWithoutSubscriptionInput> | AdminSubscriptionLogCreateWithoutSubscriptionInput[] | AdminSubscriptionLogUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: AdminSubscriptionLogCreateOrConnectWithoutSubscriptionInput | AdminSubscriptionLogCreateOrConnectWithoutSubscriptionInput[]
    createMany?: AdminSubscriptionLogCreateManySubscriptionInputEnvelope
    connect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
  }

  export type PaymentTransactionUncheckedCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<PaymentTransactionCreateWithoutSubscriptionInput, PaymentTransactionUncheckedCreateWithoutSubscriptionInput> | PaymentTransactionCreateWithoutSubscriptionInput[] | PaymentTransactionUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutSubscriptionInput | PaymentTransactionCreateOrConnectWithoutSubscriptionInput[]
    createMany?: PaymentTransactionCreateManySubscriptionInputEnvelope
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
  }

  export type AdminSubscriptionLogUncheckedCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<AdminSubscriptionLogCreateWithoutSubscriptionInput, AdminSubscriptionLogUncheckedCreateWithoutSubscriptionInput> | AdminSubscriptionLogCreateWithoutSubscriptionInput[] | AdminSubscriptionLogUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: AdminSubscriptionLogCreateOrConnectWithoutSubscriptionInput | AdminSubscriptionLogCreateOrConnectWithoutSubscriptionInput[]
    createMany?: AdminSubscriptionLogCreateManySubscriptionInputEnvelope
    connect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSubscriptionNestedInput = {
    create?: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionInput
    upsert?: UserUpsertWithoutSubscriptionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubscriptionInput, UserUpdateWithoutSubscriptionInput>, UserUncheckedUpdateWithoutSubscriptionInput>
  }

  export type SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: SubscriptionPlanCreateOrConnectWithoutSubscriptionsInput
    upsert?: SubscriptionPlanUpsertWithoutSubscriptionsInput
    connect?: SubscriptionPlanWhereUniqueInput
    update?: XOR<XOR<SubscriptionPlanUpdateToOneWithWhereWithoutSubscriptionsInput, SubscriptionPlanUpdateWithoutSubscriptionsInput>, SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type PaymentTransactionUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<PaymentTransactionCreateWithoutSubscriptionInput, PaymentTransactionUncheckedCreateWithoutSubscriptionInput> | PaymentTransactionCreateWithoutSubscriptionInput[] | PaymentTransactionUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutSubscriptionInput | PaymentTransactionCreateOrConnectWithoutSubscriptionInput[]
    upsert?: PaymentTransactionUpsertWithWhereUniqueWithoutSubscriptionInput | PaymentTransactionUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: PaymentTransactionCreateManySubscriptionInputEnvelope
    set?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    disconnect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    delete?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    update?: PaymentTransactionUpdateWithWhereUniqueWithoutSubscriptionInput | PaymentTransactionUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: PaymentTransactionUpdateManyWithWhereWithoutSubscriptionInput | PaymentTransactionUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
  }

  export type AdminSubscriptionLogUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<AdminSubscriptionLogCreateWithoutSubscriptionInput, AdminSubscriptionLogUncheckedCreateWithoutSubscriptionInput> | AdminSubscriptionLogCreateWithoutSubscriptionInput[] | AdminSubscriptionLogUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: AdminSubscriptionLogCreateOrConnectWithoutSubscriptionInput | AdminSubscriptionLogCreateOrConnectWithoutSubscriptionInput[]
    upsert?: AdminSubscriptionLogUpsertWithWhereUniqueWithoutSubscriptionInput | AdminSubscriptionLogUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: AdminSubscriptionLogCreateManySubscriptionInputEnvelope
    set?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    disconnect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    delete?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    connect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    update?: AdminSubscriptionLogUpdateWithWhereUniqueWithoutSubscriptionInput | AdminSubscriptionLogUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: AdminSubscriptionLogUpdateManyWithWhereWithoutSubscriptionInput | AdminSubscriptionLogUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: AdminSubscriptionLogScalarWhereInput | AdminSubscriptionLogScalarWhereInput[]
  }

  export type PaymentTransactionUncheckedUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<PaymentTransactionCreateWithoutSubscriptionInput, PaymentTransactionUncheckedCreateWithoutSubscriptionInput> | PaymentTransactionCreateWithoutSubscriptionInput[] | PaymentTransactionUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutSubscriptionInput | PaymentTransactionCreateOrConnectWithoutSubscriptionInput[]
    upsert?: PaymentTransactionUpsertWithWhereUniqueWithoutSubscriptionInput | PaymentTransactionUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: PaymentTransactionCreateManySubscriptionInputEnvelope
    set?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    disconnect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    delete?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    update?: PaymentTransactionUpdateWithWhereUniqueWithoutSubscriptionInput | PaymentTransactionUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: PaymentTransactionUpdateManyWithWhereWithoutSubscriptionInput | PaymentTransactionUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
  }

  export type AdminSubscriptionLogUncheckedUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<AdminSubscriptionLogCreateWithoutSubscriptionInput, AdminSubscriptionLogUncheckedCreateWithoutSubscriptionInput> | AdminSubscriptionLogCreateWithoutSubscriptionInput[] | AdminSubscriptionLogUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: AdminSubscriptionLogCreateOrConnectWithoutSubscriptionInput | AdminSubscriptionLogCreateOrConnectWithoutSubscriptionInput[]
    upsert?: AdminSubscriptionLogUpsertWithWhereUniqueWithoutSubscriptionInput | AdminSubscriptionLogUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: AdminSubscriptionLogCreateManySubscriptionInputEnvelope
    set?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    disconnect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    delete?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    connect?: AdminSubscriptionLogWhereUniqueInput | AdminSubscriptionLogWhereUniqueInput[]
    update?: AdminSubscriptionLogUpdateWithWhereUniqueWithoutSubscriptionInput | AdminSubscriptionLogUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: AdminSubscriptionLogUpdateManyWithWhereWithoutSubscriptionInput | AdminSubscriptionLogUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: AdminSubscriptionLogScalarWhereInput | AdminSubscriptionLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUsageQuotasInput = {
    create?: XOR<UserCreateWithoutUsageQuotasInput, UserUncheckedCreateWithoutUsageQuotasInput>
    connectOrCreate?: UserCreateOrConnectWithoutUsageQuotasInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUsageQuotasNestedInput = {
    create?: XOR<UserCreateWithoutUsageQuotasInput, UserUncheckedCreateWithoutUsageQuotasInput>
    connectOrCreate?: UserCreateOrConnectWithoutUsageQuotasInput
    upsert?: UserUpsertWithoutUsageQuotasInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUsageQuotasInput, UserUpdateWithoutUsageQuotasInput>, UserUncheckedUpdateWithoutUsageQuotasInput>
  }

  export type UserCreateNestedOneWithoutPaymentTransactionsInput = {
    create?: XOR<UserCreateWithoutPaymentTransactionsInput, UserUncheckedCreateWithoutPaymentTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserSubscriptionCreateNestedOneWithoutPaymentTransactionsInput = {
    create?: XOR<UserSubscriptionCreateWithoutPaymentTransactionsInput, UserSubscriptionUncheckedCreateWithoutPaymentTransactionsInput>
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutPaymentTransactionsInput
    connect?: UserSubscriptionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPaymentTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutPaymentTransactionsInput, UserUncheckedCreateWithoutPaymentTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentTransactionsInput
    upsert?: UserUpsertWithoutPaymentTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPaymentTransactionsInput, UserUpdateWithoutPaymentTransactionsInput>, UserUncheckedUpdateWithoutPaymentTransactionsInput>
  }

  export type UserSubscriptionUpdateOneWithoutPaymentTransactionsNestedInput = {
    create?: XOR<UserSubscriptionCreateWithoutPaymentTransactionsInput, UserSubscriptionUncheckedCreateWithoutPaymentTransactionsInput>
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutPaymentTransactionsInput
    upsert?: UserSubscriptionUpsertWithoutPaymentTransactionsInput
    disconnect?: UserSubscriptionWhereInput | boolean
    delete?: UserSubscriptionWhereInput | boolean
    connect?: UserSubscriptionWhereUniqueInput
    update?: XOR<XOR<UserSubscriptionUpdateToOneWithWhereWithoutPaymentTransactionsInput, UserSubscriptionUpdateWithoutPaymentTransactionsInput>, UserSubscriptionUncheckedUpdateWithoutPaymentTransactionsInput>
  }

  export type UserCreateNestedOneWithoutAdminSubscriptionLogsInput = {
    create?: XOR<UserCreateWithoutAdminSubscriptionLogsInput, UserUncheckedCreateWithoutAdminSubscriptionLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminSubscriptionLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTargetAdminLogsInput = {
    create?: XOR<UserCreateWithoutTargetAdminLogsInput, UserUncheckedCreateWithoutTargetAdminLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTargetAdminLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserSubscriptionCreateNestedOneWithoutAdminSubscriptionLogsInput = {
    create?: XOR<UserSubscriptionCreateWithoutAdminSubscriptionLogsInput, UserSubscriptionUncheckedCreateWithoutAdminSubscriptionLogsInput>
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutAdminSubscriptionLogsInput
    connect?: UserSubscriptionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAdminSubscriptionLogsNestedInput = {
    create?: XOR<UserCreateWithoutAdminSubscriptionLogsInput, UserUncheckedCreateWithoutAdminSubscriptionLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminSubscriptionLogsInput
    upsert?: UserUpsertWithoutAdminSubscriptionLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminSubscriptionLogsInput, UserUpdateWithoutAdminSubscriptionLogsInput>, UserUncheckedUpdateWithoutAdminSubscriptionLogsInput>
  }

  export type UserUpdateOneRequiredWithoutTargetAdminLogsNestedInput = {
    create?: XOR<UserCreateWithoutTargetAdminLogsInput, UserUncheckedCreateWithoutTargetAdminLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTargetAdminLogsInput
    upsert?: UserUpsertWithoutTargetAdminLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTargetAdminLogsInput, UserUpdateWithoutTargetAdminLogsInput>, UserUncheckedUpdateWithoutTargetAdminLogsInput>
  }

  export type UserSubscriptionUpdateOneWithoutAdminSubscriptionLogsNestedInput = {
    create?: XOR<UserSubscriptionCreateWithoutAdminSubscriptionLogsInput, UserSubscriptionUncheckedCreateWithoutAdminSubscriptionLogsInput>
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutAdminSubscriptionLogsInput
    upsert?: UserSubscriptionUpsertWithoutAdminSubscriptionLogsInput
    disconnect?: UserSubscriptionWhereInput | boolean
    delete?: UserSubscriptionWhereInput | boolean
    connect?: UserSubscriptionWhereUniqueInput
    update?: XOR<XOR<UserSubscriptionUpdateToOneWithWhereWithoutAdminSubscriptionLogsInput, UserSubscriptionUpdateWithoutAdminSubscriptionLogsInput>, UserSubscriptionUncheckedUpdateWithoutAdminSubscriptionLogsInput>
  }

  export type EmailLogCreatetagsInput = {
    set: string[]
  }

  export type EnumEmailTypeFieldUpdateOperationsInput = {
    set?: $Enums.EmailType
  }

  export type EnumEmailStatusFieldUpdateOperationsInput = {
    set?: $Enums.EmailStatus
  }

  export type EmailLogUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type NestedEnumDifficultyLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.DifficultyLevel | EnumDifficultyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyLevelFilter<$PrismaModel> | $Enums.DifficultyLevel
  }

  export type NestedEnumQuestionSourceFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionSource | EnumQuestionSourceFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionSource[] | ListEnumQuestionSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionSource[] | ListEnumQuestionSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionSourceFilter<$PrismaModel> | $Enums.QuestionSource
  }

  export type NestedEnumQuestionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionStatus | EnumQuestionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionStatusFilter<$PrismaModel> | $Enums.QuestionStatus
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }

  export type NestedEnumDifficultyLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DifficultyLevel | EnumDifficultyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyLevelWithAggregatesFilter<$PrismaModel> | $Enums.DifficultyLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyLevelFilter<$PrismaModel>
    _max?: NestedEnumDifficultyLevelFilter<$PrismaModel>
  }

  export type NestedEnumQuestionSourceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionSource | EnumQuestionSourceFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionSource[] | ListEnumQuestionSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionSource[] | ListEnumQuestionSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionSourceWithAggregatesFilter<$PrismaModel> | $Enums.QuestionSource
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionSourceFilter<$PrismaModel>
    _max?: NestedEnumQuestionSourceFilter<$PrismaModel>
  }

  export type NestedEnumQuestionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionStatus | EnumQuestionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionStatusWithAggregatesFilter<$PrismaModel> | $Enums.QuestionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionStatusFilter<$PrismaModel>
    _max?: NestedEnumQuestionStatusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumEmailTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailType | EnumEmailTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EmailType[] | ListEnumEmailTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailType[] | ListEnumEmailTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailTypeFilter<$PrismaModel> | $Enums.EmailType
  }

  export type NestedEnumEmailStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailStatus | EnumEmailStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailStatusFilter<$PrismaModel> | $Enums.EmailStatus
  }

  export type NestedEnumEmailTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailType | EnumEmailTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EmailType[] | ListEnumEmailTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailType[] | ListEnumEmailTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailTypeWithAggregatesFilter<$PrismaModel> | $Enums.EmailType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmailTypeFilter<$PrismaModel>
    _max?: NestedEnumEmailTypeFilter<$PrismaModel>
  }

  export type NestedEnumEmailStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailStatus | EnumEmailStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmailStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmailStatusFilter<$PrismaModel>
    _max?: NestedEnumEmailStatusFilter<$PrismaModel>
  }

  export type PracticeRecordCreateWithoutUserInput = {
    id?: string
    sessionId: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    questionsCount: number
    correctAnswers: number
    totalTime: number
    score?: number | null
    realQuestions?: number
    aiPoolQuestions?: number
    realtimeQuestions?: number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string
    practiceAnswers?: PracticeAnswerCreateNestedManyWithoutPracticeRecordInput
  }

  export type PracticeRecordUncheckedCreateWithoutUserInput = {
    id?: string
    sessionId: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    questionsCount: number
    correctAnswers: number
    totalTime: number
    score?: number | null
    realQuestions?: number
    aiPoolQuestions?: number
    realtimeQuestions?: number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string
    practiceAnswers?: PracticeAnswerUncheckedCreateNestedManyWithoutPracticeRecordInput
  }

  export type PracticeRecordCreateOrConnectWithoutUserInput = {
    where: PracticeRecordWhereUniqueInput
    create: XOR<PracticeRecordCreateWithoutUserInput, PracticeRecordUncheckedCreateWithoutUserInput>
  }

  export type PracticeRecordCreateManyUserInputEnvelope = {
    data: PracticeRecordCreateManyUserInput | PracticeRecordCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChatSessionCreateWithoutUserInput = {
    id?: string
    title?: string | null
    questionId?: string | null
    questionData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionUncheckedCreateWithoutUserInput = {
    id?: string
    title?: string | null
    questionId?: string | null
    questionData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionCreateOrConnectWithoutUserInput = {
    where: ChatSessionWhereUniqueInput
    create: XOR<ChatSessionCreateWithoutUserInput, ChatSessionUncheckedCreateWithoutUserInput>
  }

  export type ChatSessionCreateManyUserInputEnvelope = {
    data: ChatSessionCreateManyUserInput | ChatSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VocabularyItemCreateWithoutUserInput = {
    id?: string
    word: string
    definition?: string | null
    phonetic?: string | null
    audioUrl?: string | null
    context?: string | null
    meanings?: NullableJsonNullValueInput | InputJsonValue
    language?: string
    reading?: string | null
    jlpt?: VocabularyItemCreatejlptInput | string[]
    commonality?: boolean | null
    sourceType?: string | null
    sourceId?: string | null
    notes?: string | null
    mastered?: boolean
    tags?: VocabularyItemCreatetagsInput | string[]
    definitionLoading?: boolean
    definitionError?: boolean
    nextReviewDate?: Date | string
    reviewCount?: number
    correctCount?: number
    incorrectCount?: number
    easeFactor?: number
    interval?: number
    addedAt?: Date | string
    lastReviewedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type VocabularyItemUncheckedCreateWithoutUserInput = {
    id?: string
    word: string
    definition?: string | null
    phonetic?: string | null
    audioUrl?: string | null
    context?: string | null
    meanings?: NullableJsonNullValueInput | InputJsonValue
    language?: string
    reading?: string | null
    jlpt?: VocabularyItemCreatejlptInput | string[]
    commonality?: boolean | null
    sourceType?: string | null
    sourceId?: string | null
    notes?: string | null
    mastered?: boolean
    tags?: VocabularyItemCreatetagsInput | string[]
    definitionLoading?: boolean
    definitionError?: boolean
    nextReviewDate?: Date | string
    reviewCount?: number
    correctCount?: number
    incorrectCount?: number
    easeFactor?: number
    interval?: number
    addedAt?: Date | string
    lastReviewedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type VocabularyItemCreateOrConnectWithoutUserInput = {
    where: VocabularyItemWhereUniqueInput
    create: XOR<VocabularyItemCreateWithoutUserInput, VocabularyItemUncheckedCreateWithoutUserInput>
  }

  export type VocabularyItemCreateManyUserInputEnvelope = {
    data: VocabularyItemCreateManyUserInput | VocabularyItemCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StudyProgressCreateWithoutUserInput = {
    id?: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    totalQuestions?: number
    correctAnswers?: number
    averageTime?: number
    bestScore?: number | null
    lastPracticeAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type StudyProgressUncheckedCreateWithoutUserInput = {
    id?: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    totalQuestions?: number
    correctAnswers?: number
    averageTime?: number
    bestScore?: number | null
    lastPracticeAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type StudyProgressCreateOrConnectWithoutUserInput = {
    where: StudyProgressWhereUniqueInput
    create: XOR<StudyProgressCreateWithoutUserInput, StudyProgressUncheckedCreateWithoutUserInput>
  }

  export type StudyProgressCreateManyUserInputEnvelope = {
    data: StudyProgressCreateManyUserInput | StudyProgressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSubscriptionCreateWithoutUserInput = {
    id?: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSessionId?: string | null
    status: string
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    canceledAt?: Date | string | null
    lastPaymentAt?: Date | string | null
    nextPaymentAt?: Date | string | null
    isTestAccount?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    plan: SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutSubscriptionInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutSubscriptionInput
  }

  export type UserSubscriptionUncheckedCreateWithoutUserInput = {
    id?: string
    planId: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSessionId?: string | null
    status: string
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    canceledAt?: Date | string | null
    lastPaymentAt?: Date | string | null
    nextPaymentAt?: Date | string | null
    isTestAccount?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutSubscriptionInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type UserSubscriptionCreateOrConnectWithoutUserInput = {
    where: UserSubscriptionWhereUniqueInput
    create: XOR<UserSubscriptionCreateWithoutUserInput, UserSubscriptionUncheckedCreateWithoutUserInput>
  }

  export type UsageQuotaCreateWithoutUserInput = {
    id?: string
    resourceType: string
    usedCount?: number
    limitCount?: number | null
    periodStart?: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsageQuotaUncheckedCreateWithoutUserInput = {
    id?: string
    resourceType: string
    usedCount?: number
    limitCount?: number | null
    periodStart?: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsageQuotaCreateOrConnectWithoutUserInput = {
    where: UsageQuotaWhereUniqueInput
    create: XOR<UsageQuotaCreateWithoutUserInput, UsageQuotaUncheckedCreateWithoutUserInput>
  }

  export type UsageQuotaCreateManyUserInputEnvelope = {
    data: UsageQuotaCreateManyUserInput | UsageQuotaCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PaymentTransactionCreateWithoutUserInput = {
    id?: string
    stripeSessionId?: string | null
    stripePaymentId?: string | null
    amount: number
    currency?: string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    subscription?: UserSubscriptionCreateNestedOneWithoutPaymentTransactionsInput
  }

  export type PaymentTransactionUncheckedCreateWithoutUserInput = {
    id?: string
    stripeSessionId?: string | null
    stripePaymentId?: string | null
    amount: number
    currency?: string
    status: string
    subscriptionId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionCreateOrConnectWithoutUserInput = {
    where: PaymentTransactionWhereUniqueInput
    create: XOR<PaymentTransactionCreateWithoutUserInput, PaymentTransactionUncheckedCreateWithoutUserInput>
  }

  export type PaymentTransactionCreateManyUserInputEnvelope = {
    data: PaymentTransactionCreateManyUserInput | PaymentTransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type QuestionRatingCreateWithoutUserInput = {
    id?: string
    rating: number
    comment?: string | null
    clarity?: number | null
    difficulty?: number | null
    quality?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    question: QuestionCreateNestedOneWithoutRatingsInput
  }

  export type QuestionRatingUncheckedCreateWithoutUserInput = {
    id?: string
    questionId: string
    rating: number
    comment?: string | null
    clarity?: number | null
    difficulty?: number | null
    quality?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionRatingCreateOrConnectWithoutUserInput = {
    where: QuestionRatingWhereUniqueInput
    create: XOR<QuestionRatingCreateWithoutUserInput, QuestionRatingUncheckedCreateWithoutUserInput>
  }

  export type QuestionRatingCreateManyUserInputEnvelope = {
    data: QuestionRatingCreateManyUserInput | QuestionRatingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type QuestionCreateWithoutCreatorInput = {
    id?: string
    type: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    source: $Enums.QuestionSource
    status?: $Enums.QuestionStatus
    content: JsonNullValueInput | InputJsonValue
    correctAnswer: string
    explanation?: string | null
    audioUrl?: string | null
    audioScript?: string | null
    qualityScore?: number
    difficultyScore?: number | null
    averageTime?: number | null
    successRate?: number | null
    usageCount?: number
    ratingCount?: number
    lastUsedAt?: Date | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    practiceAnswers?: PracticeAnswerCreateNestedManyWithoutQuestionInput
    ratings?: QuestionRatingCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutCreatorInput = {
    id?: string
    type: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    source: $Enums.QuestionSource
    status?: $Enums.QuestionStatus
    content: JsonNullValueInput | InputJsonValue
    correctAnswer: string
    explanation?: string | null
    audioUrl?: string | null
    audioScript?: string | null
    qualityScore?: number
    difficultyScore?: number | null
    averageTime?: number | null
    successRate?: number | null
    usageCount?: number
    ratingCount?: number
    lastUsedAt?: Date | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    practiceAnswers?: PracticeAnswerUncheckedCreateNestedManyWithoutQuestionInput
    ratings?: QuestionRatingUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutCreatorInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutCreatorInput, QuestionUncheckedCreateWithoutCreatorInput>
  }

  export type QuestionCreateManyCreatorInputEnvelope = {
    data: QuestionCreateManyCreatorInput | QuestionCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type AdminSubscriptionLogCreateWithoutAdminUserInput = {
    id?: string
    operationType: string
    oldStatus?: string | null
    newStatus?: string | null
    oldTestAccount?: boolean | null
    newTestAccount?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    createdAt?: Date | string
    targetUser: UserCreateNestedOneWithoutTargetAdminLogsInput
    subscription?: UserSubscriptionCreateNestedOneWithoutAdminSubscriptionLogsInput
  }

  export type AdminSubscriptionLogUncheckedCreateWithoutAdminUserInput = {
    id?: string
    targetUserId: string
    subscriptionId?: string | null
    operationType: string
    oldStatus?: string | null
    newStatus?: string | null
    oldTestAccount?: boolean | null
    newTestAccount?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    createdAt?: Date | string
  }

  export type AdminSubscriptionLogCreateOrConnectWithoutAdminUserInput = {
    where: AdminSubscriptionLogWhereUniqueInput
    create: XOR<AdminSubscriptionLogCreateWithoutAdminUserInput, AdminSubscriptionLogUncheckedCreateWithoutAdminUserInput>
  }

  export type AdminSubscriptionLogCreateManyAdminUserInputEnvelope = {
    data: AdminSubscriptionLogCreateManyAdminUserInput | AdminSubscriptionLogCreateManyAdminUserInput[]
    skipDuplicates?: boolean
  }

  export type AdminSubscriptionLogCreateWithoutTargetUserInput = {
    id?: string
    operationType: string
    oldStatus?: string | null
    newStatus?: string | null
    oldTestAccount?: boolean | null
    newTestAccount?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    createdAt?: Date | string
    adminUser: UserCreateNestedOneWithoutAdminSubscriptionLogsInput
    subscription?: UserSubscriptionCreateNestedOneWithoutAdminSubscriptionLogsInput
  }

  export type AdminSubscriptionLogUncheckedCreateWithoutTargetUserInput = {
    id?: string
    adminUserId: string
    subscriptionId?: string | null
    operationType: string
    oldStatus?: string | null
    newStatus?: string | null
    oldTestAccount?: boolean | null
    newTestAccount?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    createdAt?: Date | string
  }

  export type AdminSubscriptionLogCreateOrConnectWithoutTargetUserInput = {
    where: AdminSubscriptionLogWhereUniqueInput
    create: XOR<AdminSubscriptionLogCreateWithoutTargetUserInput, AdminSubscriptionLogUncheckedCreateWithoutTargetUserInput>
  }

  export type AdminSubscriptionLogCreateManyTargetUserInputEnvelope = {
    data: AdminSubscriptionLogCreateManyTargetUserInput | AdminSubscriptionLogCreateManyTargetUserInput[]
    skipDuplicates?: boolean
  }

  export type PracticeRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: PracticeRecordWhereUniqueInput
    update: XOR<PracticeRecordUpdateWithoutUserInput, PracticeRecordUncheckedUpdateWithoutUserInput>
    create: XOR<PracticeRecordCreateWithoutUserInput, PracticeRecordUncheckedCreateWithoutUserInput>
  }

  export type PracticeRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: PracticeRecordWhereUniqueInput
    data: XOR<PracticeRecordUpdateWithoutUserInput, PracticeRecordUncheckedUpdateWithoutUserInput>
  }

  export type PracticeRecordUpdateManyWithWhereWithoutUserInput = {
    where: PracticeRecordScalarWhereInput
    data: XOR<PracticeRecordUpdateManyMutationInput, PracticeRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type PracticeRecordScalarWhereInput = {
    AND?: PracticeRecordScalarWhereInput | PracticeRecordScalarWhereInput[]
    OR?: PracticeRecordScalarWhereInput[]
    NOT?: PracticeRecordScalarWhereInput | PracticeRecordScalarWhereInput[]
    id?: StringFilter<"PracticeRecord"> | string
    userId?: StringFilter<"PracticeRecord"> | string
    sessionId?: StringFilter<"PracticeRecord"> | string
    questionType?: EnumQuestionTypeFilter<"PracticeRecord"> | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFilter<"PracticeRecord"> | $Enums.DifficultyLevel
    questionsCount?: IntFilter<"PracticeRecord"> | number
    correctAnswers?: IntFilter<"PracticeRecord"> | number
    totalTime?: IntFilter<"PracticeRecord"> | number
    score?: IntNullableFilter<"PracticeRecord"> | number | null
    realQuestions?: IntFilter<"PracticeRecord"> | number
    aiPoolQuestions?: IntFilter<"PracticeRecord"> | number
    realtimeQuestions?: IntFilter<"PracticeRecord"> | number
    questions?: JsonNullableFilter<"PracticeRecord">
    completedAt?: DateTimeFilter<"PracticeRecord"> | Date | string
  }

  export type ChatSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatSessionWhereUniqueInput
    update: XOR<ChatSessionUpdateWithoutUserInput, ChatSessionUncheckedUpdateWithoutUserInput>
    create: XOR<ChatSessionCreateWithoutUserInput, ChatSessionUncheckedCreateWithoutUserInput>
  }

  export type ChatSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatSessionWhereUniqueInput
    data: XOR<ChatSessionUpdateWithoutUserInput, ChatSessionUncheckedUpdateWithoutUserInput>
  }

  export type ChatSessionUpdateManyWithWhereWithoutUserInput = {
    where: ChatSessionScalarWhereInput
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatSessionScalarWhereInput = {
    AND?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
    OR?: ChatSessionScalarWhereInput[]
    NOT?: ChatSessionScalarWhereInput | ChatSessionScalarWhereInput[]
    id?: StringFilter<"ChatSession"> | string
    userId?: StringFilter<"ChatSession"> | string
    title?: StringNullableFilter<"ChatSession"> | string | null
    questionId?: StringNullableFilter<"ChatSession"> | string | null
    questionData?: StringNullableFilter<"ChatSession"> | string | null
    createdAt?: DateTimeFilter<"ChatSession"> | Date | string
    updatedAt?: DateTimeFilter<"ChatSession"> | Date | string
  }

  export type VocabularyItemUpsertWithWhereUniqueWithoutUserInput = {
    where: VocabularyItemWhereUniqueInput
    update: XOR<VocabularyItemUpdateWithoutUserInput, VocabularyItemUncheckedUpdateWithoutUserInput>
    create: XOR<VocabularyItemCreateWithoutUserInput, VocabularyItemUncheckedCreateWithoutUserInput>
  }

  export type VocabularyItemUpdateWithWhereUniqueWithoutUserInput = {
    where: VocabularyItemWhereUniqueInput
    data: XOR<VocabularyItemUpdateWithoutUserInput, VocabularyItemUncheckedUpdateWithoutUserInput>
  }

  export type VocabularyItemUpdateManyWithWhereWithoutUserInput = {
    where: VocabularyItemScalarWhereInput
    data: XOR<VocabularyItemUpdateManyMutationInput, VocabularyItemUncheckedUpdateManyWithoutUserInput>
  }

  export type VocabularyItemScalarWhereInput = {
    AND?: VocabularyItemScalarWhereInput | VocabularyItemScalarWhereInput[]
    OR?: VocabularyItemScalarWhereInput[]
    NOT?: VocabularyItemScalarWhereInput | VocabularyItemScalarWhereInput[]
    id?: StringFilter<"VocabularyItem"> | string
    userId?: StringFilter<"VocabularyItem"> | string
    word?: StringFilter<"VocabularyItem"> | string
    definition?: StringNullableFilter<"VocabularyItem"> | string | null
    phonetic?: StringNullableFilter<"VocabularyItem"> | string | null
    audioUrl?: StringNullableFilter<"VocabularyItem"> | string | null
    context?: StringNullableFilter<"VocabularyItem"> | string | null
    meanings?: JsonNullableFilter<"VocabularyItem">
    language?: StringFilter<"VocabularyItem"> | string
    reading?: StringNullableFilter<"VocabularyItem"> | string | null
    jlpt?: StringNullableListFilter<"VocabularyItem">
    commonality?: BoolNullableFilter<"VocabularyItem"> | boolean | null
    sourceType?: StringNullableFilter<"VocabularyItem"> | string | null
    sourceId?: StringNullableFilter<"VocabularyItem"> | string | null
    notes?: StringNullableFilter<"VocabularyItem"> | string | null
    mastered?: BoolFilter<"VocabularyItem"> | boolean
    tags?: StringNullableListFilter<"VocabularyItem">
    definitionLoading?: BoolFilter<"VocabularyItem"> | boolean
    definitionError?: BoolFilter<"VocabularyItem"> | boolean
    nextReviewDate?: DateTimeFilter<"VocabularyItem"> | Date | string
    reviewCount?: IntFilter<"VocabularyItem"> | number
    correctCount?: IntFilter<"VocabularyItem"> | number
    incorrectCount?: IntFilter<"VocabularyItem"> | number
    easeFactor?: FloatFilter<"VocabularyItem"> | number
    interval?: IntFilter<"VocabularyItem"> | number
    addedAt?: DateTimeFilter<"VocabularyItem"> | Date | string
    lastReviewedAt?: DateTimeNullableFilter<"VocabularyItem"> | Date | string | null
    updatedAt?: DateTimeFilter<"VocabularyItem"> | Date | string
  }

  export type StudyProgressUpsertWithWhereUniqueWithoutUserInput = {
    where: StudyProgressWhereUniqueInput
    update: XOR<StudyProgressUpdateWithoutUserInput, StudyProgressUncheckedUpdateWithoutUserInput>
    create: XOR<StudyProgressCreateWithoutUserInput, StudyProgressUncheckedCreateWithoutUserInput>
  }

  export type StudyProgressUpdateWithWhereUniqueWithoutUserInput = {
    where: StudyProgressWhereUniqueInput
    data: XOR<StudyProgressUpdateWithoutUserInput, StudyProgressUncheckedUpdateWithoutUserInput>
  }

  export type StudyProgressUpdateManyWithWhereWithoutUserInput = {
    where: StudyProgressScalarWhereInput
    data: XOR<StudyProgressUpdateManyMutationInput, StudyProgressUncheckedUpdateManyWithoutUserInput>
  }

  export type StudyProgressScalarWhereInput = {
    AND?: StudyProgressScalarWhereInput | StudyProgressScalarWhereInput[]
    OR?: StudyProgressScalarWhereInput[]
    NOT?: StudyProgressScalarWhereInput | StudyProgressScalarWhereInput[]
    id?: StringFilter<"StudyProgress"> | string
    userId?: StringFilter<"StudyProgress"> | string
    questionType?: EnumQuestionTypeFilter<"StudyProgress"> | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFilter<"StudyProgress"> | $Enums.DifficultyLevel
    totalQuestions?: IntFilter<"StudyProgress"> | number
    correctAnswers?: IntFilter<"StudyProgress"> | number
    averageTime?: FloatFilter<"StudyProgress"> | number
    bestScore?: IntNullableFilter<"StudyProgress"> | number | null
    lastPracticeAt?: DateTimeNullableFilter<"StudyProgress"> | Date | string | null
    updatedAt?: DateTimeFilter<"StudyProgress"> | Date | string
  }

  export type UserSubscriptionUpsertWithoutUserInput = {
    update: XOR<UserSubscriptionUpdateWithoutUserInput, UserSubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<UserSubscriptionCreateWithoutUserInput, UserSubscriptionUncheckedCreateWithoutUserInput>
    where?: UserSubscriptionWhereInput
  }

  export type UserSubscriptionUpdateToOneWithWhereWithoutUserInput = {
    where?: UserSubscriptionWhereInput
    data: XOR<UserSubscriptionUpdateWithoutUserInput, UserSubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type UserSubscriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isTestAccount?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutSubscriptionNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutSubscriptionNestedInput
  }

  export type UserSubscriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isTestAccount?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutSubscriptionNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type UsageQuotaUpsertWithWhereUniqueWithoutUserInput = {
    where: UsageQuotaWhereUniqueInput
    update: XOR<UsageQuotaUpdateWithoutUserInput, UsageQuotaUncheckedUpdateWithoutUserInput>
    create: XOR<UsageQuotaCreateWithoutUserInput, UsageQuotaUncheckedCreateWithoutUserInput>
  }

  export type UsageQuotaUpdateWithWhereUniqueWithoutUserInput = {
    where: UsageQuotaWhereUniqueInput
    data: XOR<UsageQuotaUpdateWithoutUserInput, UsageQuotaUncheckedUpdateWithoutUserInput>
  }

  export type UsageQuotaUpdateManyWithWhereWithoutUserInput = {
    where: UsageQuotaScalarWhereInput
    data: XOR<UsageQuotaUpdateManyMutationInput, UsageQuotaUncheckedUpdateManyWithoutUserInput>
  }

  export type UsageQuotaScalarWhereInput = {
    AND?: UsageQuotaScalarWhereInput | UsageQuotaScalarWhereInput[]
    OR?: UsageQuotaScalarWhereInput[]
    NOT?: UsageQuotaScalarWhereInput | UsageQuotaScalarWhereInput[]
    id?: StringFilter<"UsageQuota"> | string
    userId?: StringFilter<"UsageQuota"> | string
    resourceType?: StringFilter<"UsageQuota"> | string
    usedCount?: IntFilter<"UsageQuota"> | number
    limitCount?: IntNullableFilter<"UsageQuota"> | number | null
    periodStart?: DateTimeFilter<"UsageQuota"> | Date | string
    periodEnd?: DateTimeFilter<"UsageQuota"> | Date | string
    createdAt?: DateTimeFilter<"UsageQuota"> | Date | string
    updatedAt?: DateTimeFilter<"UsageQuota"> | Date | string
  }

  export type PaymentTransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: PaymentTransactionWhereUniqueInput
    update: XOR<PaymentTransactionUpdateWithoutUserInput, PaymentTransactionUncheckedUpdateWithoutUserInput>
    create: XOR<PaymentTransactionCreateWithoutUserInput, PaymentTransactionUncheckedCreateWithoutUserInput>
  }

  export type PaymentTransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: PaymentTransactionWhereUniqueInput
    data: XOR<PaymentTransactionUpdateWithoutUserInput, PaymentTransactionUncheckedUpdateWithoutUserInput>
  }

  export type PaymentTransactionUpdateManyWithWhereWithoutUserInput = {
    where: PaymentTransactionScalarWhereInput
    data: XOR<PaymentTransactionUpdateManyMutationInput, PaymentTransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type PaymentTransactionScalarWhereInput = {
    AND?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
    OR?: PaymentTransactionScalarWhereInput[]
    NOT?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
    id?: StringFilter<"PaymentTransaction"> | string
    userId?: StringFilter<"PaymentTransaction"> | string
    stripeSessionId?: StringNullableFilter<"PaymentTransaction"> | string | null
    stripePaymentId?: StringNullableFilter<"PaymentTransaction"> | string | null
    amount?: IntFilter<"PaymentTransaction"> | number
    currency?: StringFilter<"PaymentTransaction"> | string
    status?: StringFilter<"PaymentTransaction"> | string
    subscriptionId?: StringNullableFilter<"PaymentTransaction"> | string | null
    metadata?: JsonNullableFilter<"PaymentTransaction">
    createdAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
  }

  export type QuestionRatingUpsertWithWhereUniqueWithoutUserInput = {
    where: QuestionRatingWhereUniqueInput
    update: XOR<QuestionRatingUpdateWithoutUserInput, QuestionRatingUncheckedUpdateWithoutUserInput>
    create: XOR<QuestionRatingCreateWithoutUserInput, QuestionRatingUncheckedCreateWithoutUserInput>
  }

  export type QuestionRatingUpdateWithWhereUniqueWithoutUserInput = {
    where: QuestionRatingWhereUniqueInput
    data: XOR<QuestionRatingUpdateWithoutUserInput, QuestionRatingUncheckedUpdateWithoutUserInput>
  }

  export type QuestionRatingUpdateManyWithWhereWithoutUserInput = {
    where: QuestionRatingScalarWhereInput
    data: XOR<QuestionRatingUpdateManyMutationInput, QuestionRatingUncheckedUpdateManyWithoutUserInput>
  }

  export type QuestionRatingScalarWhereInput = {
    AND?: QuestionRatingScalarWhereInput | QuestionRatingScalarWhereInput[]
    OR?: QuestionRatingScalarWhereInput[]
    NOT?: QuestionRatingScalarWhereInput | QuestionRatingScalarWhereInput[]
    id?: StringFilter<"QuestionRating"> | string
    userId?: StringFilter<"QuestionRating"> | string
    questionId?: StringFilter<"QuestionRating"> | string
    rating?: IntFilter<"QuestionRating"> | number
    comment?: StringNullableFilter<"QuestionRating"> | string | null
    clarity?: IntNullableFilter<"QuestionRating"> | number | null
    difficulty?: IntNullableFilter<"QuestionRating"> | number | null
    quality?: IntNullableFilter<"QuestionRating"> | number | null
    createdAt?: DateTimeFilter<"QuestionRating"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionRating"> | Date | string
  }

  export type QuestionUpsertWithWhereUniqueWithoutCreatorInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutCreatorInput, QuestionUncheckedUpdateWithoutCreatorInput>
    create: XOR<QuestionCreateWithoutCreatorInput, QuestionUncheckedCreateWithoutCreatorInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutCreatorInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutCreatorInput, QuestionUncheckedUpdateWithoutCreatorInput>
  }

  export type QuestionUpdateManyWithWhereWithoutCreatorInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutCreatorInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: StringFilter<"Question"> | string
    type?: EnumQuestionTypeFilter<"Question"> | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFilter<"Question"> | $Enums.DifficultyLevel
    source?: EnumQuestionSourceFilter<"Question"> | $Enums.QuestionSource
    status?: EnumQuestionStatusFilter<"Question"> | $Enums.QuestionStatus
    content?: JsonFilter<"Question">
    correctAnswer?: StringFilter<"Question"> | string
    explanation?: StringNullableFilter<"Question"> | string | null
    audioUrl?: StringNullableFilter<"Question"> | string | null
    audioScript?: StringNullableFilter<"Question"> | string | null
    qualityScore?: FloatFilter<"Question"> | number
    difficultyScore?: FloatNullableFilter<"Question"> | number | null
    averageTime?: IntNullableFilter<"Question"> | number | null
    successRate?: FloatNullableFilter<"Question"> | number | null
    usageCount?: IntFilter<"Question"> | number
    ratingCount?: IntFilter<"Question"> | number
    lastUsedAt?: DateTimeNullableFilter<"Question"> | Date | string | null
    createdBy?: StringNullableFilter<"Question"> | string | null
    aiGeneratedData?: JsonNullableFilter<"Question">
    reviewedBy?: StringNullableFilter<"Question"> | string | null
    reviewedAt?: DateTimeNullableFilter<"Question"> | Date | string | null
    reviewNotes?: StringNullableFilter<"Question"> | string | null
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
  }

  export type AdminSubscriptionLogUpsertWithWhereUniqueWithoutAdminUserInput = {
    where: AdminSubscriptionLogWhereUniqueInput
    update: XOR<AdminSubscriptionLogUpdateWithoutAdminUserInput, AdminSubscriptionLogUncheckedUpdateWithoutAdminUserInput>
    create: XOR<AdminSubscriptionLogCreateWithoutAdminUserInput, AdminSubscriptionLogUncheckedCreateWithoutAdminUserInput>
  }

  export type AdminSubscriptionLogUpdateWithWhereUniqueWithoutAdminUserInput = {
    where: AdminSubscriptionLogWhereUniqueInput
    data: XOR<AdminSubscriptionLogUpdateWithoutAdminUserInput, AdminSubscriptionLogUncheckedUpdateWithoutAdminUserInput>
  }

  export type AdminSubscriptionLogUpdateManyWithWhereWithoutAdminUserInput = {
    where: AdminSubscriptionLogScalarWhereInput
    data: XOR<AdminSubscriptionLogUpdateManyMutationInput, AdminSubscriptionLogUncheckedUpdateManyWithoutAdminUserInput>
  }

  export type AdminSubscriptionLogScalarWhereInput = {
    AND?: AdminSubscriptionLogScalarWhereInput | AdminSubscriptionLogScalarWhereInput[]
    OR?: AdminSubscriptionLogScalarWhereInput[]
    NOT?: AdminSubscriptionLogScalarWhereInput | AdminSubscriptionLogScalarWhereInput[]
    id?: StringFilter<"AdminSubscriptionLog"> | string
    adminUserId?: StringFilter<"AdminSubscriptionLog"> | string
    targetUserId?: StringFilter<"AdminSubscriptionLog"> | string
    subscriptionId?: StringNullableFilter<"AdminSubscriptionLog"> | string | null
    operationType?: StringFilter<"AdminSubscriptionLog"> | string
    oldStatus?: StringNullableFilter<"AdminSubscriptionLog"> | string | null
    newStatus?: StringNullableFilter<"AdminSubscriptionLog"> | string | null
    oldTestAccount?: BoolNullableFilter<"AdminSubscriptionLog"> | boolean | null
    newTestAccount?: BoolNullableFilter<"AdminSubscriptionLog"> | boolean | null
    metadata?: JsonNullableFilter<"AdminSubscriptionLog">
    reason?: StringNullableFilter<"AdminSubscriptionLog"> | string | null
    createdAt?: DateTimeFilter<"AdminSubscriptionLog"> | Date | string
  }

  export type AdminSubscriptionLogUpsertWithWhereUniqueWithoutTargetUserInput = {
    where: AdminSubscriptionLogWhereUniqueInput
    update: XOR<AdminSubscriptionLogUpdateWithoutTargetUserInput, AdminSubscriptionLogUncheckedUpdateWithoutTargetUserInput>
    create: XOR<AdminSubscriptionLogCreateWithoutTargetUserInput, AdminSubscriptionLogUncheckedCreateWithoutTargetUserInput>
  }

  export type AdminSubscriptionLogUpdateWithWhereUniqueWithoutTargetUserInput = {
    where: AdminSubscriptionLogWhereUniqueInput
    data: XOR<AdminSubscriptionLogUpdateWithoutTargetUserInput, AdminSubscriptionLogUncheckedUpdateWithoutTargetUserInput>
  }

  export type AdminSubscriptionLogUpdateManyWithWhereWithoutTargetUserInput = {
    where: AdminSubscriptionLogScalarWhereInput
    data: XOR<AdminSubscriptionLogUpdateManyMutationInput, AdminSubscriptionLogUncheckedUpdateManyWithoutTargetUserInput>
  }

  export type UserCreateWithoutCreatedQuestionsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingCreateNestedManyWithoutUserInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutCreatedQuestionsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordUncheckedCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemUncheckedCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressUncheckedCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionUncheckedCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaUncheckedCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingUncheckedCreateNestedManyWithoutUserInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutCreatedQuestionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedQuestionsInput, UserUncheckedCreateWithoutCreatedQuestionsInput>
  }

  export type PracticeAnswerCreateWithoutQuestionInput = {
    id?: string
    userId: string
    userAnswer: string
    isCorrect: boolean
    timeSpent: number
    createdAt?: Date | string
    practiceRecord: PracticeRecordCreateNestedOneWithoutPracticeAnswersInput
  }

  export type PracticeAnswerUncheckedCreateWithoutQuestionInput = {
    id?: string
    userId: string
    userAnswer: string
    isCorrect: boolean
    timeSpent: number
    practiceRecordId: string
    createdAt?: Date | string
  }

  export type PracticeAnswerCreateOrConnectWithoutQuestionInput = {
    where: PracticeAnswerWhereUniqueInput
    create: XOR<PracticeAnswerCreateWithoutQuestionInput, PracticeAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type PracticeAnswerCreateManyQuestionInputEnvelope = {
    data: PracticeAnswerCreateManyQuestionInput | PracticeAnswerCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionRatingCreateWithoutQuestionInput = {
    id?: string
    rating: number
    comment?: string | null
    clarity?: number | null
    difficulty?: number | null
    quality?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutQuestionRatingsInput
  }

  export type QuestionRatingUncheckedCreateWithoutQuestionInput = {
    id?: string
    userId: string
    rating: number
    comment?: string | null
    clarity?: number | null
    difficulty?: number | null
    quality?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionRatingCreateOrConnectWithoutQuestionInput = {
    where: QuestionRatingWhereUniqueInput
    create: XOR<QuestionRatingCreateWithoutQuestionInput, QuestionRatingUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionRatingCreateManyQuestionInputEnvelope = {
    data: QuestionRatingCreateManyQuestionInput | QuestionRatingCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedQuestionsInput = {
    update: XOR<UserUpdateWithoutCreatedQuestionsInput, UserUncheckedUpdateWithoutCreatedQuestionsInput>
    create: XOR<UserCreateWithoutCreatedQuestionsInput, UserUncheckedCreateWithoutCreatedQuestionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedQuestionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedQuestionsInput, UserUncheckedUpdateWithoutCreatedQuestionsInput>
  }

  export type UserUpdateWithoutCreatedQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUpdateManyWithoutUserNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUncheckedUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUncheckedUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUncheckedUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUncheckedUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUncheckedUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUncheckedUpdateManyWithoutUserNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type PracticeAnswerUpsertWithWhereUniqueWithoutQuestionInput = {
    where: PracticeAnswerWhereUniqueInput
    update: XOR<PracticeAnswerUpdateWithoutQuestionInput, PracticeAnswerUncheckedUpdateWithoutQuestionInput>
    create: XOR<PracticeAnswerCreateWithoutQuestionInput, PracticeAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type PracticeAnswerUpdateWithWhereUniqueWithoutQuestionInput = {
    where: PracticeAnswerWhereUniqueInput
    data: XOR<PracticeAnswerUpdateWithoutQuestionInput, PracticeAnswerUncheckedUpdateWithoutQuestionInput>
  }

  export type PracticeAnswerUpdateManyWithWhereWithoutQuestionInput = {
    where: PracticeAnswerScalarWhereInput
    data: XOR<PracticeAnswerUpdateManyMutationInput, PracticeAnswerUncheckedUpdateManyWithoutQuestionInput>
  }

  export type PracticeAnswerScalarWhereInput = {
    AND?: PracticeAnswerScalarWhereInput | PracticeAnswerScalarWhereInput[]
    OR?: PracticeAnswerScalarWhereInput[]
    NOT?: PracticeAnswerScalarWhereInput | PracticeAnswerScalarWhereInput[]
    id?: StringFilter<"PracticeAnswer"> | string
    userId?: StringFilter<"PracticeAnswer"> | string
    questionId?: StringFilter<"PracticeAnswer"> | string
    userAnswer?: StringFilter<"PracticeAnswer"> | string
    isCorrect?: BoolFilter<"PracticeAnswer"> | boolean
    timeSpent?: IntFilter<"PracticeAnswer"> | number
    practiceRecordId?: StringFilter<"PracticeAnswer"> | string
    createdAt?: DateTimeFilter<"PracticeAnswer"> | Date | string
  }

  export type QuestionRatingUpsertWithWhereUniqueWithoutQuestionInput = {
    where: QuestionRatingWhereUniqueInput
    update: XOR<QuestionRatingUpdateWithoutQuestionInput, QuestionRatingUncheckedUpdateWithoutQuestionInput>
    create: XOR<QuestionRatingCreateWithoutQuestionInput, QuestionRatingUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionRatingUpdateWithWhereUniqueWithoutQuestionInput = {
    where: QuestionRatingWhereUniqueInput
    data: XOR<QuestionRatingUpdateWithoutQuestionInput, QuestionRatingUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionRatingUpdateManyWithWhereWithoutQuestionInput = {
    where: QuestionRatingScalarWhereInput
    data: XOR<QuestionRatingUpdateManyMutationInput, QuestionRatingUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuestionCreateWithoutPracticeAnswersInput = {
    id?: string
    type: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    source: $Enums.QuestionSource
    status?: $Enums.QuestionStatus
    content: JsonNullValueInput | InputJsonValue
    correctAnswer: string
    explanation?: string | null
    audioUrl?: string | null
    audioScript?: string | null
    qualityScore?: number
    difficultyScore?: number | null
    averageTime?: number | null
    successRate?: number | null
    usageCount?: number
    ratingCount?: number
    lastUsedAt?: Date | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedQuestionsInput
    ratings?: QuestionRatingCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutPracticeAnswersInput = {
    id?: string
    type: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    source: $Enums.QuestionSource
    status?: $Enums.QuestionStatus
    content: JsonNullValueInput | InputJsonValue
    correctAnswer: string
    explanation?: string | null
    audioUrl?: string | null
    audioScript?: string | null
    qualityScore?: number
    difficultyScore?: number | null
    averageTime?: number | null
    successRate?: number | null
    usageCount?: number
    ratingCount?: number
    lastUsedAt?: Date | string | null
    createdBy?: string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: QuestionRatingUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutPracticeAnswersInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutPracticeAnswersInput, QuestionUncheckedCreateWithoutPracticeAnswersInput>
  }

  export type PracticeRecordCreateWithoutPracticeAnswersInput = {
    id?: string
    sessionId: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    questionsCount: number
    correctAnswers: number
    totalTime: number
    score?: number | null
    realQuestions?: number
    aiPoolQuestions?: number
    realtimeQuestions?: number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string
    user: UserCreateNestedOneWithoutPracticeRecordsInput
  }

  export type PracticeRecordUncheckedCreateWithoutPracticeAnswersInput = {
    id?: string
    userId: string
    sessionId: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    questionsCount: number
    correctAnswers: number
    totalTime: number
    score?: number | null
    realQuestions?: number
    aiPoolQuestions?: number
    realtimeQuestions?: number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string
  }

  export type PracticeRecordCreateOrConnectWithoutPracticeAnswersInput = {
    where: PracticeRecordWhereUniqueInput
    create: XOR<PracticeRecordCreateWithoutPracticeAnswersInput, PracticeRecordUncheckedCreateWithoutPracticeAnswersInput>
  }

  export type QuestionUpsertWithoutPracticeAnswersInput = {
    update: XOR<QuestionUpdateWithoutPracticeAnswersInput, QuestionUncheckedUpdateWithoutPracticeAnswersInput>
    create: XOR<QuestionCreateWithoutPracticeAnswersInput, QuestionUncheckedCreateWithoutPracticeAnswersInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutPracticeAnswersInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutPracticeAnswersInput, QuestionUncheckedUpdateWithoutPracticeAnswersInput>
  }

  export type QuestionUpdateWithoutPracticeAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    source?: EnumQuestionSourceFieldUpdateOperationsInput | $Enums.QuestionSource
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    content?: JsonNullValueInput | InputJsonValue
    correctAnswer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioScript?: NullableStringFieldUpdateOperationsInput | string | null
    qualityScore?: FloatFieldUpdateOperationsInput | number
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    averageTime?: NullableIntFieldUpdateOperationsInput | number | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedQuestionsNestedInput
    ratings?: QuestionRatingUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutPracticeAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    source?: EnumQuestionSourceFieldUpdateOperationsInput | $Enums.QuestionSource
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    content?: JsonNullValueInput | InputJsonValue
    correctAnswer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioScript?: NullableStringFieldUpdateOperationsInput | string | null
    qualityScore?: FloatFieldUpdateOperationsInput | number
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    averageTime?: NullableIntFieldUpdateOperationsInput | number | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: QuestionRatingUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type PracticeRecordUpsertWithoutPracticeAnswersInput = {
    update: XOR<PracticeRecordUpdateWithoutPracticeAnswersInput, PracticeRecordUncheckedUpdateWithoutPracticeAnswersInput>
    create: XOR<PracticeRecordCreateWithoutPracticeAnswersInput, PracticeRecordUncheckedCreateWithoutPracticeAnswersInput>
    where?: PracticeRecordWhereInput
  }

  export type PracticeRecordUpdateToOneWithWhereWithoutPracticeAnswersInput = {
    where?: PracticeRecordWhereInput
    data: XOR<PracticeRecordUpdateWithoutPracticeAnswersInput, PracticeRecordUncheckedUpdateWithoutPracticeAnswersInput>
  }

  export type PracticeRecordUpdateWithoutPracticeAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    questionsCount?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    totalTime?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    realQuestions?: IntFieldUpdateOperationsInput | number
    aiPoolQuestions?: IntFieldUpdateOperationsInput | number
    realtimeQuestions?: IntFieldUpdateOperationsInput | number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPracticeRecordsNestedInput
  }

  export type PracticeRecordUncheckedUpdateWithoutPracticeAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    questionsCount?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    totalTime?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    realQuestions?: IntFieldUpdateOperationsInput | number
    aiPoolQuestions?: IntFieldUpdateOperationsInput | number
    realtimeQuestions?: IntFieldUpdateOperationsInput | number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutQuestionRatingsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutQuestionRatingsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordUncheckedCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemUncheckedCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressUncheckedCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionUncheckedCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaUncheckedCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionUncheckedCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutQuestionRatingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuestionRatingsInput, UserUncheckedCreateWithoutQuestionRatingsInput>
  }

  export type QuestionCreateWithoutRatingsInput = {
    id?: string
    type: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    source: $Enums.QuestionSource
    status?: $Enums.QuestionStatus
    content: JsonNullValueInput | InputJsonValue
    correctAnswer: string
    explanation?: string | null
    audioUrl?: string | null
    audioScript?: string | null
    qualityScore?: number
    difficultyScore?: number | null
    averageTime?: number | null
    successRate?: number | null
    usageCount?: number
    ratingCount?: number
    lastUsedAt?: Date | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedQuestionsInput
    practiceAnswers?: PracticeAnswerCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutRatingsInput = {
    id?: string
    type: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    source: $Enums.QuestionSource
    status?: $Enums.QuestionStatus
    content: JsonNullValueInput | InputJsonValue
    correctAnswer: string
    explanation?: string | null
    audioUrl?: string | null
    audioScript?: string | null
    qualityScore?: number
    difficultyScore?: number | null
    averageTime?: number | null
    successRate?: number | null
    usageCount?: number
    ratingCount?: number
    lastUsedAt?: Date | string | null
    createdBy?: string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    practiceAnswers?: PracticeAnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutRatingsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutRatingsInput, QuestionUncheckedCreateWithoutRatingsInput>
  }

  export type UserUpsertWithoutQuestionRatingsInput = {
    update: XOR<UserUpdateWithoutQuestionRatingsInput, UserUncheckedUpdateWithoutQuestionRatingsInput>
    create: XOR<UserCreateWithoutQuestionRatingsInput, UserUncheckedCreateWithoutQuestionRatingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuestionRatingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuestionRatingsInput, UserUncheckedUpdateWithoutQuestionRatingsInput>
  }

  export type UserUpdateWithoutQuestionRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQuestionRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUncheckedUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUncheckedUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUncheckedUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUncheckedUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUncheckedUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUncheckedUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type QuestionUpsertWithoutRatingsInput = {
    update: XOR<QuestionUpdateWithoutRatingsInput, QuestionUncheckedUpdateWithoutRatingsInput>
    create: XOR<QuestionCreateWithoutRatingsInput, QuestionUncheckedCreateWithoutRatingsInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutRatingsInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutRatingsInput, QuestionUncheckedUpdateWithoutRatingsInput>
  }

  export type QuestionUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    source?: EnumQuestionSourceFieldUpdateOperationsInput | $Enums.QuestionSource
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    content?: JsonNullValueInput | InputJsonValue
    correctAnswer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioScript?: NullableStringFieldUpdateOperationsInput | string | null
    qualityScore?: FloatFieldUpdateOperationsInput | number
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    averageTime?: NullableIntFieldUpdateOperationsInput | number | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedQuestionsNestedInput
    practiceAnswers?: PracticeAnswerUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    source?: EnumQuestionSourceFieldUpdateOperationsInput | $Enums.QuestionSource
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    content?: JsonNullValueInput | InputJsonValue
    correctAnswer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioScript?: NullableStringFieldUpdateOperationsInput | string | null
    qualityScore?: FloatFieldUpdateOperationsInput | number
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    averageTime?: NullableIntFieldUpdateOperationsInput | number | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practiceAnswers?: PracticeAnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type UserCreateWithoutPracticeRecordsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutPracticeRecordsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemUncheckedCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressUncheckedCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionUncheckedCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaUncheckedCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingUncheckedCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionUncheckedCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutPracticeRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPracticeRecordsInput, UserUncheckedCreateWithoutPracticeRecordsInput>
  }

  export type PracticeAnswerCreateWithoutPracticeRecordInput = {
    id?: string
    userId: string
    userAnswer: string
    isCorrect: boolean
    timeSpent: number
    createdAt?: Date | string
    question: QuestionCreateNestedOneWithoutPracticeAnswersInput
  }

  export type PracticeAnswerUncheckedCreateWithoutPracticeRecordInput = {
    id?: string
    userId: string
    questionId: string
    userAnswer: string
    isCorrect: boolean
    timeSpent: number
    createdAt?: Date | string
  }

  export type PracticeAnswerCreateOrConnectWithoutPracticeRecordInput = {
    where: PracticeAnswerWhereUniqueInput
    create: XOR<PracticeAnswerCreateWithoutPracticeRecordInput, PracticeAnswerUncheckedCreateWithoutPracticeRecordInput>
  }

  export type PracticeAnswerCreateManyPracticeRecordInputEnvelope = {
    data: PracticeAnswerCreateManyPracticeRecordInput | PracticeAnswerCreateManyPracticeRecordInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPracticeRecordsInput = {
    update: XOR<UserUpdateWithoutPracticeRecordsInput, UserUncheckedUpdateWithoutPracticeRecordsInput>
    create: XOR<UserCreateWithoutPracticeRecordsInput, UserUncheckedCreateWithoutPracticeRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPracticeRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPracticeRecordsInput, UserUncheckedUpdateWithoutPracticeRecordsInput>
  }

  export type UserUpdateWithoutPracticeRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPracticeRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUncheckedUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUncheckedUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUncheckedUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUncheckedUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUncheckedUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUncheckedUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type PracticeAnswerUpsertWithWhereUniqueWithoutPracticeRecordInput = {
    where: PracticeAnswerWhereUniqueInput
    update: XOR<PracticeAnswerUpdateWithoutPracticeRecordInput, PracticeAnswerUncheckedUpdateWithoutPracticeRecordInput>
    create: XOR<PracticeAnswerCreateWithoutPracticeRecordInput, PracticeAnswerUncheckedCreateWithoutPracticeRecordInput>
  }

  export type PracticeAnswerUpdateWithWhereUniqueWithoutPracticeRecordInput = {
    where: PracticeAnswerWhereUniqueInput
    data: XOR<PracticeAnswerUpdateWithoutPracticeRecordInput, PracticeAnswerUncheckedUpdateWithoutPracticeRecordInput>
  }

  export type PracticeAnswerUpdateManyWithWhereWithoutPracticeRecordInput = {
    where: PracticeAnswerScalarWhereInput
    data: XOR<PracticeAnswerUpdateManyMutationInput, PracticeAnswerUncheckedUpdateManyWithoutPracticeRecordInput>
  }

  export type UserCreateWithoutChatSessionsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutChatSessionsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordUncheckedCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemUncheckedCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressUncheckedCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionUncheckedCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaUncheckedCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingUncheckedCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionUncheckedCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutChatSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatSessionsInput, UserUncheckedCreateWithoutChatSessionsInput>
  }

  export type ChatMessageCreateWithoutSessionInput = {
    id?: string
    role: string
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ChatMessageUncheckedCreateWithoutSessionInput = {
    id?: string
    role: string
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ChatMessageCreateOrConnectWithoutSessionInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput>
  }

  export type ChatMessageCreateManySessionInputEnvelope = {
    data: ChatMessageCreateManySessionInput | ChatMessageCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutChatSessionsInput = {
    update: XOR<UserUpdateWithoutChatSessionsInput, UserUncheckedUpdateWithoutChatSessionsInput>
    create: XOR<UserCreateWithoutChatSessionsInput, UserUncheckedCreateWithoutChatSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatSessionsInput, UserUncheckedUpdateWithoutChatSessionsInput>
  }

  export type UserUpdateWithoutChatSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChatSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUncheckedUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUncheckedUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUncheckedUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUncheckedUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUncheckedUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUncheckedUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUncheckedUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutSessionInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutSessionInput, ChatMessageUncheckedUpdateWithoutSessionInput>
    create: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutSessionInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutSessionInput, ChatMessageUncheckedUpdateWithoutSessionInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutSessionInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutSessionInput>
  }

  export type ChatMessageScalarWhereInput = {
    AND?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    OR?: ChatMessageScalarWhereInput[]
    NOT?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    sessionId?: StringFilter<"ChatMessage"> | string
    role?: StringFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    metadata?: JsonNullableFilter<"ChatMessage">
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
  }

  export type ChatSessionCreateWithoutMessagesInput = {
    id?: string
    title?: string | null
    questionId?: string | null
    questionData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutChatSessionsInput
  }

  export type ChatSessionUncheckedCreateWithoutMessagesInput = {
    id?: string
    userId: string
    title?: string | null
    questionId?: string | null
    questionData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatSessionCreateOrConnectWithoutMessagesInput = {
    where: ChatSessionWhereUniqueInput
    create: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
  }

  export type ChatSessionUpsertWithoutMessagesInput = {
    update: XOR<ChatSessionUpdateWithoutMessagesInput, ChatSessionUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    where?: ChatSessionWhereInput
  }

  export type ChatSessionUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatSessionWhereInput
    data: XOR<ChatSessionUpdateWithoutMessagesInput, ChatSessionUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatSessionUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    questionId?: NullableStringFieldUpdateOperationsInput | string | null
    questionData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatSessionsNestedInput
  }

  export type ChatSessionUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    questionId?: NullableStringFieldUpdateOperationsInput | string | null
    questionData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutVocabularyItemsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutVocabularyItemsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordUncheckedCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressUncheckedCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionUncheckedCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaUncheckedCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingUncheckedCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionUncheckedCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutVocabularyItemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVocabularyItemsInput, UserUncheckedCreateWithoutVocabularyItemsInput>
  }

  export type UserUpsertWithoutVocabularyItemsInput = {
    update: XOR<UserUpdateWithoutVocabularyItemsInput, UserUncheckedUpdateWithoutVocabularyItemsInput>
    create: XOR<UserCreateWithoutVocabularyItemsInput, UserUncheckedCreateWithoutVocabularyItemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVocabularyItemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVocabularyItemsInput, UserUncheckedUpdateWithoutVocabularyItemsInput>
  }

  export type UserUpdateWithoutVocabularyItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVocabularyItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUncheckedUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUncheckedUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUncheckedUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUncheckedUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUncheckedUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUncheckedUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type UserCreateWithoutStudyProgressInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutStudyProgressInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordUncheckedCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemUncheckedCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionUncheckedCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaUncheckedCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingUncheckedCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionUncheckedCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutStudyProgressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudyProgressInput, UserUncheckedCreateWithoutStudyProgressInput>
  }

  export type UserUpsertWithoutStudyProgressInput = {
    update: XOR<UserUpdateWithoutStudyProgressInput, UserUncheckedUpdateWithoutStudyProgressInput>
    create: XOR<UserCreateWithoutStudyProgressInput, UserUncheckedCreateWithoutStudyProgressInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudyProgressInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudyProgressInput, UserUncheckedUpdateWithoutStudyProgressInput>
  }

  export type UserUpdateWithoutStudyProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStudyProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUncheckedUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUncheckedUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUncheckedUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUncheckedUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUncheckedUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUncheckedUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type UserSubscriptionCreateWithoutPlanInput = {
    id?: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSessionId?: string | null
    status: string
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    canceledAt?: Date | string | null
    lastPaymentAt?: Date | string | null
    nextPaymentAt?: Date | string | null
    isTestAccount?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubscriptionInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutSubscriptionInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutSubscriptionInput
  }

  export type UserSubscriptionUncheckedCreateWithoutPlanInput = {
    id?: string
    userId: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSessionId?: string | null
    status: string
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    canceledAt?: Date | string | null
    lastPaymentAt?: Date | string | null
    nextPaymentAt?: Date | string | null
    isTestAccount?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutSubscriptionInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type UserSubscriptionCreateOrConnectWithoutPlanInput = {
    where: UserSubscriptionWhereUniqueInput
    create: XOR<UserSubscriptionCreateWithoutPlanInput, UserSubscriptionUncheckedCreateWithoutPlanInput>
  }

  export type UserSubscriptionCreateManyPlanInputEnvelope = {
    data: UserSubscriptionCreateManyPlanInput | UserSubscriptionCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type UserSubscriptionUpsertWithWhereUniqueWithoutPlanInput = {
    where: UserSubscriptionWhereUniqueInput
    update: XOR<UserSubscriptionUpdateWithoutPlanInput, UserSubscriptionUncheckedUpdateWithoutPlanInput>
    create: XOR<UserSubscriptionCreateWithoutPlanInput, UserSubscriptionUncheckedCreateWithoutPlanInput>
  }

  export type UserSubscriptionUpdateWithWhereUniqueWithoutPlanInput = {
    where: UserSubscriptionWhereUniqueInput
    data: XOR<UserSubscriptionUpdateWithoutPlanInput, UserSubscriptionUncheckedUpdateWithoutPlanInput>
  }

  export type UserSubscriptionUpdateManyWithWhereWithoutPlanInput = {
    where: UserSubscriptionScalarWhereInput
    data: XOR<UserSubscriptionUpdateManyMutationInput, UserSubscriptionUncheckedUpdateManyWithoutPlanInput>
  }

  export type UserSubscriptionScalarWhereInput = {
    AND?: UserSubscriptionScalarWhereInput | UserSubscriptionScalarWhereInput[]
    OR?: UserSubscriptionScalarWhereInput[]
    NOT?: UserSubscriptionScalarWhereInput | UserSubscriptionScalarWhereInput[]
    id?: StringFilter<"UserSubscription"> | string
    userId?: StringFilter<"UserSubscription"> | string
    planId?: StringFilter<"UserSubscription"> | string
    stripeCustomerId?: StringNullableFilter<"UserSubscription"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"UserSubscription"> | string | null
    stripeSessionId?: StringNullableFilter<"UserSubscription"> | string | null
    status?: StringFilter<"UserSubscription"> | string
    trialStart?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    trialEnd?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    currentPeriodStart?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    currentPeriodEnd?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    cancelAtPeriodEnd?: BoolFilter<"UserSubscription"> | boolean
    canceledAt?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    lastPaymentAt?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    nextPaymentAt?: DateTimeNullableFilter<"UserSubscription"> | Date | string | null
    isTestAccount?: BoolFilter<"UserSubscription"> | boolean
    createdAt?: DateTimeFilter<"UserSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"UserSubscription"> | Date | string
  }

  export type UserCreateWithoutSubscriptionInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressCreateNestedManyWithoutUserInput
    usageQuotas?: UsageQuotaCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordUncheckedCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemUncheckedCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressUncheckedCreateNestedManyWithoutUserInput
    usageQuotas?: UsageQuotaUncheckedCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingUncheckedCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionUncheckedCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutSubscriptionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
  }

  export type SubscriptionPlanCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    nameJp?: string | null
    priceCents: number
    currency?: string
    interval: string
    intervalCount?: number
    stripePriceId?: string | null
    stripeProductId?: string | null
    features: JsonNullValueInput | InputJsonValue
    dailyPracticeLimit?: number | null
    dailyAiChatLimit?: number | null
    maxVocabularyWords?: number | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    nameJp?: string | null
    priceCents: number
    currency?: string
    interval: string
    intervalCount?: number
    stripePriceId?: string | null
    stripeProductId?: string | null
    features: JsonNullValueInput | InputJsonValue
    dailyPracticeLimit?: number | null
    dailyAiChatLimit?: number | null
    maxVocabularyWords?: number | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionPlanCreateOrConnectWithoutSubscriptionsInput = {
    where: SubscriptionPlanWhereUniqueInput
    create: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
  }

  export type PaymentTransactionCreateWithoutSubscriptionInput = {
    id?: string
    stripeSessionId?: string | null
    stripePaymentId?: string | null
    amount: number
    currency?: string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPaymentTransactionsInput
  }

  export type PaymentTransactionUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    userId: string
    stripeSessionId?: string | null
    stripePaymentId?: string | null
    amount: number
    currency?: string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionCreateOrConnectWithoutSubscriptionInput = {
    where: PaymentTransactionWhereUniqueInput
    create: XOR<PaymentTransactionCreateWithoutSubscriptionInput, PaymentTransactionUncheckedCreateWithoutSubscriptionInput>
  }

  export type PaymentTransactionCreateManySubscriptionInputEnvelope = {
    data: PaymentTransactionCreateManySubscriptionInput | PaymentTransactionCreateManySubscriptionInput[]
    skipDuplicates?: boolean
  }

  export type AdminSubscriptionLogCreateWithoutSubscriptionInput = {
    id?: string
    operationType: string
    oldStatus?: string | null
    newStatus?: string | null
    oldTestAccount?: boolean | null
    newTestAccount?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    createdAt?: Date | string
    adminUser: UserCreateNestedOneWithoutAdminSubscriptionLogsInput
    targetUser: UserCreateNestedOneWithoutTargetAdminLogsInput
  }

  export type AdminSubscriptionLogUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    adminUserId: string
    targetUserId: string
    operationType: string
    oldStatus?: string | null
    newStatus?: string | null
    oldTestAccount?: boolean | null
    newTestAccount?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    createdAt?: Date | string
  }

  export type AdminSubscriptionLogCreateOrConnectWithoutSubscriptionInput = {
    where: AdminSubscriptionLogWhereUniqueInput
    create: XOR<AdminSubscriptionLogCreateWithoutSubscriptionInput, AdminSubscriptionLogUncheckedCreateWithoutSubscriptionInput>
  }

  export type AdminSubscriptionLogCreateManySubscriptionInputEnvelope = {
    data: AdminSubscriptionLogCreateManySubscriptionInput | AdminSubscriptionLogCreateManySubscriptionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSubscriptionInput = {
    update: XOR<UserUpdateWithoutSubscriptionInput, UserUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubscriptionInput, UserUncheckedUpdateWithoutSubscriptionInput>
  }

  export type UserUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUpdateManyWithoutUserNestedInput
    usageQuotas?: UsageQuotaUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUncheckedUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUncheckedUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUncheckedUpdateManyWithoutUserNestedInput
    usageQuotas?: UsageQuotaUncheckedUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUncheckedUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUncheckedUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type SubscriptionPlanUpsertWithoutSubscriptionsInput = {
    update: XOR<SubscriptionPlanUpdateWithoutSubscriptionsInput, SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
    where?: SubscriptionPlanWhereInput
  }

  export type SubscriptionPlanUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: SubscriptionPlanWhereInput
    data: XOR<SubscriptionPlanUpdateWithoutSubscriptionsInput, SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type SubscriptionPlanUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameJp?: NullableStringFieldUpdateOperationsInput | string | null
    priceCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    interval?: StringFieldUpdateOperationsInput | string
    intervalCount?: IntFieldUpdateOperationsInput | number
    stripePriceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeProductId?: NullableStringFieldUpdateOperationsInput | string | null
    features?: JsonNullValueInput | InputJsonValue
    dailyPracticeLimit?: NullableIntFieldUpdateOperationsInput | number | null
    dailyAiChatLimit?: NullableIntFieldUpdateOperationsInput | number | null
    maxVocabularyWords?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameJp?: NullableStringFieldUpdateOperationsInput | string | null
    priceCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    interval?: StringFieldUpdateOperationsInput | string
    intervalCount?: IntFieldUpdateOperationsInput | number
    stripePriceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeProductId?: NullableStringFieldUpdateOperationsInput | string | null
    features?: JsonNullValueInput | InputJsonValue
    dailyPracticeLimit?: NullableIntFieldUpdateOperationsInput | number | null
    dailyAiChatLimit?: NullableIntFieldUpdateOperationsInput | number | null
    maxVocabularyWords?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUpsertWithWhereUniqueWithoutSubscriptionInput = {
    where: PaymentTransactionWhereUniqueInput
    update: XOR<PaymentTransactionUpdateWithoutSubscriptionInput, PaymentTransactionUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<PaymentTransactionCreateWithoutSubscriptionInput, PaymentTransactionUncheckedCreateWithoutSubscriptionInput>
  }

  export type PaymentTransactionUpdateWithWhereUniqueWithoutSubscriptionInput = {
    where: PaymentTransactionWhereUniqueInput
    data: XOR<PaymentTransactionUpdateWithoutSubscriptionInput, PaymentTransactionUncheckedUpdateWithoutSubscriptionInput>
  }

  export type PaymentTransactionUpdateManyWithWhereWithoutSubscriptionInput = {
    where: PaymentTransactionScalarWhereInput
    data: XOR<PaymentTransactionUpdateManyMutationInput, PaymentTransactionUncheckedUpdateManyWithoutSubscriptionInput>
  }

  export type AdminSubscriptionLogUpsertWithWhereUniqueWithoutSubscriptionInput = {
    where: AdminSubscriptionLogWhereUniqueInput
    update: XOR<AdminSubscriptionLogUpdateWithoutSubscriptionInput, AdminSubscriptionLogUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<AdminSubscriptionLogCreateWithoutSubscriptionInput, AdminSubscriptionLogUncheckedCreateWithoutSubscriptionInput>
  }

  export type AdminSubscriptionLogUpdateWithWhereUniqueWithoutSubscriptionInput = {
    where: AdminSubscriptionLogWhereUniqueInput
    data: XOR<AdminSubscriptionLogUpdateWithoutSubscriptionInput, AdminSubscriptionLogUncheckedUpdateWithoutSubscriptionInput>
  }

  export type AdminSubscriptionLogUpdateManyWithWhereWithoutSubscriptionInput = {
    where: AdminSubscriptionLogScalarWhereInput
    data: XOR<AdminSubscriptionLogUpdateManyMutationInput, AdminSubscriptionLogUncheckedUpdateManyWithoutSubscriptionInput>
  }

  export type UserCreateWithoutUsageQuotasInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionCreateNestedOneWithoutUserInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutUsageQuotasInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordUncheckedCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemUncheckedCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressUncheckedCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionUncheckedCreateNestedOneWithoutUserInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingUncheckedCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionUncheckedCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutUsageQuotasInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUsageQuotasInput, UserUncheckedCreateWithoutUsageQuotasInput>
  }

  export type UserUpsertWithoutUsageQuotasInput = {
    update: XOR<UserUpdateWithoutUsageQuotasInput, UserUncheckedUpdateWithoutUsageQuotasInput>
    create: XOR<UserCreateWithoutUsageQuotasInput, UserUncheckedCreateWithoutUsageQuotasInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUsageQuotasInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUsageQuotasInput, UserUncheckedUpdateWithoutUsageQuotasInput>
  }

  export type UserUpdateWithoutUsageQuotasInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUsageQuotasInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUncheckedUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUncheckedUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUncheckedUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUncheckedUpdateOneWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUncheckedUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUncheckedUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type UserCreateWithoutPaymentTransactionsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutPaymentTransactionsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordUncheckedCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemUncheckedCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressUncheckedCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionUncheckedCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaUncheckedCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingUncheckedCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionUncheckedCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutAdminUserInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutPaymentTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPaymentTransactionsInput, UserUncheckedCreateWithoutPaymentTransactionsInput>
  }

  export type UserSubscriptionCreateWithoutPaymentTransactionsInput = {
    id?: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSessionId?: string | null
    status: string
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    canceledAt?: Date | string | null
    lastPaymentAt?: Date | string | null
    nextPaymentAt?: Date | string | null
    isTestAccount?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubscriptionInput
    plan: SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutSubscriptionInput
  }

  export type UserSubscriptionUncheckedCreateWithoutPaymentTransactionsInput = {
    id?: string
    userId: string
    planId: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSessionId?: string | null
    status: string
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    canceledAt?: Date | string | null
    lastPaymentAt?: Date | string | null
    nextPaymentAt?: Date | string | null
    isTestAccount?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type UserSubscriptionCreateOrConnectWithoutPaymentTransactionsInput = {
    where: UserSubscriptionWhereUniqueInput
    create: XOR<UserSubscriptionCreateWithoutPaymentTransactionsInput, UserSubscriptionUncheckedCreateWithoutPaymentTransactionsInput>
  }

  export type UserUpsertWithoutPaymentTransactionsInput = {
    update: XOR<UserUpdateWithoutPaymentTransactionsInput, UserUncheckedUpdateWithoutPaymentTransactionsInput>
    create: XOR<UserCreateWithoutPaymentTransactionsInput, UserUncheckedCreateWithoutPaymentTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPaymentTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPaymentTransactionsInput, UserUncheckedUpdateWithoutPaymentTransactionsInput>
  }

  export type UserUpdateWithoutPaymentTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPaymentTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUncheckedUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUncheckedUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUncheckedUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUncheckedUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUncheckedUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUncheckedUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUncheckedUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutAdminUserNestedInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type UserSubscriptionUpsertWithoutPaymentTransactionsInput = {
    update: XOR<UserSubscriptionUpdateWithoutPaymentTransactionsInput, UserSubscriptionUncheckedUpdateWithoutPaymentTransactionsInput>
    create: XOR<UserSubscriptionCreateWithoutPaymentTransactionsInput, UserSubscriptionUncheckedCreateWithoutPaymentTransactionsInput>
    where?: UserSubscriptionWhereInput
  }

  export type UserSubscriptionUpdateToOneWithWhereWithoutPaymentTransactionsInput = {
    where?: UserSubscriptionWhereInput
    data: XOR<UserSubscriptionUpdateWithoutPaymentTransactionsInput, UserSubscriptionUncheckedUpdateWithoutPaymentTransactionsInput>
  }

  export type UserSubscriptionUpdateWithoutPaymentTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isTestAccount?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscriptionNestedInput
    plan?: SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutSubscriptionNestedInput
  }

  export type UserSubscriptionUncheckedUpdateWithoutPaymentTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isTestAccount?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type UserCreateWithoutAdminSubscriptionLogsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionCreateNestedManyWithoutCreatorInput
    targetAdminLogs?: AdminSubscriptionLogCreateNestedManyWithoutTargetUserInput
  }

  export type UserUncheckedCreateWithoutAdminSubscriptionLogsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordUncheckedCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemUncheckedCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressUncheckedCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionUncheckedCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaUncheckedCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingUncheckedCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionUncheckedCreateNestedManyWithoutCreatorInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutTargetUserInput
  }

  export type UserCreateOrConnectWithoutAdminSubscriptionLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminSubscriptionLogsInput, UserUncheckedCreateWithoutAdminSubscriptionLogsInput>
  }

  export type UserCreateWithoutTargetAdminLogsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogCreateNestedManyWithoutAdminUserInput
  }

  export type UserUncheckedCreateWithoutTargetAdminLogsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    googleId?: string | null
    emailVerified?: boolean
    preferredLanguage?: string
    isActive?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    practiceRecords?: PracticeRecordUncheckedCreateNestedManyWithoutUserInput
    chatSessions?: ChatSessionUncheckedCreateNestedManyWithoutUserInput
    vocabularyItems?: VocabularyItemUncheckedCreateNestedManyWithoutUserInput
    studyProgress?: StudyProgressUncheckedCreateNestedManyWithoutUserInput
    subscription?: UserSubscriptionUncheckedCreateNestedOneWithoutUserInput
    usageQuotas?: UsageQuotaUncheckedCreateNestedManyWithoutUserInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    questionRatings?: QuestionRatingUncheckedCreateNestedManyWithoutUserInput
    createdQuestions?: QuestionUncheckedCreateNestedManyWithoutCreatorInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedCreateNestedManyWithoutAdminUserInput
  }

  export type UserCreateOrConnectWithoutTargetAdminLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTargetAdminLogsInput, UserUncheckedCreateWithoutTargetAdminLogsInput>
  }

  export type UserSubscriptionCreateWithoutAdminSubscriptionLogsInput = {
    id?: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSessionId?: string | null
    status: string
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    canceledAt?: Date | string | null
    lastPaymentAt?: Date | string | null
    nextPaymentAt?: Date | string | null
    isTestAccount?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubscriptionInput
    plan: SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutSubscriptionInput
  }

  export type UserSubscriptionUncheckedCreateWithoutAdminSubscriptionLogsInput = {
    id?: string
    userId: string
    planId: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSessionId?: string | null
    status: string
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    canceledAt?: Date | string | null
    lastPaymentAt?: Date | string | null
    nextPaymentAt?: Date | string | null
    isTestAccount?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type UserSubscriptionCreateOrConnectWithoutAdminSubscriptionLogsInput = {
    where: UserSubscriptionWhereUniqueInput
    create: XOR<UserSubscriptionCreateWithoutAdminSubscriptionLogsInput, UserSubscriptionUncheckedCreateWithoutAdminSubscriptionLogsInput>
  }

  export type UserUpsertWithoutAdminSubscriptionLogsInput = {
    update: XOR<UserUpdateWithoutAdminSubscriptionLogsInput, UserUncheckedUpdateWithoutAdminSubscriptionLogsInput>
    create: XOR<UserCreateWithoutAdminSubscriptionLogsInput, UserUncheckedCreateWithoutAdminSubscriptionLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminSubscriptionLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminSubscriptionLogsInput, UserUncheckedUpdateWithoutAdminSubscriptionLogsInput>
  }

  export type UserUpdateWithoutAdminSubscriptionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUpdateManyWithoutCreatorNestedInput
    targetAdminLogs?: AdminSubscriptionLogUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminSubscriptionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUncheckedUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUncheckedUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUncheckedUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUncheckedUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUncheckedUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUncheckedUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUncheckedUpdateManyWithoutCreatorNestedInput
    targetAdminLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutTargetUserNestedInput
  }

  export type UserUpsertWithoutTargetAdminLogsInput = {
    update: XOR<UserUpdateWithoutTargetAdminLogsInput, UserUncheckedUpdateWithoutTargetAdminLogsInput>
    create: XOR<UserCreateWithoutTargetAdminLogsInput, UserUncheckedCreateWithoutTargetAdminLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTargetAdminLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTargetAdminLogsInput, UserUncheckedUpdateWithoutTargetAdminLogsInput>
  }

  export type UserUpdateWithoutTargetAdminLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutAdminUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTargetAdminLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    practiceRecords?: PracticeRecordUncheckedUpdateManyWithoutUserNestedInput
    chatSessions?: ChatSessionUncheckedUpdateManyWithoutUserNestedInput
    vocabularyItems?: VocabularyItemUncheckedUpdateManyWithoutUserNestedInput
    studyProgress?: StudyProgressUncheckedUpdateManyWithoutUserNestedInput
    subscription?: UserSubscriptionUncheckedUpdateOneWithoutUserNestedInput
    usageQuotas?: UsageQuotaUncheckedUpdateManyWithoutUserNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    questionRatings?: QuestionRatingUncheckedUpdateManyWithoutUserNestedInput
    createdQuestions?: QuestionUncheckedUpdateManyWithoutCreatorNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutAdminUserNestedInput
  }

  export type UserSubscriptionUpsertWithoutAdminSubscriptionLogsInput = {
    update: XOR<UserSubscriptionUpdateWithoutAdminSubscriptionLogsInput, UserSubscriptionUncheckedUpdateWithoutAdminSubscriptionLogsInput>
    create: XOR<UserSubscriptionCreateWithoutAdminSubscriptionLogsInput, UserSubscriptionUncheckedCreateWithoutAdminSubscriptionLogsInput>
    where?: UserSubscriptionWhereInput
  }

  export type UserSubscriptionUpdateToOneWithWhereWithoutAdminSubscriptionLogsInput = {
    where?: UserSubscriptionWhereInput
    data: XOR<UserSubscriptionUpdateWithoutAdminSubscriptionLogsInput, UserSubscriptionUncheckedUpdateWithoutAdminSubscriptionLogsInput>
  }

  export type UserSubscriptionUpdateWithoutAdminSubscriptionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isTestAccount?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscriptionNestedInput
    plan?: SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutSubscriptionNestedInput
  }

  export type UserSubscriptionUncheckedUpdateWithoutAdminSubscriptionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isTestAccount?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type PracticeRecordCreateManyUserInput = {
    id?: string
    sessionId: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    questionsCount: number
    correctAnswers: number
    totalTime: number
    score?: number | null
    realQuestions?: number
    aiPoolQuestions?: number
    realtimeQuestions?: number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: Date | string
  }

  export type ChatSessionCreateManyUserInput = {
    id?: string
    title?: string | null
    questionId?: string | null
    questionData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VocabularyItemCreateManyUserInput = {
    id?: string
    word: string
    definition?: string | null
    phonetic?: string | null
    audioUrl?: string | null
    context?: string | null
    meanings?: NullableJsonNullValueInput | InputJsonValue
    language?: string
    reading?: string | null
    jlpt?: VocabularyItemCreatejlptInput | string[]
    commonality?: boolean | null
    sourceType?: string | null
    sourceId?: string | null
    notes?: string | null
    mastered?: boolean
    tags?: VocabularyItemCreatetagsInput | string[]
    definitionLoading?: boolean
    definitionError?: boolean
    nextReviewDate?: Date | string
    reviewCount?: number
    correctCount?: number
    incorrectCount?: number
    easeFactor?: number
    interval?: number
    addedAt?: Date | string
    lastReviewedAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type StudyProgressCreateManyUserInput = {
    id?: string
    questionType: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    totalQuestions?: number
    correctAnswers?: number
    averageTime?: number
    bestScore?: number | null
    lastPracticeAt?: Date | string | null
    updatedAt?: Date | string
  }

  export type UsageQuotaCreateManyUserInput = {
    id?: string
    resourceType: string
    usedCount?: number
    limitCount?: number | null
    periodStart?: Date | string
    periodEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionCreateManyUserInput = {
    id?: string
    stripeSessionId?: string | null
    stripePaymentId?: string | null
    amount: number
    currency?: string
    status: string
    subscriptionId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionRatingCreateManyUserInput = {
    id?: string
    questionId: string
    rating: number
    comment?: string | null
    clarity?: number | null
    difficulty?: number | null
    quality?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionCreateManyCreatorInput = {
    id?: string
    type: $Enums.QuestionType
    difficulty: $Enums.DifficultyLevel
    source: $Enums.QuestionSource
    status?: $Enums.QuestionStatus
    content: JsonNullValueInput | InputJsonValue
    correctAnswer: string
    explanation?: string | null
    audioUrl?: string | null
    audioScript?: string | null
    qualityScore?: number
    difficultyScore?: number | null
    averageTime?: number | null
    successRate?: number | null
    usageCount?: number
    ratingCount?: number
    lastUsedAt?: Date | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminSubscriptionLogCreateManyAdminUserInput = {
    id?: string
    targetUserId: string
    subscriptionId?: string | null
    operationType: string
    oldStatus?: string | null
    newStatus?: string | null
    oldTestAccount?: boolean | null
    newTestAccount?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    createdAt?: Date | string
  }

  export type AdminSubscriptionLogCreateManyTargetUserInput = {
    id?: string
    adminUserId: string
    subscriptionId?: string | null
    operationType: string
    oldStatus?: string | null
    newStatus?: string | null
    oldTestAccount?: boolean | null
    newTestAccount?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    createdAt?: Date | string
  }

  export type PracticeRecordUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    questionsCount?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    totalTime?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    realQuestions?: IntFieldUpdateOperationsInput | number
    aiPoolQuestions?: IntFieldUpdateOperationsInput | number
    realtimeQuestions?: IntFieldUpdateOperationsInput | number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practiceAnswers?: PracticeAnswerUpdateManyWithoutPracticeRecordNestedInput
  }

  export type PracticeRecordUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    questionsCount?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    totalTime?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    realQuestions?: IntFieldUpdateOperationsInput | number
    aiPoolQuestions?: IntFieldUpdateOperationsInput | number
    realtimeQuestions?: IntFieldUpdateOperationsInput | number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practiceAnswers?: PracticeAnswerUncheckedUpdateManyWithoutPracticeRecordNestedInput
  }

  export type PracticeRecordUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    questionsCount?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    totalTime?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    realQuestions?: IntFieldUpdateOperationsInput | number
    aiPoolQuestions?: IntFieldUpdateOperationsInput | number
    realtimeQuestions?: IntFieldUpdateOperationsInput | number
    questions?: NullableJsonNullValueInput | InputJsonValue
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    questionId?: NullableStringFieldUpdateOperationsInput | string | null
    questionData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    questionId?: NullableStringFieldUpdateOperationsInput | string | null
    questionData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    questionId?: NullableStringFieldUpdateOperationsInput | string | null
    questionData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VocabularyItemUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    phonetic?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    meanings?: NullableJsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    reading?: NullableStringFieldUpdateOperationsInput | string | null
    jlpt?: VocabularyItemUpdatejlptInput | string[]
    commonality?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sourceType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mastered?: BoolFieldUpdateOperationsInput | boolean
    tags?: VocabularyItemUpdatetagsInput | string[]
    definitionLoading?: BoolFieldUpdateOperationsInput | boolean
    definitionError?: BoolFieldUpdateOperationsInput | boolean
    nextReviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewCount?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    incorrectCount?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VocabularyItemUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    phonetic?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    meanings?: NullableJsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    reading?: NullableStringFieldUpdateOperationsInput | string | null
    jlpt?: VocabularyItemUpdatejlptInput | string[]
    commonality?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sourceType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mastered?: BoolFieldUpdateOperationsInput | boolean
    tags?: VocabularyItemUpdatetagsInput | string[]
    definitionLoading?: BoolFieldUpdateOperationsInput | boolean
    definitionError?: BoolFieldUpdateOperationsInput | boolean
    nextReviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewCount?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    incorrectCount?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VocabularyItemUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    definition?: NullableStringFieldUpdateOperationsInput | string | null
    phonetic?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    context?: NullableStringFieldUpdateOperationsInput | string | null
    meanings?: NullableJsonNullValueInput | InputJsonValue
    language?: StringFieldUpdateOperationsInput | string
    reading?: NullableStringFieldUpdateOperationsInput | string | null
    jlpt?: VocabularyItemUpdatejlptInput | string[]
    commonality?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sourceType?: NullableStringFieldUpdateOperationsInput | string | null
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    mastered?: BoolFieldUpdateOperationsInput | boolean
    tags?: VocabularyItemUpdatetagsInput | string[]
    definitionLoading?: BoolFieldUpdateOperationsInput | boolean
    definitionError?: BoolFieldUpdateOperationsInput | boolean
    nextReviewDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewCount?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    incorrectCount?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudyProgressUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    averageTime?: FloatFieldUpdateOperationsInput | number
    bestScore?: NullableIntFieldUpdateOperationsInput | number | null
    lastPracticeAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudyProgressUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    averageTime?: FloatFieldUpdateOperationsInput | number
    bestScore?: NullableIntFieldUpdateOperationsInput | number | null
    lastPracticeAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudyProgressUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctAnswers?: IntFieldUpdateOperationsInput | number
    averageTime?: FloatFieldUpdateOperationsInput | number
    bestScore?: NullableIntFieldUpdateOperationsInput | number | null
    lastPracticeAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageQuotaUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: StringFieldUpdateOperationsInput | string
    usedCount?: IntFieldUpdateOperationsInput | number
    limitCount?: NullableIntFieldUpdateOperationsInput | number | null
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageQuotaUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: StringFieldUpdateOperationsInput | string
    usedCount?: IntFieldUpdateOperationsInput | number
    limitCount?: NullableIntFieldUpdateOperationsInput | number | null
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageQuotaUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    resourceType?: StringFieldUpdateOperationsInput | string
    usedCount?: IntFieldUpdateOperationsInput | number
    limitCount?: NullableIntFieldUpdateOperationsInput | number | null
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscription?: UserSubscriptionUpdateOneWithoutPaymentTransactionsNestedInput
  }

  export type PaymentTransactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionRatingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    clarity?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    quality?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type QuestionRatingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    clarity?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    quality?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionRatingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    clarity?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    quality?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    source?: EnumQuestionSourceFieldUpdateOperationsInput | $Enums.QuestionSource
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    content?: JsonNullValueInput | InputJsonValue
    correctAnswer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioScript?: NullableStringFieldUpdateOperationsInput | string | null
    qualityScore?: FloatFieldUpdateOperationsInput | number
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    averageTime?: NullableIntFieldUpdateOperationsInput | number | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practiceAnswers?: PracticeAnswerUpdateManyWithoutQuestionNestedInput
    ratings?: QuestionRatingUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    source?: EnumQuestionSourceFieldUpdateOperationsInput | $Enums.QuestionSource
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    content?: JsonNullValueInput | InputJsonValue
    correctAnswer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioScript?: NullableStringFieldUpdateOperationsInput | string | null
    qualityScore?: FloatFieldUpdateOperationsInput | number
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    averageTime?: NullableIntFieldUpdateOperationsInput | number | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practiceAnswers?: PracticeAnswerUncheckedUpdateManyWithoutQuestionNestedInput
    ratings?: QuestionRatingUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    source?: EnumQuestionSourceFieldUpdateOperationsInput | $Enums.QuestionSource
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    content?: JsonNullValueInput | InputJsonValue
    correctAnswer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioScript?: NullableStringFieldUpdateOperationsInput | string | null
    qualityScore?: FloatFieldUpdateOperationsInput | number
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    averageTime?: NullableIntFieldUpdateOperationsInput | number | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    usageCount?: IntFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aiGeneratedData?: NullableJsonNullValueInput | InputJsonValue
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminSubscriptionLogUpdateWithoutAdminUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    operationType?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    oldTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetUser?: UserUpdateOneRequiredWithoutTargetAdminLogsNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutAdminSubscriptionLogsNestedInput
  }

  export type AdminSubscriptionLogUncheckedUpdateWithoutAdminUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetUserId?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    oldTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminSubscriptionLogUncheckedUpdateManyWithoutAdminUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetUserId?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    oldTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminSubscriptionLogUpdateWithoutTargetUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    operationType?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    oldTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminUser?: UserUpdateOneRequiredWithoutAdminSubscriptionLogsNestedInput
    subscription?: UserSubscriptionUpdateOneWithoutAdminSubscriptionLogsNestedInput
  }

  export type AdminSubscriptionLogUncheckedUpdateWithoutTargetUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminUserId?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    oldTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminSubscriptionLogUncheckedUpdateManyWithoutTargetUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminUserId?: StringFieldUpdateOperationsInput | string
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    oldTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeAnswerCreateManyQuestionInput = {
    id?: string
    userId: string
    userAnswer: string
    isCorrect: boolean
    timeSpent: number
    practiceRecordId: string
    createdAt?: Date | string
  }

  export type QuestionRatingCreateManyQuestionInput = {
    id?: string
    userId: string
    rating: number
    comment?: string | null
    clarity?: number | null
    difficulty?: number | null
    quality?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PracticeAnswerUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userAnswer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practiceRecord?: PracticeRecordUpdateOneRequiredWithoutPracticeAnswersNestedInput
  }

  export type PracticeAnswerUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userAnswer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    practiceRecordId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeAnswerUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userAnswer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    practiceRecordId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionRatingUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    clarity?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    quality?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutQuestionRatingsNestedInput
  }

  export type QuestionRatingUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    clarity?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    quality?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionRatingUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    clarity?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    quality?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeAnswerCreateManyPracticeRecordInput = {
    id?: string
    userId: string
    questionId: string
    userAnswer: string
    isCorrect: boolean
    timeSpent: number
    createdAt?: Date | string
  }

  export type PracticeAnswerUpdateWithoutPracticeRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    userAnswer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutPracticeAnswersNestedInput
  }

  export type PracticeAnswerUncheckedUpdateWithoutPracticeRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    userAnswer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeAnswerUncheckedUpdateManyWithoutPracticeRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    userAnswer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateManySessionInput = {
    id?: string
    role: string
    content: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ChatMessageUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSubscriptionCreateManyPlanInput = {
    id?: string
    userId: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSessionId?: string | null
    status: string
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    canceledAt?: Date | string | null
    lastPaymentAt?: Date | string | null
    nextPaymentAt?: Date | string | null
    isTestAccount?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSubscriptionUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isTestAccount?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscriptionNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutSubscriptionNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUpdateManyWithoutSubscriptionNestedInput
  }

  export type UserSubscriptionUncheckedUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isTestAccount?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutSubscriptionNestedInput
    adminSubscriptionLogs?: AdminSubscriptionLogUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type UserSubscriptionUncheckedUpdateManyWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextPaymentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isTestAccount?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionCreateManySubscriptionInput = {
    id?: string
    userId: string
    stripeSessionId?: string | null
    stripePaymentId?: string | null
    amount: number
    currency?: string
    status: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminSubscriptionLogCreateManySubscriptionInput = {
    id?: string
    adminUserId: string
    targetUserId: string
    operationType: string
    oldStatus?: string | null
    newStatus?: string | null
    oldTestAccount?: boolean | null
    newTestAccount?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    createdAt?: Date | string
  }

  export type PaymentTransactionUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPaymentTransactionsNestedInput
  }

  export type PaymentTransactionUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUncheckedUpdateManyWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminSubscriptionLogUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    operationType?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    oldTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminUser?: UserUpdateOneRequiredWithoutAdminSubscriptionLogsNestedInput
    targetUser?: UserUpdateOneRequiredWithoutTargetAdminLogsNestedInput
  }

  export type AdminSubscriptionLogUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminUserId?: StringFieldUpdateOperationsInput | string
    targetUserId?: StringFieldUpdateOperationsInput | string
    operationType?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    oldTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminSubscriptionLogUncheckedUpdateManyWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminUserId?: StringFieldUpdateOperationsInput | string
    targetUserId?: StringFieldUpdateOperationsInput | string
    operationType?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    oldTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    newTestAccount?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}