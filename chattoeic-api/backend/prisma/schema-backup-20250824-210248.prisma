// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum QuestionType {
  LISTENING_PART1
  LISTENING_PART2
  LISTENING_PART3
  LISTENING_PART4
  READING_PART5
  READING_PART6
  READING_PART7
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String?
  name              String?
  avatar            String?
  role              UserRole @default(USER)
  googleId          String?  @unique
  emailVerified     Boolean  @default(false)
  preferredLanguage String   @default("zh")
  isActive          Boolean  @default(true)  // 用户账户是否活跃（用于禁用功能）
  
  // 用户设置
  settings          Json?
  
  // 订阅相关字段
  trialUsed         Boolean   @default(false)  // 是否已使用过免费试用
  trialStartedAt    DateTime? // 试用开始时间
  
  // 关联数据
  practiceRecords   PracticeRecord[]
  chatSessions      ChatSession[]
  vocabularyItems   VocabularyItem[]
  studyProgress     StudyProgress[]
  subscription      UserSubscription?
  usageQuotas       UsageQuota[]
  paymentTransactions PaymentTransaction[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastLoginAt       DateTime?
  
  @@map("users")
}

model PracticeRecord {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  sessionId       String        @unique
  questionType    QuestionType
  difficulty      DifficultyLevel
  questionsCount  Int
  correctAnswers  Int
  totalTime       Int           // 秒
  score           Int?          // TOEIC估分
  
  // 题目和答案详情
  questions       Json          // 包含题目内容和用户答案
  
  completedAt     DateTime      @default(now())
  
  @@map("practice_records")
}

model ChatSession {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title        String?
  messages     ChatMessage[]
  
  // 用于题目讨论的字段
  questionId   String?       // 题目ID，用于关联到特定题目的讨论
  questionData String?       // 题目数据的JSON字符串，用于保存题目详情
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@map("chat_sessions")
}

model ChatMessage {
  id            String      @id @default(cuid())
  sessionId     String
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  role          String      // "user" | "assistant"
  content       String
  metadata      Json?       // 额外信息，如题目引用等
  
  createdAt     DateTime    @default(now())
  
  @@map("chat_messages")
}

model VocabularyItem {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 基础单词信息
  word            String
  definition      String?
  phonetic        String?   // 音标
  audioUrl        String?   // 发音音频URL
  context         String?   // 上下文
  
  // 详细释义信息 (JSON 格式)
  meanings        Json?     // 词性和定义的复合结构
  
  // 语言和分类信息
  language        String    @default("en")  // 单词语言 (en/zh/ja)
  reading         String?   // 日文读音
  jlpt            String[]  // JLPT等级
  commonality     Boolean?  // 是否常用词
  
  // 来源信息
  sourceType      String?   // practice/review
  sourceId        String?   // 练习或复习的ID
  
  // 用户数据
  notes           String?   // 用户笔记
  mastered        Boolean   @default(false)  // 是否已掌握
  tags            String[]  // 标签
  
  // 状态字段
  definitionLoading Boolean @default(false)
  definitionError   Boolean @default(false)
  
  // 间隔重复数据 (兼容旧字段名)
  nextReviewDate  DateTime @default(now())
  reviewCount     Int      @default(0)
  correctCount    Int      @default(0)
  incorrectCount  Int      @default(0)
  easeFactor      Float    @default(2.5)   // easeIndex 在前端
  interval        Int      @default(1)     // intervalDays 在前端
  
  // 时间字段
  addedAt         DateTime @default(now())  // createdAt 在前端
  lastReviewedAt  DateTime?                 // lastReviewDate 在前端
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, word])
  @@map("vocabulary_items")
}

model StudyProgress {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  questionType    QuestionType
  difficulty      DifficultyLevel
  
  totalQuestions  Int           @default(0)
  correctAnswers  Int           @default(0)
  averageTime     Float         @default(0)
  bestScore       Int?
  lastPracticeAt  DateTime?
  
  updatedAt       DateTime      @updatedAt
  
  @@unique([userId, questionType, difficulty])
  @@map("study_progress")
}

model APIUsage {
  id            String   @id @default(cuid())
  userId        String?
  endpoint      String
  method        String
  statusCode    Int
  responseTime  Int      // 毫秒
  userAgent     String?
  ipAddress     String?
  
  createdAt     DateTime @default(now())
  
  @@map("api_usage")
}

model TokenBlacklist {
  id          String   @id @default(cuid())
  userId      String
  tokenId     String   // JWT中的jti或特殊标识如'ALL_TOKENS'
  reason      String   // 封禁原因
  expiresAt   DateTime // 黑名单过期时间
  createdAt   DateTime @default(now())
  
  @@unique([userId, tokenId])
  @@map("token_blacklist")
}

// ===============================
// 订阅系统相关模型
// ===============================

// 订阅套餐表
model SubscriptionPlan {
  id               String   @id @default(cuid())
  name             String   // "Free Trial", "Premium Monthly"
  nameJp           String?  // 日文名称
  priceCents       Int      // 价格（分为单位，3000日元 = 300000）
  currency         String   @default("jpy")
  interval         String   // "month", "year", "one_time"
  intervalCount    Int      @default(1)
  stripePriceId    String?  @unique
  stripeProductId  String?  @unique
  
  // 功能权限
  features         Json     // {"aiPractice": true, "aiChat": true, "exportData": true}
  
  // 使用限制 (null表示无限制)
  dailyPracticeLimit    Int?    // 每日练习次数限制
  dailyAiChatLimit      Int?    // 每日AI对话消息数限制 (试用期20条/天)
  maxVocabularyWords    Int?    // 词汇本单词上限
  
  isActive         Boolean  @default(true)
  sortOrder        Int      @default(0)
  
  // 关联
  subscriptions    UserSubscription[]
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("subscription_plans")
}

// 用户订阅表
model UserSubscription {
  id                    String           @id @default(cuid())
  userId                String           @unique // 每个用户只能有一个活跃订阅
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId                String
  plan                  SubscriptionPlan @relation(fields: [planId], references: [id])
  
  // Stripe相关字段
  stripeCustomerId      String?
  stripeSubscriptionId  String?          @unique
  stripeSessionId       String?          // 支付会话ID
  
  // 订阅状态
  status                String           // "trialing", "active", "past_due", "canceled", "unpaid"
  
  // 试用期
  trialStart           DateTime?
  trialEnd             DateTime?
  
  // 订阅周期
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean          @default(false)
  canceledAt           DateTime?
  
  // 付款历史
  lastPaymentAt        DateTime?
  nextPaymentAt        DateTime?
  
  // 关联
  paymentTransactions  PaymentTransaction[]
  
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  
  @@map("user_subscriptions")
}

// 使用配额跟踪表
model UsageQuota {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  resourceType String   // "daily_practice", "daily_ai_chat", "vocabulary_words"
  usedCount    Int      @default(0)
  limitCount   Int?     // null表示无限制
  
  // 重置周期
  periodStart  DateTime @default(now())
  periodEnd    DateTime
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([userId, resourceType, periodStart])
  @@map("usage_quotas")
}

// 支付交易记录表
model PaymentTransaction {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  
  stripeSessionId   String?  @unique
  stripePaymentId   String?  @unique
  
  amount            Int      // 金额（分）
  currency          String   @default("jpy")
  status            String   // "pending", "succeeded", "failed", "refunded"
  
  subscriptionId    String?
  subscription      UserSubscription? @relation(fields: [subscriptionId], references: [id])
  
  metadata          Json?    // 额外数据
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("payment_transactions")
}